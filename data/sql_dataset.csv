Context,Questions,SQL Queries
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);",Retrieve all training templates.,SELECT * FROM public.training_templates;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);",List all training templates that are for phishing.,SELECT * FROM public.training_templates WHERE is_phishing = true;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);",Retrieve the title and description of training templates with thumbnails.,"SELECT title, description FROM public.training_templates WHERE thumbnail_id IS NOT NULL;"
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);",Count the total number of training templates.,SELECT COUNT(*) FROM public.training_templates;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);",Retrieve training hub templates.,SELECT * FROM public.training_hub_templates;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);",Find training hubs that have associated templates.,SELECT DISTINCT training_id FROM public.training_hub_templates;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);",Find training templates that have no associated training hub.,SELECT tt.* FROM public.training_templates tt LEFT JOIN public.training_hub_templates tht ON tt.id = tht.template_id WHERE tht.template_id IS NULL;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);",Retrieve training templates with their associated file paths.,"SELECT tt.*, d.path FROM public.training_templates tt LEFT JOIN public.documents d ON tt.file_path_id = d.id;"
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);","Retrieve the titles of training templates that belong to a particular category (e.g., ""Security"").",SELECT title FROM public.training_templates WHERE description LIKE '%Security%';
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);",Find the total count of training templates that are not for phishing and have thumbnails.,SELECT COUNT(*) FROM public.training_templates WHERE is_phishing = false AND thumbnail_id IS NOT NULL;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);",Find training hubs that have more than 5 associated templates.,SELECT training_id FROM public.training_hub_templates GROUP BY training_id HAVING COUNT(template_id) > 5;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);",Retrieve training templates ordered by their creation date in descending order.,SELECT * FROM public.training_templates ORDER BY created_at DESC;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);","Retrieve training templates with their associated file paths and thumbnails, ordered by their title.","SELECT tt.*, d.path AS file_path, t.path AS thumbnail_path FROM public.training_templates tt LEFT JOIN public.documents d ON tt.file_path_id = d.id LEFT JOIN public.documents t ON tt.thumbnail_id = t.id ORDER BY tt.title;"
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);",Find training templates that have the same title as another template.,SELECT t1.* FROM public.training_templates t1 INNER JOIN public.training_templates t2 ON t1.title = t2.title WHERE t1.id <> t2.id;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);",Count the number of training hub templates for each training hub.,"SELECT tht.training_id, COUNT(tht.template_id) AS template_count FROM public.training_hub_templates tht GROUP BY tht.training_id;"
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List all projects that are currently enabled.,SELECT * FROM public.projects WHERE is_enabled = true;
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find the project lead's ID for a specific project by its name.,SELECT project_lead_id FROM public.projects WHERE name = '[specific_name]';
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Count the total number of projects in the database.,SELECT COUNT(*) FROM public.projects;
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List all projects with their company IDs.,"SELECT name, company_id FROM public.projects;"
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Retrieve the name and type of projects that have avatars.,"SELECT name, type FROM public.projects WHERE avatar IS NOT NULL;"
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List projects along with the names of their project leads.,"SELECT p.name AS project_name, a.firstname AS project_lead_firstname, a.lastname AS project_lead_lastname FROM public.projects p LEFT JOIN public.admins a ON p.project_lead_id = a.id;"
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find the projects that have the same project lead as another project.,SELECT p1.* FROM public.projects p1 INNER JOIN public.projects p2 ON p1.project_lead_id = p2.project_lead_id WHERE p1.id <> p2.id;
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List all admins who are associated with at least one project.,SELECT DISTINCT a.* FROM public.admins a INNER JOIN public.admins_projects ap ON a.id = ap.admin_id;
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Retrieve the names and descriptions of projects owned by super admins.,"SELECT name, description FROM public.projects WHERE project_lead_id IN (SELECT id FROM public.admins WHERE super_admin = true);"
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List all projects that do not have a company association.,SELECT * FROM public.projects WHERE company_id IS NULL;
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Retrieve project details and company information for projects with avatars.,"SELECT p.*, c.name AS company_name, c.industry, c.country FROM public.projects p LEFT JOIN public.company c ON p.company_id = c.id WHERE p.avatar IS NOT NULL;"
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List all projects that are of a specific type.,SELECT * FROM public.projects WHERE type = '[specific_type]';
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find the names and email addresses of project leads for all projects.,"SELECT a.firstname AS project_lead_firstname, a.lastname AS project_lead_lastname, a.email AS project_lead_email FROM public.projects p JOIN public.admins a ON p.project_lead_id = a.id;"
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Count the total number of projects in each project type category.,"SELECT type, COUNT(*) AS project_count FROM public.projects GROUP BY type;"
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Retrieve all training templates with their titles and descriptions.,"SELECT title, description FROM public.training_templates;"
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",List the IDs and file path IDs of training templates.,"SELECT id, file_path_id FROM public.training_templates;"
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Find the total number of training templates.,SELECT COUNT(*) FROM public.training_templates;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Retrieve training templates that are marked as phishing.,SELECT * FROM public.training_templates WHERE is_phishing = true;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);","Get the file extensions and MIME types of all documents in the ""Documents"" table.","SELECT ext, mime_type FROM public.documents;"
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);","List the node references and original names of documents in the ""Documents"" table.","SELECT node_ref, original_name FROM public.documents;"
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Find the documents with a specified file extension.,SELECT * FROM public.documents WHERE ext = '[specific_extension]';
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Get the total duration (in seconds) of all documents.,SELECT SUM(duration) AS total_duration_seconds FROM public.documents;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Retrieve training templates along with their associated document file paths and sizes.,"SELECT tt.title, d.path AS document_file_path, d.size AS document_size FROM public.training_templates tt LEFT JOIN public.documents d ON tt.file_path_id = d.id;"
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",List the IDs and original names of documents that have no associated training templates.,"SELECT d.id, d.original_name FROM public.documents d LEFT JOIN public.training_templates tt ON d.id = tt.file_path_id WHERE tt.id IS NULL;"
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Retrieve the IDs of documents that have a MIME type matching a specific value.,SELECT id FROM public.documents WHERE mime_type = '[specific_mime_type]';
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);","List the names, sizes, and extensions of documents ordered by size in descending order.","SELECT original_name, size, ext FROM public.documents ORDER BY size DESC;"
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Get the total count of documents with a specific MIME type.,SELECT COUNT(*) FROM public.documents WHERE mime_type = '[specific_mime_type]';
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Find training templates that have both a file path and a thumbnail assigned.,SELECT * FROM public.training_templates WHERE file_path_id IS NOT NULL AND thumbnail_id IS NOT NULL;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);","Find the average size of all documents in the ""Documents"" table.",SELECT AVG(size) AS average_size FROM public.documents;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Retrieve documents along with the total duration (in seconds) of all documents ordered by duration in ascending order.,"SELECT d.*, SUM(duration) OVER (ORDER BY duration ASC) AS total_duration_seconds FROM public.documents d;"
"-- Campaigns Log Table
CREATE TABLE public.campaigns_log (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    caught_users integer,
    opened_emails integer,
    total_emails integer,
    total_users integer,
    trained_users integer,
    trainings_sent integer,
    campaign_id bigint UNIQUE,
    training_in_progress integer
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Add Index to Campaign Table
CREATE INDEX project_index ON public.campaign (project_id);

-- Add Foreign Key Constraint
ALTER TABLE ONLY public.campaigns_log
    ADD CONSTRAINT fk_campaign_id FOREIGN KEY (campaign_id) REFERENCES public.campaign(id);","Retrieve the total number of campaigns in the ""Campaign"" table.",SELECT COUNT(*) FROM public.campaign;
"-- Campaigns Log Table
CREATE TABLE public.campaigns_log (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    caught_users integer,
    opened_emails integer,
    total_emails integer,
    total_users integer,
    trained_users integer,
    trainings_sent integer,
    campaign_id bigint UNIQUE,
    training_in_progress integer
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Add Index to Campaign Table
CREATE INDEX project_index ON public.campaign (project_id);

-- Add Foreign Key Constraint
ALTER TABLE ONLY public.campaigns_log
    ADD CONSTRAINT fk_campaign_id FOREIGN KEY (campaign_id) REFERENCES public.campaign(id);",Find the names and owners of campaigns that have been executed.,"SELECT name, owner FROM public.campaign WHERE executed = true;"
"-- Campaigns Log Table
CREATE TABLE public.campaigns_log (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    caught_users integer,
    opened_emails integer,
    total_emails integer,
    total_users integer,
    trained_users integer,
    trainings_sent integer,
    campaign_id bigint UNIQUE,
    training_in_progress integer
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Add Index to Campaign Table
CREATE INDEX project_index ON public.campaign (project_id);

-- Add Foreign Key Constraint
ALTER TABLE ONLY public.campaigns_log
    ADD CONSTRAINT fk_campaign_id FOREIGN KEY (campaign_id) REFERENCES public.campaign(id);",List the campaign names and subjects where the subject contains a specific keyword.,"SELECT name, subject FROM public.campaign WHERE subject LIKE '%[specific_keyword]%';"
"-- Campaigns Log Table
CREATE TABLE public.campaigns_log (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    caught_users integer,
    opened_emails integer,
    total_emails integer,
    total_users integer,
    trained_users integer,
    trainings_sent integer,
    campaign_id bigint UNIQUE,
    training_in_progress integer
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Add Index to Campaign Table
CREATE INDEX project_index ON public.campaign (project_id);

-- Add Foreign Key Constraint
ALTER TABLE ONLY public.campaigns_log
    ADD CONSTRAINT fk_campaign_id FOREIGN KEY (campaign_id) REFERENCES public.campaign(id);","Get the unique campaign IDs from the ""Campaigns Log"" table.",SELECT DISTINCT campaign_id FROM public.campaigns_log;
"-- Campaigns Log Table
CREATE TABLE public.campaigns_log (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    caught_users integer,
    opened_emails integer,
    total_emails integer,
    total_users integer,
    trained_users integer,
    trainings_sent integer,
    campaign_id bigint UNIQUE,
    training_in_progress integer
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Add Index to Campaign Table
CREATE INDEX project_index ON public.campaign (project_id);

-- Add Foreign Key Constraint
ALTER TABLE ONLY public.campaigns_log
    ADD CONSTRAINT fk_campaign_id FOREIGN KEY (campaign_id) REFERENCES public.campaign(id);",Retrieve campaigns that are scheduled and have reminders enabled.,SELECT * FROM public.campaign WHERE is_scheduled = true AND has_reminders = true;
"-- Campaigns Log Table
CREATE TABLE public.campaigns_log (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    caught_users integer,
    opened_emails integer,
    total_emails integer,
    total_users integer,
    trained_users integer,
    trainings_sent integer,
    campaign_id bigint UNIQUE,
    training_in_progress integer
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Add Index to Campaign Table
CREATE INDEX project_index ON public.campaign (project_id);

-- Add Foreign Key Constraint
ALTER TABLE ONLY public.campaigns_log
    ADD CONSTRAINT fk_campaign_id FOREIGN KEY (campaign_id) REFERENCES public.campaign(id);",Find campaigns created by a specific owner.,SELECT * FROM public.campaign WHERE owner = '[specific_owner]';
"-- Campaigns Log Table
CREATE TABLE public.campaigns_log (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    caught_users integer,
    opened_emails integer,
    total_emails integer,
    total_users integer,
    trained_users integer,
    trainings_sent integer,
    campaign_id bigint UNIQUE,
    training_in_progress integer
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Add Index to Campaign Table
CREATE INDEX project_index ON public.campaign (project_id);

-- Add Foreign Key Constraint
ALTER TABLE ONLY public.campaigns_log
    ADD CONSTRAINT fk_campaign_id FOREIGN KEY (campaign_id) REFERENCES public.campaign(id);",Get the names and launch statuses of campaigns ordered by name in ascending order.,"SELECT name, launched FROM public.campaign ORDER BY name ASC;"
"-- Campaigns Log Table
CREATE TABLE public.campaigns_log (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    caught_users integer,
    opened_emails integer,
    total_emails integer,
    total_users integer,
    trained_users integer,
    trainings_sent integer,
    campaign_id bigint UNIQUE,
    training_in_progress integer
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Add Index to Campaign Table
CREATE INDEX project_index ON public.campaign (project_id);

-- Add Foreign Key Constraint
ALTER TABLE ONLY public.campaigns_log
    ADD CONSTRAINT fk_campaign_id FOREIGN KEY (campaign_id) REFERENCES public.campaign(id);",List campaign names and their associated email profile IDs.,"SELECT name, email_profile_id FROM public.campaign;"
"-- Campaigns Log Table
CREATE TABLE public.campaigns_log (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    caught_users integer,
    opened_emails integer,
    total_emails integer,
    total_users integer,
    trained_users integer,
    trainings_sent integer,
    campaign_id bigint UNIQUE,
    training_in_progress integer
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Add Index to Campaign Table
CREATE INDEX project_index ON public.campaign (project_id);

-- Add Foreign Key Constraint
ALTER TABLE ONLY public.campaigns_log
    ADD CONSTRAINT fk_campaign_id FOREIGN KEY (campaign_id) REFERENCES public.campaign(id);",Find campaigns with auto-training enabled and specify the auto training IDs.,SELECT * FROM public.campaign WHERE is_auto_training = true AND auto_training_id IS NOT NULL;
"-- Campaigns Log Table
CREATE TABLE public.campaigns_log (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    caught_users integer,
    opened_emails integer,
    total_emails integer,
    total_users integer,
    trained_users integer,
    trainings_sent integer,
    campaign_id bigint UNIQUE,
    training_in_progress integer
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Add Index to Campaign Table
CREATE INDEX project_index ON public.campaign (project_id);

-- Add Foreign Key Constraint
ALTER TABLE ONLY public.campaigns_log
    ADD CONSTRAINT fk_campaign_id FOREIGN KEY (campaign_id) REFERENCES public.campaign(id);",Retrieve campaign names and execution statuses for campaigns that have been executed and have custom templates.,"SELECT name, executed FROM public.campaign WHERE executed = true AND has_custom_template = true;"
"-- Campaigns Log Table
CREATE TABLE public.campaigns_log (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    caught_users integer,
    opened_emails integer,
    total_emails integer,
    total_users integer,
    trained_users integer,
    trainings_sent integer,
    campaign_id bigint UNIQUE,
    training_in_progress integer
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Add Index to Campaign Table
CREATE INDEX project_index ON public.campaign (project_id);

-- Add Foreign Key Constraint
ALTER TABLE ONLY public.campaigns_log
    ADD CONSTRAINT fk_campaign_id FOREIGN KEY (campaign_id) REFERENCES public.campaign(id);","Count the total number of trained users for campaigns in the ""Campaigns Log"" table.",SELECT SUM(trained_users) FROM public.campaigns_log;
"-- Campaigns Log Table
CREATE TABLE public.campaigns_log (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    caught_users integer,
    opened_emails integer,
    total_emails integer,
    total_users integer,
    trained_users integer,
    trainings_sent integer,
    campaign_id bigint UNIQUE,
    training_in_progress integer
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Add Index to Campaign Table
CREATE INDEX project_index ON public.campaign (project_id);

-- Add Foreign Key Constraint
ALTER TABLE ONLY public.campaigns_log
    ADD CONSTRAINT fk_campaign_id FOREIGN KEY (campaign_id) REFERENCES public.campaign(id);",List campaign names and their associated project IDs.,"SELECT name, project_id FROM public.campaign;"
"-- Campaigns Log Table
CREATE TABLE public.campaigns_log (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    caught_users integer,
    opened_emails integer,
    total_emails integer,
    total_users integer,
    trained_users integer,
    trainings_sent integer,
    campaign_id bigint UNIQUE,
    training_in_progress integer
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Add Index to Campaign Table
CREATE INDEX project_index ON public.campaign (project_id);

-- Add Foreign Key Constraint
ALTER TABLE ONLY public.campaigns_log
    ADD CONSTRAINT fk_campaign_id FOREIGN KEY (campaign_id) REFERENCES public.campaign(id);",Retrieve campaigns created within a specific timezone.,SELECT * FROM public.campaign WHERE timezone = '[specific_timezone]';
"-- Campaigns Log Table
CREATE TABLE public.campaigns_log (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    caught_users integer,
    opened_emails integer,
    total_emails integer,
    total_users integer,
    trained_users integer,
    trainings_sent integer,
    campaign_id bigint UNIQUE,
    training_in_progress integer
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Add Index to Campaign Table
CREATE INDEX project_index ON public.campaign (project_id);

-- Add Foreign Key Constraint
ALTER TABLE ONLY public.campaigns_log
    ADD CONSTRAINT fk_campaign_id FOREIGN KEY (campaign_id) REFERENCES public.campaign(id);",Get the campaign names and their respective attack technique IDs.,"SELECT name, technique_id FROM public.campaign;"
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);","Find the total number of admins in the ""Admins"" table.",SELECT COUNT(*) FROM public.admins;
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Retrieve the email and last name of all activated admins.,"SELECT email, lastname FROM public.admins WHERE activated = true;"
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",List the first names and job roles of admins who are super admins.,"SELECT firstname, job_role FROM public.admins WHERE super_admin = true;"
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Get the unique usernames of all admins.,SELECT DISTINCT username FROM public.admins;
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Find admins with a specific job role.,SELECT * FROM public.admins WHERE job_role = '[specific_job_role]';
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Retrieve the last names and email addresses of admins in descending order of their last names.,"SELECT lastname, email FROM public.admins ORDER BY lastname DESC;"
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Get the first names and usernames of admins with a specific job role and who are super admins.,"SELECT firstname, username FROM public.admins WHERE job_role = '[specific_job_role]' AND super_admin = true;"
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Retrieve the email addresses and last names of admins whose last names contain a specific keyword.,"SELECT email, lastname FROM public.admins WHERE lastname LIKE '%[specific_keyword]%';"
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Retrieve the email addresses and job roles of admins whose first names contain a specific keyword and who are not super admins.,"SELECT email, job_role FROM public.admins WHERE firstname LIKE '%[specific_keyword]%' AND super_admin = false;"
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);","Find admins with a specific job role and who are super admins, and their corresponding role IDs.","SELECT job_role, super_admin, role_id FROM public.admins WHERE job_role = '[specific_job_role]' AND super_admin = true;"
"-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);

-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);","Find the total number of entries in the ""Training Hub"" table.",SELECT COUNT(*) FROM public.training_hub;
"-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);

-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);","Retrieve the IDs and creation timestamps of all entries in the ""Training Videos"" table.","SELECT id, created_at FROM public.training_videos;"
"-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);

-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);",List the names and descriptions of training videos that are enabled.,"SELECT name, description FROM public.training_videos WHERE is_enabled = true;"
"-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);

-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);",Get the IDs and creation timestamps of training hub entries with training templates.,"SELECT id, created_at FROM public.training_hub WHERE has_training_templates = true;"
"-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);

-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);","Find the unique names of training videos in the ""Training Videos"" table.",SELECT DISTINCT name FROM public.training_videos;
"-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);

-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);",Retrieve the names and poster IDs of training videos that are not enabled.,"SELECT name, poster_id FROM public.training_videos WHERE is_enabled = false;"
"-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);

-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);",List the IDs and update timestamps of training hub entries that have associated training templates.,"SELECT id, updated_at FROM public.training_hub WHERE has_training_templates = true;"
"-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);

-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);",Retrieve the names and poster IDs of training videos with unique names.,"SELECT name, poster_id FROM public.training_videos WHERE name IS NOT NULL GROUP BY name, poster_id HAVING COUNT(*) = 1;"
"-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);

-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);",List the IDs and creation timestamps of training hub entries associated with training templates and not enabled.,"SELECT id, created_at FROM public.training_hub WHERE has_training_templates = true AND is_enabled = false;"
"-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);

-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);",Get the descriptions and path IDs of training videos whose names start with a specific prefix.,"SELECT description, path_id FROM public.training_videos WHERE name LIKE '[prefix]%';"
"-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);

-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);",Retrieve the names and poster IDs of training videos with descriptions containing a specific keyword.,"SELECT name, poster_id FROM public.training_videos WHERE description LIKE '%[keyword]%';"
"-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);

-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);",List the IDs and update timestamps of training hub entries with training templates that are not enabled.,"SELECT id, updated_at FROM public.training_hub WHERE has_training_templates = true AND is_enabled = false;"
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Retrieve all email templates with their titles and descriptions.,"SELECT title, description FROM public.email_template;"
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",List all enabled attack techniques along with their descriptions.,SELECT description FROM public.attack_techniques WHERE is_enabled = true;
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Find the total number of email templates in the database.,SELECT COUNT(*) FROM public.email_template;
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Get the names and icons of attack techniques that are not enabled.,"SELECT name, icon FROM public.attack_techniques WHERE is_enabled = false;"
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Retrieve email templates with compromise rates greater than 0.5.,SELECT * FROM public.email_template WHERE compromise_rate > 0.5;
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",List all unique attack technique names.,SELECT DISTINCT name FROM public.attack_techniques;
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Find email templates with specific brands and industries.,SELECT * FROM public.email_template WHERE brand = '[specific_brand]' AND industry = '[specific_industry]';
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Get the icons and descriptions of attack techniques that have a unique name.,"SELECT icon, description FROM public.attack_techniques WHERE name IN (SELECT name FROM public.attack_techniques GROUP BY name HAVING COUNT(*) = 1);"
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Retrieve email templates with compromise rates between 0.1 and 0.3.,SELECT * FROM public.email_template WHERE compromise_rate >= 0.1 AND compromise_rate <= 0.3;
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);","List all attack techniques with descriptions containing the word ""phishing.""",SELECT * FROM public.attack_techniques WHERE description LIKE '%phishing%';
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Get the names and descriptions of attack techniques that are not enabled and have descriptions longer than 50 characters.,"SELECT name, description FROM public.attack_techniques WHERE is_enabled = false AND LENGTH(description) > 50;"
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",List all attack techniques with unique names.,SELECT name FROM public.attack_techniques GROUP BY name HAVING COUNT(*) = 1;
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Find email templates with specific brands and themes.,SELECT * FROM public.email_template WHERE brand = '[specific_brand]' AND theme = '[specific_theme]';
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Get the names and icons of attack techniques with icons that are not null.,"SELECT name, icon FROM public.attack_techniques WHERE icon IS NOT NULL;"
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Retrieve email templates with descriptions that contain a specific keyword.,SELECT * FROM public.email_template WHERE description LIKE '%[keyword]%';
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",List all enabled attack techniques ordered by their descriptions in ascending order.,SELECT * FROM public.attack_techniques WHERE is_enabled = true ORDER BY description ASC;
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Find email templates with titles containing a specific phrase.,SELECT * FROM public.email_template WHERE title LIKE '%[phrase]%';
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Retrieve all email templates.,SELECT * FROM public.email_template;
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",List all enabled email templates.,SELECT * FROM public.email_template WHERE is_enabled = true;
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Get the total number of email templates.,SELECT COUNT(*) FROM public.email_template;
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Retrieve the titles and descriptions of email templates.,"SELECT title, description FROM public.email_template;"
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Find email templates with a compromise rate greater than 0.5.,SELECT * FROM public.email_template WHERE compromise_rate > 0.5;
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",List documents with a size greater than 1000.,SELECT * FROM public.documents WHERE size > 1000;
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Get the names and themes of email templates with a subject containing 'security'.,"SELECT title, theme FROM public.email_template WHERE subject LIKE '%security%';"
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);","Retrieve documents with specific extensions (e.g., PDF or DOCX).","SELECT * FROM public.documents WHERE ext IN ('PDF', 'DOCX');"
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",List email templates that have associated thumbnails.,SELECT * FROM public.email_template WHERE thumbnail_id IS NOT NULL;
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Find documents with a specific original name.,SELECT * FROM public.documents WHERE original_name = '[specific_name]';
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Get email templates with a compromise rate between 0.2 and 0.5.,SELECT * FROM public.email_template WHERE compromise_rate BETWEEN 0.2 AND 0.5;
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Retrieve documents with a specific MIME type.,SELECT * FROM public.documents WHERE mime_type = '[specific_mime_type]';
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",List documents with a specific node reference.,SELECT * FROM public.documents WHERE node_ref = '[specific_node_ref]';
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Get email templates with unique brands.,SELECT DISTINCT brand FROM public.email_template;
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Find documents with a specific path.,SELECT * FROM public.documents WHERE path = '[specific_path]';
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Retrieve email templates sorted by compromise rate in descending order.,SELECT * FROM public.email_template ORDER BY compromise_rate DESC;
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",Retrieve all admin users.,SELECT * FROM public.admins;
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",Find the admin with a specific username.,SELECT * FROM public.admins WHERE username = '[specific_username]';
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",List all enabled admin users.,SELECT * FROM public.admins WHERE is_enabled = true;
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",Get the total number of admin users.,SELECT COUNT(*) FROM public.admins;
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",Retrieve the first and last names of admin users.,"SELECT firstname, lastname FROM public.admins;"
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",Find admin users with the job role 'Manager'.,SELECT * FROM public.admins WHERE job_role = 'Manager';
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",List admins who are super admins.,SELECT * FROM public.admins WHERE super_admin = true;
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",Get admin users with a specific phone number.,SELECT * FROM public.admins WHERE phone = '[specific_phone]';
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",Find admin users with activated accounts.,SELECT * FROM public.admins WHERE activated = true;
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",List admin users who have a role with a specific name.,SELECT * FROM public.admins WHERE role_id IN (SELECT id FROM public.roles WHERE name = '[specific_role_name]');
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",Find admins with a specific email address.,SELECT * FROM public.admins WHERE email = '[specific_email]';
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",Retrieve admins sorted by their last names in ascending order.,SELECT * FROM public.admins ORDER BY lastname ASC;
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",List admin users with unique job roles.,SELECT DISTINCT job_role FROM public.admins;
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",Get admin users who have not been activated.,SELECT * FROM public.admins WHERE activated = false;
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",Find admin users with specific first names and last names.,SELECT * FROM public.admins WHERE firstname = '[specific_firstname]' AND lastname = '[specific_lastname]';
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",Retrieve admins with usernames that start with 'admin'.,SELECT * FROM public.admins WHERE username LIKE 'admin%';
"-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Retrieve all training videos.,SELECT * FROM public.training_videos;
"-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Find the details of a specific training video by its unique name.,SELECT * FROM public.training_videos WHERE name = '[specific_name]';
"-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",List all enabled training videos.,SELECT * FROM public.training_videos WHERE is_enabled = true;
"-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Get the total number of training videos.,SELECT COUNT(*) FROM public.training_videos;
"-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Retrieve the descriptions of all training videos.,SELECT description FROM public.training_videos;
"-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Find training videos with a specific description.,SELECT * FROM public.training_videos WHERE description = '[specific_description]';
"-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Retrieve training videos with unique names.,SELECT DISTINCT name FROM public.training_videos;
"-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",List training videos with descriptions containing a specific keyword.,SELECT * FROM public.training_videos WHERE description LIKE '%[specific_keyword]%';
"-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Retrieve training videos sorted by their names in ascending order.,SELECT * FROM public.training_videos ORDER BY name ASC;
"-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",List training videos sorted by their creation timestamps in descending order.,SELECT * FROM public.training_videos ORDER BY created_at DESC;
"-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Get training videos with descriptions that do not contain a specific keyword.,SELECT * FROM public.training_videos WHERE description NOT LIKE '%[specific_keyword]%';
"-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Retrieve training videos that are not enabled.,SELECT * FROM public.training_videos WHERE is_enabled = false;
"-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",List training videos with descriptions that are NULL.,SELECT * FROM public.training_videos WHERE description IS NULL;
"-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Find training videos with specific names and descriptions.,SELECT * FROM public.training_videos WHERE name = '[specific_name]' AND description = '[specific_description]';
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);",Retrieve all campaigns.,SELECT * FROM public.campaign;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);",List all enabled campaigns.,SELECT * FROM public.campaign WHERE is_enabled = true;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);",Get the total number of campaigns.,SELECT COUNT(*) FROM public.campaign;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);",Retrieve the names of all campaigns.,SELECT name FROM public.campaign;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);",Find campaigns with a specific name.,SELECT * FROM public.campaign WHERE name = '[specific_name]';
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);",Retrieve campaigns sorted by their names in ascending order.,SELECT * FROM public.campaign ORDER BY name ASC;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);",List campaigns sorted by their creation timestamps in descending order.,SELECT * FROM public.campaign ORDER BY created_at DESC;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);",Retrieve campaigns with custom templates.,SELECT * FROM public.campaign WHERE has_custom_template = true;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);",List campaigns with scheduled launches.,SELECT * FROM public.campaign WHERE is_scheduled = true;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);",Find campaigns with auto-training enabled.,SELECT * FROM public.campaign WHERE is_auto_training = true;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);",Get campaigns with reminders.,SELECT * FROM public.campaign WHERE has_reminders = true;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);",Retrieve campaigns with specific timezones.,SELECT * FROM public.campaign WHERE timezone = '[specific_timezone]';
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);",Find campaigns that are not enabled.,SELECT * FROM public.campaign WHERE is_enabled = false;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Retrieve all users.,SELECT * FROM public.users;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",List all enabled users.,SELECT * FROM public.users WHERE is_enabled = true;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Get the total number of users.,SELECT COUNT(*) FROM public.users;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Retrieve the first and last names of all users.,"SELECT firstname, lastname FROM public.users;"
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Find users with a specific email.,SELECT * FROM public.users WHERE email = '[specific_email]';
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Retrieve users who are offended and compromised.,SELECT * FROM public.users WHERE offended = true AND compromised = true;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Get users who are simulated but not compromised.,SELECT * FROM public.users WHERE simulated = true AND compromised = false;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Retrieve users sorted by their last names in ascending order.,SELECT * FROM public.users ORDER BY lastname ASC;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",List users sorted by their creation timestamps in descending order.,SELECT * FROM public.users ORDER BY created_at DESC;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Find users with a specific country and industry in their company.,SELECT * FROM public.users u JOIN public.company c ON u.company_id = c.id WHERE c.country = '[specific_country]' AND c.industry = '[specific_industry]';
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Retrieve users who are not enabled.,SELECT * FROM public.users WHERE is_enabled = false;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Find users without a project association.,SELECT * FROM public.users WHERE project_id IS NULL;
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Retrieve all admin-project associations.,SELECT * FROM public.admins_projects;
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Get the total number of admin-project associations.,SELECT COUNT(*) FROM public.admins_projects;
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Get admin-project associations for a specific project type.,SELECT * FROM public.admins_projects ap JOIN public.projects p ON ap.project_id = p.id WHERE p.type = '[specific_project_type]';
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find admin-project associations where the admin is a super admin.,SELECT * FROM public.admins_projects ap JOIN public.admins a ON ap.admin_id = a.id WHERE a.super_admin = true;
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Get admin-project associations for projects with a specific avatar.,SELECT * FROM public.admins_projects ap JOIN public.projects p ON ap.project_id = p.id WHERE p.avatar = '[specific_avatar]';
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Retrieve admin-project associations with a specific project URL.,SELECT * FROM public.admins_projects ap JOIN public.projects p ON ap.project_id = p.id WHERE p.url = '[specific_url]';
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List admin-project associations for projects with a certain description.,SELECT * FROM public.admins_projects ap JOIN public.projects p ON ap.project_id = p.id WHERE p.description = '[specific_description]';
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Get admin-project associations for projects of a specific project name.,SELECT * FROM public.admins_projects ap JOIN public.projects p ON ap.project_id = p.id WHERE p.name = '[specific_project_name]';
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Retrieve admin-project associations for projects with a certain project type and an admin's job role.,SELECT * FROM public.admins_projects ap JOIN public.projects p ON ap.project_id = p.id JOIN public.admins a ON ap.admin_id = a.id WHERE p.type = '[specific_project_type]' AND a.job_role = '[specific_job_role]';
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List admin-project associations for projects of a specific industry and owned by a super admin.,SELECT * FROM public.admins_projects ap JOIN public.projects p ON ap.project_id = p.id JOIN public.admins a ON ap.admin_id = a.id WHERE p.company_id IS NOT NULL AND a.super_admin = true;
"-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find admin-project associations for projects that have no company associated.,SELECT * FROM public.admins_projects ap JOIN public.projects p ON ap.project_id = p.id WHERE p.company_id IS NULL;
"-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Retrieve all groups.,SELECT * FROM public.groups;
"-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List all enabled groups.,SELECT * FROM public.groups WHERE is_enabled = true;
"-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Get the total number of groups.,SELECT COUNT(*) FROM public.groups;
"-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Retrieve groups with a specific name.,SELECT * FROM public.groups WHERE name = '[specific_name]';
"-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find groups with a certain description.,SELECT * FROM public.groups WHERE description = '[specific_description]';
"-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Retrieve groups with a specific name and description.,SELECT * FROM public.groups WHERE name = '[specific_name]' AND description = '[specific_description]';
"-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List groups for projects of a specific project type.,SELECT * FROM public.groups g JOIN public.projects p ON g.project_id = p.id WHERE p.type = '[specific_project_type]';
"-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Get groups with a name similar to a specific keyword.,SELECT * FROM public.groups WHERE name LIKE '%[specific_keyword]%';
"-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List groups for projects with a specific avatar.,SELECT * FROM public.groups g JOIN public.projects p ON g.project_id = p.id WHERE p.avatar = '[specific_avatar]';
"-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find groups for projects with a specific URL.,SELECT * FROM public.groups g JOIN public.projects p ON g.project_id = p.id WHERE p.url = '[specific_url]';
"-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Get groups sorted by their creation date in descending order.,SELECT * FROM public.groups ORDER BY created_at DESC;
"-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List groups for projects owned by companies of a specific industry.,SELECT * FROM public.groups g JOIN public.projects p ON g.project_id = p.id JOIN public.company c ON p.company_id = c.id WHERE c.industry = '[specific_industry]';
"-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find groups with descriptions containing specific keywords.,SELECT * FROM public.groups WHERE description LIKE '%[specific_keyword]%';
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",Retrieve all admins.,SELECT * FROM public.admins;
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",List all enabled admins.,SELECT * FROM public.admins WHERE is_enabled = true;
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",Get the total number of admins.,SELECT COUNT(*) FROM public.admins;
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",Retrieve admins with a specific first name.,SELECT * FROM public.admins WHERE firstname = '[specific_firstname]';
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",Find admins with a certain job role.,SELECT * FROM public.admins WHERE job_role = '[specific_job_role]';
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",Retrieve admins with a specific email address.,SELECT * FROM public.admins WHERE email = '[specific_email]';
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",List admins who are super admins.,SELECT * FROM public.admins WHERE super_admin = true;
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",Find admins with a last name similar to a specific keyword.,SELECT * FROM public.admins WHERE lastname LIKE '%[specific_keyword]%';
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",Get admins with usernames containing a specific keyword.,SELECT * FROM public.admins WHERE username LIKE '%[specific_keyword]%';
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",Retrieve admins with both a first name and last name matching specific values.,SELECT * FROM public.admins WHERE firstname = '[specific_firstname]' AND lastname = '[specific_lastname]';
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",List admins for projects with a specific project type.,SELECT a.* FROM public.admins a JOIN public.admins_projects ap ON a.id = ap.admin_id JOIN public.projects p ON ap.project_id = p.id WHERE p.type = '[specific_project_type]';
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",Get admins sorted by their creation date in descending order.,SELECT * FROM public.admins ORDER BY created_at DESC;
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",Retrieve admins who are not super admins.,SELECT * FROM public.admins WHERE super_admin = false;
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",List admins for projects with a specific avatar.,SELECT a.* FROM public.admins a JOIN public.admins_projects ap ON a.id = ap.admin_id JOIN public.projects p ON ap.project_id = p.id WHERE p.avatar = '[specific_avatar]';
"-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",Find admins who have been activated.,SELECT * FROM public.admins WHERE activated = true;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Retrieve all training templates.,SELECT * FROM public.training_templates;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",List enabled training templates.,SELECT * FROM public.training_templates WHERE is_enabled = true;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Get the total number of training templates.,SELECT COUNT(*) FROM public.training_templates;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Retrieve training templates with a specific title.,SELECT * FROM public.training_templates WHERE title = '[specific_title]';
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",List training templates that are phishing simulations.,SELECT * FROM public.training_templates WHERE is_phishing = true;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Find training templates with a certain description.,SELECT * FROM public.training_templates WHERE description = '[specific_description]';
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Find training templates with a description containing a specific keyword.,SELECT * FROM public.training_templates WHERE description LIKE '%[specific_keyword]%';
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Get training templates with a title similar to a specific keyword.,SELECT * FROM public.training_templates WHERE title LIKE '%[specific_keyword]%';
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",List training templates with a certain MIME type.,SELECT * FROM public.training_templates t JOIN public.documents d ON t.file_path_id = d.id WHERE d.mime_type = '[specific_mime_type]';
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Find training templates that are not phishing simulations.,SELECT * FROM public.training_templates WHERE is_phishing = false;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Get training templates sorted by their creation date in ascending order.,SELECT * FROM public.training_templates ORDER BY created_at ASC;
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",List training templates with a specific extension.,SELECT * FROM public.training_templates t JOIN public.documents d ON t.file_path_id = d.id WHERE d.ext = '[specific_extension]';
"-- Training Templates Table
CREATE TABLE public.training_templates (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    is_phishing boolean,
    title varchar(255),
    file_path_id bigint,
    thumbnail_id bigint,
    FOREIGN KEY (file_path_id) REFERENCES public.documents(id),
    FOREIGN KEY (thumbnail_id) REFERENCES public.documents(id)
);


-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Find training templates with a title similar to a specific keyword and are enabled.,SELECT * FROM public.training_templates WHERE title LIKE '%[specific_keyword]%' AND is_enabled = true;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Users-Groups Table
CREATE TABLE public.users_groups (
    user_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (user_id, group_id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);",Retrieve all users.,SELECT * FROM public.users;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Users-Groups Table
CREATE TABLE public.users_groups (
    user_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (user_id, group_id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);",List enabled users.,SELECT * FROM public.users WHERE is_enabled = true;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Users-Groups Table
CREATE TABLE public.users_groups (
    user_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (user_id, group_id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);",Get the total number of users.,SELECT COUNT(*) FROM public.users;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Users-Groups Table
CREATE TABLE public.users_groups (
    user_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (user_id, group_id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);",Retrieve users with a specific email address.,SELECT * FROM public.users WHERE email = '[specific_email]';
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Users-Groups Table
CREATE TABLE public.users_groups (
    user_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (user_id, group_id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);",Find users who are offended.,SELECT * FROM public.users WHERE offended = true;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Users-Groups Table
CREATE TABLE public.users_groups (
    user_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (user_id, group_id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);",Get users with a specific first name.,SELECT * FROM public.users WHERE firstname = '[specific_firstname]';
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Users-Groups Table
CREATE TABLE public.users_groups (
    user_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (user_id, group_id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);",Retrieve users with a specific last name.,SELECT * FROM public.users WHERE lastname = '[specific_lastname]';
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Users-Groups Table
CREATE TABLE public.users_groups (
    user_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (user_id, group_id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);",List users who are neither offended nor compromised.,SELECT * FROM public.users WHERE offended = false AND compromised = false;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Users-Groups Table
CREATE TABLE public.users_groups (
    user_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (user_id, group_id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);",Get users who are offended or compromised.,SELECT * FROM public.users WHERE offended = true OR compromised = true;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Users-Groups Table
CREATE TABLE public.users_groups (
    user_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (user_id, group_id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);",Find users who are compromised and belong to a group with a specific name.,SELECT u.* FROM public.users u JOIN public.users_groups ug ON u.id = ug.user_id JOIN public.groups g ON ug.group_id = g.id WHERE u.compromised = true AND g.name = '[specific_group_name]';
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);",Retrieve all campaign email templates.,SELECT * FROM public.campaign_email_template;
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);",List enabled campaign email templates.,SELECT * FROM public.campaign_email_template WHERE is_enabled = true;
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);",Get the total number of campaign email templates.,SELECT COUNT(*) FROM public.campaign_email_template;
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);",List campaign email templates with a custom template.,SELECT * FROM public.campaign_email_template WHERE custom_template IS NOT NULL;
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);",Retrieve campaign email templates for campaigns that are scheduled.,SELECT cet.* FROM public.campaign_email_template cet JOIN public.campaign c ON cet.campaign_id = c.id WHERE c.is_scheduled = true;
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);",Find campaign email templates associated with email templates of a certain brand.,SELECT cet.* FROM public.campaign_email_template cet JOIN public.email_template et ON cet.email_template_id = et.id WHERE et.brand = '[specific_brand]';
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);",Get campaign email templates for campaigns of a specific type.,SELECT cet.* FROM public.campaign_email_template cet JOIN public.campaign c ON cet.campaign_id = c.id WHERE c.type = '[specific_type]';
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);",Retrieve campaign email templates for campaigns with a custom template and a specific subject.,SELECT cet.* FROM public.campaign_email_template cet JOIN public.campaign c ON cet.campaign_id = c.id WHERE c.has_custom_template = true AND c.subject = '[specific_subject]';
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);",Find campaign email templates with custom templates that reference specific documents.,SELECT * FROM public.campaign_email_template WHERE custom_template LIKE '%[specific_document_reference]%';
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);",Get campaign email templates associated with email templates from a certain industry.,SELECT cet.* FROM public.campaign_email_template cet JOIN public.email_template et ON cet.email_template_id = et.id WHERE et.industry = '[specific_industry]';
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);",Retrieve campaign email templates for campaigns in a specific timezone.,SELECT cet.* FROM public.campaign_email_template cet JOIN public.campaign c ON cet.campaign_id = c.id WHERE c.timezone = '[specific_timezone]';
"-- Users-Groups Table
CREATE TABLE public.users_groups (
    user_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (user_id, group_id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);",Retrieve all user-group associations.,SELECT * FROM public.users_groups;
"-- Users-Groups Table
CREATE TABLE public.users_groups (
    user_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (user_id, group_id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);",Get the total number of user-group associations.,SELECT COUNT(*) FROM public.users_groups;
"-- Users-Groups Table
CREATE TABLE public.users_groups (
    user_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (user_id, group_id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);",List user-group associations where the group is described with specific text.,SELECT ug.* FROM public.users_groups ug JOIN public.groups g ON ug.group_id = g.id WHERE g.description LIKE '%[specific_text]%';
"-- Users-Groups Table
CREATE TABLE public.users_groups (
    user_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (user_id, group_id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);",List user-group associations for users who are offended or compromised.,SELECT * FROM public.users_groups ug WHERE ug.user_id IN (SELECT id FROM public.users WHERE offended = true OR compromised = true);
"-- Users-Groups Table
CREATE TABLE public.users_groups (
    user_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (user_id, group_id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);",Get user-group associations for users with a certain email domain.,SELECT ug.* FROM public.users_groups ug JOIN public.users u ON ug.user_id = u.id WHERE u.email LIKE '%@[specific_domain]%';
"-- Users-Groups Table
CREATE TABLE public.users_groups (
    user_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (user_id, group_id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);",List user-group associations for users and groups with certain criteria.,SELECT * FROM public.users_groups WHERE user_id IN (SELECT id FROM public.users WHERE firstname = '[specific_firstname]' AND lastname = '[specific_lastname]') AND group_id IN (SELECT id FROM public.groups WHERE description LIKE '%[specific_description]%');
"-- Users-Groups Table
CREATE TABLE public.users_groups (
    user_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (user_id, group_id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);",Retrieve user-group associations for users who are members of multiple groups.,SELECT user_id FROM public.users_groups GROUP BY user_id HAVING COUNT(*) > 1;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);

-- Index on Project ID
CREATE INDEX project_index ON public.campaign (project_id);",Retrieve all user IDs who were caught in any campaign.,SELECT DISTINCT user_id FROM public.users_in_campaigns WHERE caught = true;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);

-- Index on Project ID
CREATE INDEX project_index ON public.campaign (project_id);",Find the total number of campaigns that have been executed.,SELECT COUNT(*) FROM public.campaign WHERE executed = true;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);

-- Index on Project ID
CREATE INDEX project_index ON public.campaign (project_id);",List all campaigns with custom templates.,SELECT * FROM public.campaign WHERE has_custom_template = true;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);

-- Index on Project ID
CREATE INDEX project_index ON public.campaign (project_id);",Get the names of campaigns that were scheduled.,SELECT name FROM public.campaign WHERE is_scheduled = true;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);

-- Index on Project ID
CREATE INDEX project_index ON public.campaign (project_id);",Find campaigns launched by a specific owner.,SELECT * FROM public.campaign WHERE owner = '[specific_owner]';
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);

-- Index on Project ID
CREATE INDEX project_index ON public.campaign (project_id);",List campaigns with auto-training enabled.,SELECT * FROM public.campaign WHERE is_auto_training = true;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);

-- Index on Project ID
CREATE INDEX project_index ON public.campaign (project_id);",Find campaigns in a specific timezone.,SELECT * FROM public.campaign WHERE timezone = '[specific_timezone]';
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);

-- Index on Project ID
CREATE INDEX project_index ON public.campaign (project_id);",Retrieve all user IDs who have received training.,SELECT DISTINCT user_id FROM public.users_in_campaigns WHERE trained = true;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);

-- Index on Project ID
CREATE INDEX project_index ON public.campaign (project_id);",List campaigns that are not scheduled and have a specific subject.,SELECT * FROM public.campaign WHERE is_scheduled = false AND subject = '[specific_subject]';
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);

-- Index on Project ID
CREATE INDEX project_index ON public.campaign (project_id);",Retrieve campaign IDs with auto-training and reminders enabled.,SELECT id FROM public.campaign WHERE is_auto_training = true AND has_reminders = true;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);

-- Index on Project ID
CREATE INDEX project_index ON public.campaign (project_id);",Find campaigns of a specific type.,SELECT * FROM public.campaign WHERE type = '[specific_type]';
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);

-- Index on Project ID
CREATE INDEX project_index ON public.campaign (project_id);",Retrieve user IDs who have training in progress.,SELECT DISTINCT user_id FROM public.users_in_campaigns WHERE training_in_progress = true;
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);",Get the names of all groups.,SELECT name FROM public.groups;
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);",List the names of groups with a specific description.,SELECT name FROM public.groups WHERE description = '[specific_description]';
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);",Find groups that are enabled.,SELECT * FROM public.groups WHERE is_enabled = true;
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);",Retrieve admin IDs who are part of any group.,SELECT DISTINCT admin_id FROM public.admins_groups;
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);",List all admin IDs associated with a project with a specific name.,SELECT admin_id FROM public.admins_projects AS ap INNER JOIN public.projects AS p ON ap.project_id = p.id WHERE p.name = '[specific_project_name]';
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);",Retrieve project IDs associated with groups having a specific description.,SELECT project_id FROM public.groups WHERE description = '[specific_description]';
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);",Get the names of groups associated with any project.,SELECT DISTINCT name FROM public.groups WHERE project_id IS NOT NULL;
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Groups Table
CREATE TABLE public.groups (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255),
    project_id bigint REFERENCES public.projects(id)
);",List all project IDs associated with enabled groups.,SELECT project_id FROM public.groups WHERE is_enabled = true;
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Retrieve all offended techniques.,SELECT * FROM public.offended_techniques;
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",List all attack techniques.,SELECT * FROM public.attack_techniques;
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Find the description of an attack technique by its name.,SELECT description FROM public.attack_techniques WHERE name = '[specific_attack_technique_name]';
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",List the names of all attack techniques.,SELECT name FROM public.attack_techniques;
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Get the icon of an attack technique by its name.,SELECT icon FROM public.attack_techniques WHERE name = '[specific_attack_technique_name]';
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",List the IDs of all attack techniques.,SELECT id FROM public.attack_techniques;
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Get the description and icon of an attack technique by its name.,"SELECT description, icon FROM public.attack_techniques WHERE name = '[specific_attack_technique_name]';"
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",List the names of attack techniques with enabled status.,SELECT name FROM public.attack_techniques WHERE is_enabled = true;
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Get the unique icon of an attack technique by its name.,SELECT DISTINCT icon FROM public.attack_techniques WHERE name = '[specific_attack_technique_name]';
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Retrieve the IDs and counts of offended techniques for projects with enabled status.,"SELECT id, count FROM public.offended_techniques AS ot WHERE project_id IN (SELECT id FROM public.projects WHERE is_enabled = true);"
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",List the names of attack techniques with descriptions containing a specific keyword.,SELECT name FROM public.attack_techniques WHERE description LIKE '%[specific_keyword]%';
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Find the average count of offended techniques across all projects.,SELECT AVG(count) FROM public.offended_techniques;
"-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);
",Retrieve all training hub templates.,SELECT * FROM public.training_hub_templates;
"-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);
",List all training hubs.,SELECT * FROM public.training_hub;
"-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);
",List the IDs of all training hubs.,SELECT id FROM public.training_hub;
"-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);
",List the IDs of all training hub templates.,SELECT template_id FROM public.training_hub_templates;
"-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);
",Find the training hubs with enabled status.,SELECT * FROM public.training_hub WHERE is_enabled = true;
"-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);
",Find the training hub templates for trainings with a specific template title.,SELECT tht.* FROM public.training_hub_templates AS tht INNER JOIN public.training_templates AS tt ON tht.template_id = tt.id WHERE tt.title = '[specific_template_title]';
"-- Training Hub Templates Table
CREATE TABLE public.training_hub_templates (
    training_id bigint NOT NULL,
    template_id bigint NOT NULL,
    PRIMARY KEY (training_id, template_id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id),
    FOREIGN KEY (template_id) REFERENCES public.training_templates(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);
",Get the number of training hubs with enabled status.,SELECT COUNT(*) FROM public.training_hub WHERE is_enabled = true;
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Retrieve all offended techniques.,SELECT * FROM public.offended_techniques;
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List all projects.,SELECT * FROM public.projects;
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List the IDs of all projects.,SELECT id FROM public.projects;
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Retrieve offended techniques for projects with a specific project type.,SELECT ot.* FROM public.offended_techniques AS ot INNER JOIN public.projects AS p ON ot.project_id = p.id WHERE p.type = '[specific_project_type]';
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List the names of all projects.,SELECT name FROM public.projects;
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find the total count of offended techniques.,SELECT SUM(count) FROM public.offended_techniques;
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List the types of all projects.,SELECT type FROM public.projects;
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find the average count of offended techniques across all projects.,SELECT AVG(count) FROM public.offended_techniques;
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Retrieve offended techniques for projects with a specific project name and project type.,SELECT ot.* FROM public.offended_techniques AS ot INNER JOIN public.projects AS p ON ot.project_id = p.id WHERE p.name = '[specific_project_name]' AND p.type = '[specific_project_type]';
"-- Offended Techniques Table
CREATE TABLE public.offended_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    count integer,
    attack_technique_id bigint REFERENCES public.attack_techniques(id),
    project_id bigint,
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find the maximum count of offended techniques across all projects.,SELECT MAX(count) FROM public.offended_techniques;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List all users.,SELECT * FROM public.users;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List all projects.,SELECT * FROM public.projects;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find a user by their email.,SELECT * FROM public.users WHERE email = '[specific_email]';
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find a project by its name.,SELECT * FROM public.projects WHERE name = '[specific_project_name]';
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find projects with a specific type.,SELECT * FROM public.projects WHERE type = '[specific_project_type]';
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Retrieve projects with a specific description.,SELECT * FROM public.projects WHERE description = '[specific_description]';
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find users who are offended.,SELECT * FROM public.users WHERE offended = true;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List all projects with a specific avatar.,SELECT * FROM public.projects WHERE avatar = '[specific_avatar]';
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find users who are both compromised and simulated.,SELECT * FROM public.users WHERE compromised = true AND simulated = true;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Retrieve projects with a specific URL.,SELECT * FROM public.projects WHERE url = '[specific_url]';
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find users who are not enabled.,SELECT * FROM public.users WHERE is_enabled = false;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List all projects with a unique company ID.,SELECT * FROM public.projects WHERE company_id IS NOT NULL;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find users who are enabled and not compromised.,SELECT * FROM public.users WHERE is_enabled = true AND compromised = false;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",List all campaigns.,SELECT * FROM public.campaign;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",List all training hubs.,SELECT * FROM public.training_hub;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",Find a campaign by its name.,SELECT * FROM public.campaign WHERE name = '[specific_campaign_name]';
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",List all scheduled campaigns.,SELECT * FROM public.campaign WHERE is_scheduled = true;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",Find training hubs with training templates.,SELECT * FROM public.training_hub WHERE has_training_templates = true;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",Retrieve campaigns owned by a specific user.,SELECT * FROM public.campaign WHERE owner = '[specific_owner_name]';
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",Find training hubs with enabled status.,SELECT * FROM public.training_hub WHERE is_enabled = true;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",List all campaigns with custom templates.,SELECT * FROM public.campaign WHERE has_custom_template = true;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",List all campaigns with reminders enabled.,SELECT * FROM public.campaign WHERE has_reminders = true;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",List all users who were caught in any campaign.,SELECT * FROM public.users WHERE id IN (SELECT user_id FROM public.users_in_campaigns WHERE caught = true);
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",Retrieve user details by email address.,SELECT * FROM public.users WHERE email = '[specific_email]';
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",List all users who have not been compromised.,SELECT * FROM public.users WHERE compromised = false;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",Get the number of users in the system.,SELECT COUNT(*) FROM public.users;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",Find users who are both offended and compromised.,SELECT * FROM public.users WHERE offended = true AND compromised = true;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",Get the total number of users who opened emails in any campaign.,SELECT COUNT(*) FROM public.users_in_campaigns WHERE opened = true;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",Retrieve users who are neither offended nor compromised.,SELECT * FROM public.users WHERE offended = false AND compromised = false;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",List all users who have not been simulated.,SELECT * FROM public.users WHERE simulated = false;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",List all users who have been caught but have not been trained.,SELECT * FROM public.users WHERE id IN (SELECT user_id FROM public.users_in_campaigns WHERE caught = true AND trained = false);
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",Get the number of users who have been compromised.,SELECT COUNT(*) FROM public.users WHERE compromised = true;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",Retrieve users who are associated with both a company and a project.,SELECT * FROM public.users WHERE company_id IS NOT NULL AND project_id IS NOT NULL;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);",Find users who have participated in campaigns within a specific timezone.,SELECT * FROM public.users WHERE id IN (SELECT user_id FROM public.users_in_campaigns WHERE campaign_id IN (SELECT id FROM public.campaign WHERE timezone = '[specific_timezone]'));
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Retrieve all campaigns that are enabled.,SELECT * FROM public.campaign WHERE is_enabled = true;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Find campaigns that have custom templates.,SELECT * FROM public.campaign WHERE has_custom_template = true;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",List campaigns that are scheduled.,SELECT * FROM public.campaign WHERE is_scheduled = true;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Get the names of campaigns that have been executed.,SELECT name FROM public.campaign WHERE executed = true;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Find campaigns owned by a specific user.,SELECT * FROM public.campaign WHERE owner = '[specific_owner]';
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",List campaigns that are launched.,SELECT * FROM public.campaign WHERE launched = true;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Find campaigns that have reminders enabled.,SELECT * FROM public.campaign WHERE has_reminders = true;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",List campaigns that are auto-training enabled.,SELECT * FROM public.campaign WHERE is_auto_training = true;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Find campaigns executed in a specific timezone.,SELECT * FROM public.campaign WHERE timezone = '[specific_timezone]';
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Retrieve campaigns owned by super admins.,SELECT * FROM public.campaign WHERE owner IN (SELECT username FROM public.admins WHERE super_admin = true);
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Get the names of campaigns owned by a user with a specific job role.,SELECT name FROM public.campaign WHERE owner IN (SELECT username FROM public.admins WHERE job_role = '[specific_job_role]');
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Retrieve campaigns with a specific subject and type.,SELECT * FROM public.campaign WHERE subject = '[specific_subject]' AND type = '[specific_type]';
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Attack Techniques Table
CREATE TABLE public.attack_techniques (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    icon varchar(255),
    name varchar(255) UNIQUE
);",Find campaigns executed by users who are not super admins.,SELECT * FROM public.campaign WHERE owner NOT IN (SELECT username FROM public.admins WHERE super_admin = true);
"-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Retrieve all training videos.,SELECT * FROM public.training_videos;
"-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Find the names of enabled training videos.,SELECT name FROM public.training_videos WHERE is_enabled = true;
"-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",List training videos with a specific description.,SELECT * FROM public.training_videos WHERE description = '[specific_description]';
"-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Retrieve training videos with a specific name.,SELECT * FROM public.training_videos WHERE name = '[specific_name]';
"-- Training Videos Table
CREATE TABLE public.training_videos (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    name varchar(255) UNIQUE,
    poster_id bigint,
    path_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Get the names of training videos with a specific node reference.,SELECT name FROM public.training_videos WHERE path_id IN (SELECT id FROM public.documents WHERE node_ref = '[specific_node_ref]');
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Retrieve all email templates.,SELECT * FROM public.email_template;
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Find enabled email templates.,SELECT * FROM public.email_template WHERE is_enabled = true;
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",List email templates with a specific description.,SELECT * FROM public.email_template WHERE description = '[specific_description]';
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Find email templates with a specific industry.,SELECT * FROM public.email_template WHERE industry = '[specific_industry]';
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Retrieve email templates with a specific brand and source.,SELECT * FROM public.email_template WHERE brand = '[specific_brand]' AND source = '[specific_source]';
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",List email templates with a specific subject and theme.,SELECT * FROM public.email_template WHERE subject = '[specific_subject]' AND theme = '[specific_theme]';
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Find email templates with a specific title and industry.,SELECT * FROM public.email_template WHERE title = '[specific_title]' AND industry = '[specific_industry]';
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",List email templates with a specific source and subject.,SELECT * FROM public.email_template WHERE source = '[specific_source]' AND subject = '[specific_subject]';
"-- Email Template Table
CREATE TABLE public.email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    description varchar(255),
    file_path varchar(255),
    title varchar(255),
    technique_id bigint,
    brand varchar(255),
    industry varchar(255),
    source varchar(255),
    subject varchar(255),
    theme varchar(255),
    compromise_rate double precision,
    file_id bigint REFERENCES public.documents(id),
    thumbnail_id bigint REFERENCES public.documents(id)
);

-- Documents Table
CREATE TABLE public.documents (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    ext varchar(255),
    mime_type varchar(255),
    node_ref varchar(255) NOT NULL UNIQUE,
    original_name varchar(255),
    path varchar(255),
    size bigint,
    duration integer
);",Find email templates with a specific description and theme.,SELECT * FROM public.email_template WHERE description = '[specific_description]' AND theme = '[specific_theme]';
"-- Verif Token Table
CREATE TABLE public.verif_token (
    id bigint PRIMARY KEY,
    expiration timestamp,
    type integer,
    value varchar(255),
    user_id bigint,
    FOREIGN KEY (user_id) REFERENCES public.admins(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);",Retrieve all verification tokens.,SELECT * FROM public.verif_token;
"-- Verif Token Table
CREATE TABLE public.verif_token (
    id bigint PRIMARY KEY,
    expiration timestamp,
    type integer,
    value varchar(255),
    user_id bigint,
    FOREIGN KEY (user_id) REFERENCES public.admins(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);",List verification tokens with a specific value.,SELECT * FROM public.verif_token WHERE value = '[specific_value]';
"-- Verif Token Table
CREATE TABLE public.verif_token (
    id bigint PRIMARY KEY,
    expiration timestamp,
    type integer,
    value varchar(255),
    user_id bigint,
    FOREIGN KEY (user_id) REFERENCES public.admins(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);",Find verification tokens for activated users.,SELECT * FROM public.verif_token WHERE user_id IN (SELECT id FROM public.admins WHERE activated = true);
"-- Verif Token Table
CREATE TABLE public.verif_token (
    id bigint PRIMARY KEY,
    expiration timestamp,
    type integer,
    value varchar(255),
    user_id bigint,
    FOREIGN KEY (user_id) REFERENCES public.admins(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);",Retrieve verification tokens with a specific user's email.,SELECT * FROM public.verif_token WHERE user_id IN (SELECT id FROM public.admins WHERE email = '[specific_email]');
"-- Verif Token Table
CREATE TABLE public.verif_token (
    id bigint PRIMARY KEY,
    expiration timestamp,
    type integer,
    value varchar(255),
    user_id bigint,
    FOREIGN KEY (user_id) REFERENCES public.admins(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);",List verification tokens for users with a specific job role.,SELECT * FROM public.verif_token WHERE user_id IN (SELECT id FROM public.admins WHERE job_role = '[specific_job_role]');
"-- Verif Token Table
CREATE TABLE public.verif_token (
    id bigint PRIMARY KEY,
    expiration timestamp,
    type integer,
    value varchar(255),
    user_id bigint,
    FOREIGN KEY (user_id) REFERENCES public.admins(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);",Get the activation status of users associated with verification tokens.,"SELECT DISTINCT user_id, activated FROM public.verif_token INNER JOIN public.admins ON verif_token.user_id = admins.id;"
"-- Verif Token Table
CREATE TABLE public.verif_token (
    id bigint PRIMARY KEY,
    expiration timestamp,
    type integer,
    value varchar(255),
    user_id bigint,
    FOREIGN KEY (user_id) REFERENCES public.admins(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);",Retrieve verification tokens with a specific username.,SELECT * FROM public.verif_token WHERE user_id IN (SELECT id FROM public.admins WHERE username = '[specific_username]');
"-- Verif Token Table
CREATE TABLE public.verif_token (
    id bigint PRIMARY KEY,
    expiration timestamp,
    type integer,
    value varchar(255),
    user_id bigint,
    FOREIGN KEY (user_id) REFERENCES public.admins(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);",List verification tokens for users with a specific phone number.,SELECT * FROM public.verif_token WHERE user_id IN (SELECT id FROM public.admins WHERE phone = '[specific_phone]');
"-- Verif Token Table
CREATE TABLE public.verif_token (
    id bigint PRIMARY KEY,
    expiration timestamp,
    type integer,
    value varchar(255),
    user_id bigint,
    FOREIGN KEY (user_id) REFERENCES public.admins(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);",Find verification tokens with a specific super admin status.,SELECT * FROM public.verif_token WHERE user_id IN (SELECT id FROM public.admins WHERE super_admin = true);
"-- Verif Token Table
CREATE TABLE public.verif_token (
    id bigint PRIMARY KEY,
    expiration timestamp,
    type integer,
    value varchar(255),
    user_id bigint,
    FOREIGN KEY (user_id) REFERENCES public.admins(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);",Retrieve verification tokens with a specific last name.,SELECT * FROM public.verif_token WHERE user_id IN (SELECT id FROM public.admins WHERE lastname = '[specific_lastname]');
"-- Verif Token Table
CREATE TABLE public.verif_token (
    id bigint PRIMARY KEY,
    expiration timestamp,
    type integer,
    value varchar(255),
    user_id bigint,
    FOREIGN KEY (user_id) REFERENCES public.admins(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);",List verification tokens for users with a specific first name.,SELECT * FROM public.verif_token WHERE user_id IN (SELECT id FROM public.admins WHERE firstname = '[specific_firstname]');
"-- Verif Token Table
CREATE TABLE public.verif_token (
    id bigint PRIMARY KEY,
    expiration timestamp,
    type integer,
    value varchar(255),
    user_id bigint,
    FOREIGN KEY (user_id) REFERENCES public.admins(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);",Get the verification tokens for users with a specific activation status and super admin status.,SELECT * FROM public.verif_token WHERE user_id IN (SELECT id FROM public.admins WHERE activated = true AND super_admin = true);
"-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Retrieve all projects.,SELECT * FROM public.projects;
"-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Find projects with a specific name.,SELECT * FROM public.projects WHERE name = '[specific_name]';
"-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",List projects of a specific type.,SELECT * FROM public.projects WHERE type = '[specific_type]';
"-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Retrieve projects with a specific description.,SELECT * FROM public.projects WHERE description = '[specific_description]';
"-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",List projects in a specific country.,SELECT * FROM public.projects WHERE company_id IN (SELECT id FROM public.company WHERE country = '[specific_country]');
"-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Find projects in a specific industry.,SELECT * FROM public.projects WHERE company_id IN (SELECT id FROM public.company WHERE industry = '[specific_industry]');
"-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",List projects with a specific state.,SELECT * FROM public.projects WHERE company_id IN (SELECT id FROM public.company WHERE state = '[specific_state]');
"-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",List projects with a specific company name.,SELECT * FROM public.projects WHERE company_id IN (SELECT id FROM public.company WHERE name = '[specific_company_name]');
"-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);

-- Company Table
CREATE TABLE public.company (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    country varchar(255),
    industry varchar(255),
    name varchar(255),
    size bigint,
    state varchar(255),
    zipcode bigint
);",Get the project lead's ID for all projects.,SELECT project_lead_id FROM public.projects;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Retrieve all campaigns.,SELECT * FROM public.campaign;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find campaigns with a specific name.,SELECT * FROM public.campaign WHERE name = '[specific_name]';
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List campaigns of a specific type.,SELECT * FROM public.campaign WHERE type = '[specific_type]';
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List campaigns that are scheduled.,SELECT * FROM public.campaign WHERE is_scheduled = true;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find campaigns with a custom template.,SELECT * FROM public.campaign WHERE has_custom_template = true;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find campaigns owned by a specific person.,SELECT * FROM public.campaign WHERE owner = '[specific_owner_name]';
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Retrieve campaigns with reminders enabled.,SELECT * FROM public.campaign WHERE has_reminders = true;
"-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);


-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List campaigns with auto-training enabled.,SELECT * FROM public.campaign WHERE is_auto_training = true;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",Retrieve all users.,SELECT * FROM public.users;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",Find a user by their email.,SELECT * FROM public.users WHERE email = '[user_email]';
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",List users who are currently enabled.,SELECT * FROM public.users WHERE is_enabled = true;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);","Retrieve users who have the ""Admin"" role.",SELECT * FROM public.users WHERE role_id = (SELECT id FROM public.roles WHERE name = 'Admin');
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",List users who have been offended.,SELECT * FROM public.users WHERE offended = true;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",Find users who are both compromised and simulated.,SELECT * FROM public.users WHERE compromised = true AND simulated = true;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",List users who have not been compromised.,SELECT * FROM public.users WHERE compromised = false;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",Find users who have been both compromised and offended.,SELECT * FROM public.users WHERE compromised = true AND offended = true;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",Retrieve users who have been simulated but not offended.,SELECT * FROM public.users WHERE simulated = true AND offended = false;
"-- Users Table
CREATE TABLE public.users (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255) NOT NULL,
    firstname character varying(255) NOT NULL,
    lastname character varying(255) NOT NULL,
    company_id bigint,
    project_id bigint,
    role_id bigint REFERENCES public.roles(id),
    offended boolean DEFAULT false,
    compromised boolean DEFAULT false,
    simulated boolean DEFAULT false,
    FOREIGN KEY (company_id) REFERENCES public.company(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Roles Table
CREATE TABLE public.roles (
    id bigint PRIMARY KEY,
    name varchar(50) UNIQUE
);",Get the total count of users.,SELECT COUNT(*) FROM public.users;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",Retrieve all users who have been caught in a campaign.,SELECT user_id FROM public.users_in_campaigns WHERE caught = true;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",Find users who have opened emails in a campaign.,SELECT user_id FROM public.users_in_campaigns WHERE opened = true;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",List users who have been trained in a campaign.,SELECT user_id FROM public.users_in_campaigns WHERE trained = true;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",Find users who are currently in a training campaign.,SELECT user_id FROM public.users_in_campaigns WHERE training_in_progress = true;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",Retrieve all users who have not been caught in a campaign.,SELECT user_id FROM public.users_in_campaigns WHERE caught = false;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",List users who have opened emails but have not been caught in a campaign.,SELECT user_id FROM public.users_in_campaigns WHERE opened = true AND caught = false;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",Find users who have been trained but not yet sent in a campaign.,SELECT user_id FROM public.users_in_campaigns WHERE trained = true AND training_sent = false;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",Retrieve all users who have been caught and opened emails in a campaign.,SELECT user_id FROM public.users_in_campaigns WHERE caught = true AND opened = true;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",List users who have opened emails in a campaign and belong to a specific training campaign.,SELECT uic.user_id FROM public.users_in_campaigns AS uic INNER JOIN public.training_hub AS th ON uic.training_id = th.id WHERE uic.opened = true AND th.has_training_templates = true;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",Get the number of users who have been caught in a campaign.,SELECT COUNT(*) FROM public.users_in_campaigns WHERE caught = true;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",Retrieve all users who have been caught and opened emails but not yet trained in a campaign.,SELECT user_id FROM public.users_in_campaigns WHERE caught = true AND opened = true AND trained = false;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",Find users who have been caught in a campaign and belong to a specific training campaign.,SELECT uic.user_id FROM public.users_in_campaigns AS uic INNER JOIN public.training_hub AS th ON uic.training_id = th.id WHERE uic.caught = true AND th.has_training_templates = true;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",Retrieve all users who have been caught but not yet opened emails in a campaign.,SELECT user_id FROM public.users_in_campaigns WHERE caught = true AND opened = false;
"-- Users in Campaigns Table
CREATE TABLE public.users_in_campaigns (
    campaign_id bigint NOT NULL,
    user_id bigint NOT NULL,
    caught boolean DEFAULT false,
    caught_at timestamp,
    opened boolean DEFAULT false,
    sent boolean DEFAULT false,
    trained boolean DEFAULT false,
    trained_at timestamp,
    training_id bigint,
    training_sent boolean DEFAULT false,
    training_in_progress boolean DEFAULT false,
    PRIMARY KEY (campaign_id, user_id),
    FOREIGN KEY (campaign_id) REFERENCES public.campaign(id),
    FOREIGN KEY (user_id) REFERENCES public.users(id),
    FOREIGN KEY (training_id) REFERENCES public.training_hub(id)
);

-- Training Hub Table
CREATE TABLE public.training_hub (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    has_training_templates boolean,
    video_id bigint REFERENCES public.training_videos(id)
);",List users who have been trained in a campaign and belong to a specific training campaign.,SELECT uic.user_id FROM public.users_in_campaigns AS uic INNER JOIN public.training_hub AS th ON uic.training_id = th.id WHERE uic.trained = true AND th.has_training_templates = true;
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);",Retrieve the names of all campaigns with custom email templates.,SELECT name FROM public.campaign WHERE has_custom_template = true;
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);",Find the campaign ID with the most recent execution date.,SELECT id FROM public.campaign ORDER BY executed_at DESC LIMIT 1;
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);",List all campaigns that have been scheduled but not yet launched.,SELECT name FROM public.campaign WHERE is_scheduled = true AND launched = false;
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);",Get the number of campaigns with auto-training enabled.,SELECT COUNT(*) FROM public.campaign WHERE is_auto_training = true;
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);",Find the campaigns owned by a specific user.,SELECT name FROM public.campaign WHERE owner = '[specific_owner_name]';
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);",Retrieve the campaign names with reminders enabled.,SELECT name FROM public.campaign WHERE has_reminders = true;
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);","List campaigns of a specific type (e.g., ""Marketing"").",SELECT name FROM public.campaign WHERE type = 'Marketing';
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);",Get the campaign IDs with a status code of 1.,SELECT id FROM public.campaign WHERE status = 1;
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);",Retrieve campaigns executed in a specific timezone.,SELECT name FROM public.campaign WHERE timezone = '[specific_timezone]';
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);",List campaigns that are both scheduled and have custom templates.,SELECT name FROM public.campaign WHERE is_scheduled = true AND has_custom_template = true;
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);",Find campaigns where auto-training is enabled and reminders are disabled.,SELECT name FROM public.campaign WHERE is_auto_training = true AND has_reminders = false;
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);",Retrieve campaigns executed in a specific timezone with custom templates.,SELECT name FROM public.campaign WHERE timezone = '[specific_timezone]' AND has_custom_template = true;
"-- Campaign Email Templates Table
CREATE TABLE public.campaign_email_template (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    custom_template character varying(255),
    campaign_id bigint REFERENCES public.campaign(id),
    email_template_id bigint REFERENCES public.email_template(id)
);

-- Campaign Table
CREATE TABLE public.campaign (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    executed boolean DEFAULT false,
    executed_at timestamp,
    has_custom_template boolean DEFAULT false,
    is_scheduled boolean,
    launched boolean DEFAULT false,
    name character varying(255),
    owner character varying(255),
    schedule_time timestamp,
    subject character varying(255),
    type character varying(255),
    email_profile_id bigint,
    project_id bigint REFERENCES public.projects(id),
    technique_id bigint,
    status integer,
    is_auto_training boolean DEFAULT false,
    auto_training_id bigint,
    has_reminders boolean DEFAULT false,
    reminders_frequency integer,
    reminders_number integer,
    timezone character varying(255),
    FOREIGN KEY (technique_id) REFERENCES public.attack_techniques(id),
    FOREIGN KEY (email_profile_id) REFERENCES public.email_profile(id) ON DELETE CASCADE,
    FOREIGN KEY (auto_training_id) REFERENCES public.training_hub(id)
);",List campaigns that are scheduled and have reminders enabled in a specific timezone.,SELECT name FROM public.campaign WHERE is_scheduled = true AND has_reminders = true AND timezone = '[specific_timezone]';
"-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);","Retrieve all email profiles with a specific protocol (e.g., ""SMTP"").",SELECT * FROM public.email_profile WHERE protocol = 'SMTP';
"-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find the names of projects with no associated email profiles.,SELECT name FROM public.projects WHERE id NOT IN (SELECT DISTINCT project_id FROM public.email_profile);
"-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);","List all email profiles for a specific project by project name (e.g., ""Project A"").",SELECT * FROM public.email_profile WHERE project_id = (SELECT id FROM public.projects WHERE name = 'Project A');
"-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);","Get the email profiles with a specific server address (e.g., ""smtp.example.com"").",SELECT * FROM public.email_profile WHERE server = 'smtp.example.com';
"-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find the project names and their associated email profiles.,"SELECT p.name AS project_name, e.name AS email_profile_name FROM public.projects p LEFT JOIN public.email_profile e ON p.id = e.project_id;"
"-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);","Retrieve all email profiles with a specific port number (e.g., 587).",SELECT * FROM public.email_profile WHERE port = 587;
"-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List all projects with more than three associated email profiles.,SELECT p.name FROM public.projects p WHERE (SELECT COUNT(*) FROM public.email_profile WHERE project_id = p.id) > 3;
"-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);","Get the email profiles for projects with ""Type A"" as their project type.",SELECT * FROM public.email_profile WHERE project_id IN (SELECT id FROM public.projects WHERE type = 'Type A');
"-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);","Find the email profiles with usernames containing ""admin.""",SELECT * FROM public.email_profile WHERE username LIKE '%admin.%';
"-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Retrieve all projects with no associated email profiles.,SELECT name FROM public.projects WHERE id NOT IN (SELECT DISTINCT project_id FROM public.email_profile);
"-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List all email profiles with enabled status.,SELECT * FROM public.email_profile WHERE is_enabled = true;
"-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Get the project names and their associated email profiles for projects with a project lead.,"SELECT p.name AS project_name, e.name AS email_profile_name FROM public.projects p LEFT JOIN public.email_profile e ON p.project_lead_id IS NOT NULL AND p.project_lead_id = e.id;"
"-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Retrieve all projects with unique company IDs.,SELECT DISTINCT company_id FROM public.projects;
"-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);","List all email profiles with specific email addresses (e.g., ""example@example.com"").",SELECT * FROM public.email_profile WHERE email = 'example@example.com';
"-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Get the project names and their associated email profiles for projects without a project lead.,"SELECT p.name AS project_name, e.name AS email_profile_name FROM public.projects p LEFT JOIN public.email_profile e ON p.project_lead_id IS NULL AND p.id = e.project_id;"
"-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",Find the email profiles with passwords containing a specific substring.,SELECT * FROM public.email_profile WHERE password LIKE '%[specific_substring]%';
"-- Email Profile Table
CREATE TABLE public.email_profile (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    email character varying(255),
    name character varying(255),
    password character varying(255),
    port integer,
    protocol character varying(255),
    server character varying(255),
    username character varying(255),
    project_id bigint REFERENCES public.projects(id)
);

-- Projects Table
CREATE TABLE public.projects (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    avatar varchar(255),
    description varchar(255),
    name varchar(255),
    type varchar(255),
    url varchar(255),
    company_id bigint UNIQUE,
    project_lead_id bigint,
    FOREIGN KEY (company_id) REFERENCES public.company(id)
);",List all email profiles with disabled status.,SELECT * FROM public.email_profile WHERE is_enabled = false;
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);",List all admins who are super admins.,SELECT * FROM public.admins WHERE super_admin = true;
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);","Get the first names of admins who have the job role ""Manager.""",SELECT firstname FROM public.admins WHERE job_role = 'Manager';
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);",Find all admins who have been activated and have a phone number.,SELECT * FROM public.admins WHERE activated = true AND phone IS NOT NULL;
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);",List all admins who are not super admins.,SELECT * FROM public.admins WHERE super_admin = false;
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);","Get the usernames of admins with the last name ""Smith.""",SELECT username FROM public.admins WHERE lastname = 'Smith';
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);","Retrieve all admins who have a specific email address (e.g., ""admin@example.com"").",SELECT * FROM public.admins WHERE email = 'admin@example.com';
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);","Find all admins who are super admins and have a job role of ""Admin Lead.""",SELECT * FROM public.admins WHERE super_admin = true AND job_role = 'Admin Lead';
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);",Get the last names of admins who have not been activated.,SELECT lastname FROM public.admins WHERE activated = false;
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);","Find all admins who have been activated and have a job role of ""Analyst.""",SELECT * FROM public.admins WHERE activated = true AND job_role = 'Analyst';
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);","Get the email addresses of admins who have a specific job role (e.g., ""Developer"").",SELECT email FROM public.admins WHERE job_role = 'Developer';
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);","Retrieve all admins who have a specific first name (e.g., ""John"").",SELECT * FROM public.admins WHERE firstname = 'John';
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);","Retrieve all admins who have not been activated and have a job role of ""Support.""",SELECT * FROM public.admins WHERE activated = false AND job_role = 'Support';
"-- Admins-Groups Table
CREATE TABLE public.admins_groups (
    admin_id bigint NOT NULL,
    group_id bigint NOT NULL,
    PRIMARY KEY (admin_id, group_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (group_id) REFERENCES public.groups(id)
);

-- Admins-Projects Table
CREATE TABLE public.admins_projects (
    admin_id bigint NOT NULL,
    project_id bigint NOT NULL,
    PRIMARY KEY (admin_id, project_id),
    FOREIGN KEY (admin_id) REFERENCES public.admins(id),
    FOREIGN KEY (project_id) REFERENCES public.projects(id)
);

-- Admins Table
CREATE TABLE public.admins (
    id bigint PRIMARY KEY,
    created_at timestamp,
    is_enabled boolean DEFAULT true,
    updated_at timestamp,
    activated boolean,
    email character varying(255) UNIQUE NOT NULL,
    firstname character varying(255) NOT NULL,
    image character varying(255),
    job_role character varying(255),
    lastname character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(255),
    super_admin boolean DEFAULT false,
    username character varying(255) NOT NULL UNIQUE,
    verify_time timestamp without time zone,
    company_id bigint REFERENCES public.company(id),
    role_id bigint REFERENCES public.roles(id)
);","Find all admins who have a specific last name (e.g., ""Johnson"").",SELECT * FROM public.admins WHERE lastname = 'Johnson';
"-- qrtz_blob_triggers Table
CREATE TABLE public.qrtz_blob_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    blob_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",List all trigger names and groups for a specific scheduler.,"SELECT trigger_name, trigger_group FROM public.qrtz_triggers WHERE sched_name = '[specific_scheduler_name]';"
"-- qrtz_blob_triggers Table
CREATE TABLE public.qrtz_blob_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    blob_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",Retrieve trigger details including description and trigger state for a given trigger name and group.,"SELECT description, trigger_state FROM public.qrtz_triggers WHERE trigger_name = '[specific_trigger_name]' AND trigger_group = '[specific_trigger_group]';"
"-- qrtz_blob_triggers Table
CREATE TABLE public.qrtz_blob_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    blob_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",Find the next fire time for a trigger with a specific name and group.,SELECT next_fire_time FROM public.qrtz_triggers WHERE trigger_name = '[specific_trigger_name]' AND trigger_group = '[specific_trigger_group]';
"-- qrtz_blob_triggers Table
CREATE TABLE public.qrtz_blob_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    blob_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",Get the trigger names and groups associated with a specific job name and group.,"SELECT trigger_name, trigger_group FROM public.qrtz_triggers WHERE job_name = '[specific_job_name]' AND job_group = '[specific_job_group]';"
"-- qrtz_blob_triggers Table
CREATE TABLE public.qrtz_blob_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    blob_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",List all triggers that have a specific trigger type.,SELECT * FROM public.qrtz_triggers WHERE trigger_type = '[specific_trigger_type]';
"-- qrtz_blob_triggers Table
CREATE TABLE public.qrtz_blob_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    blob_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",Retrieve the trigger state for all triggers in the database.,SELECT DISTINCT trigger_state FROM public.qrtz_triggers;
"-- qrtz_blob_triggers Table
CREATE TABLE public.qrtz_blob_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    blob_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",List all trigger names and groups that belong to a specific job name and group.,"SELECT trigger_name, trigger_group FROM public.qrtz_triggers WHERE job_name = '[specific_job_name]' AND job_group = '[specific_job_group]';"
"-- qrtz_blob_triggers Table
CREATE TABLE public.qrtz_blob_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    blob_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",Find triggers with a specific calendar name.,SELECT * FROM public.qrtz_triggers WHERE calendar_name = '[specific_calendar_name]';
"-- qrtz_blob_triggers Table
CREATE TABLE public.qrtz_blob_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    blob_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",Retrieve trigger details for triggers in a specific scheduler and with a given trigger type.,SELECT * FROM public.qrtz_triggers WHERE sched_name = '[specific_scheduler_name]' AND trigger_type = '[specific_trigger_type]';
"-- qrtz_blob_triggers Table
CREATE TABLE public.qrtz_blob_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    blob_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",Retrieve trigger details for triggers with a specific calendar name and trigger type.,SELECT * FROM public.qrtz_triggers WHERE calendar_name = '[specific_calendar_name]' AND trigger_type = '[specific_trigger_type]';
"-- qrtz_cron_triggers Table
CREATE TABLE public.qrtz_cron_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    cron_expression text NOT NULL,
    time_zone_id text,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",Retrieve all cron triggers and their cron expressions.,"SELECT trigger_name, trigger_group, cron_expression FROM public.qrtz_cron_triggers;"
"-- qrtz_cron_triggers Table
CREATE TABLE public.qrtz_cron_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    cron_expression text NOT NULL,
    time_zone_id text,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",Find the job names and groups associated with a specific cron trigger.,"SELECT job_name, job_group FROM public.qrtz_triggers WHERE (sched_name, trigger_name, trigger_group) IN (SELECT sched_name, trigger_name, trigger_group FROM public.qrtz_cron_triggers WHERE trigger_name = '[specific_trigger_name]' AND trigger_group = '[specific_trigger_group]');"
"-- qrtz_cron_triggers Table
CREATE TABLE public.qrtz_cron_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    cron_expression text NOT NULL,
    time_zone_id text,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",List all cron triggers with a specific time zone.,SELECT * FROM public.qrtz_cron_triggers WHERE time_zone_id = '[specific_time_zone]';
"-- qrtz_cron_triggers Table
CREATE TABLE public.qrtz_cron_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    cron_expression text NOT NULL,
    time_zone_id text,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",Get cron triggers that have a specific trigger type.,"SELECT * FROM public.qrtz_cron_triggers WHERE (sched_name, trigger_name, trigger_group) IN (SELECT sched_name, trigger_name, trigger_group FROM public.qrtz_triggers WHERE trigger_type = '[specific_trigger_type]');"
"-- qrtz_cron_triggers Table
CREATE TABLE public.qrtz_cron_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    cron_expression text NOT NULL,
    time_zone_id text,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",Retrieve the next fire time for a specific cron trigger.,SELECT next_fire_time FROM public.qrtz_triggers WHERE trigger_name = '[specific_trigger_name]' AND trigger_group = '[specific_trigger_group]';
"-- qrtz_cron_triggers Table
CREATE TABLE public.qrtz_cron_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    cron_expression text NOT NULL,
    time_zone_id text,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",Retrieve the job name and group for cron triggers with a specific trigger state.,"SELECT job_name, job_group FROM public.qrtz_triggers WHERE trigger_state = '[specific_trigger_state]';"
"-- qrtz_cron_triggers Table
CREATE TABLE public.qrtz_cron_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    cron_expression text NOT NULL,
    time_zone_id text,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",Get cron triggers that have a specific description.,"SELECT * FROM public.qrtz_cron_triggers WHERE (sched_name, trigger_name, trigger_group) IN (SELECT sched_name, trigger_name, trigger_group FROM public.qrtz_triggers WHERE description = '[specific_description]');"
"-- qrtz_cron_triggers Table
CREATE TABLE public.qrtz_cron_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    cron_expression text NOT NULL,
    time_zone_id text,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);","Retrieve cron triggers with a specific job name, group, and trigger state.","SELECT * FROM public.qrtz_cron_triggers WHERE (sched_name, trigger_name, trigger_group) IN (SELECT sched_name, trigger_name, trigger_group FROM public.qrtz_triggers WHERE job_name = '[specific_job_name]' AND job_group = '[specific_job_group]' AND trigger_state = '[specific_trigger_state]');"
"-- qrtz_cron_triggers Table
CREATE TABLE public.qrtz_cron_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    cron_expression text NOT NULL,
    time_zone_id text,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",Find cron triggers with a specific time zone and cron expression.,SELECT * FROM public.qrtz_cron_triggers WHERE (time_zone_id = '[specific_time_zone]' AND cron_expression = '[specific_cron_expression]');
"-- qrtz_simple_triggers Table
CREATE TABLE public.qrtz_simple_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    repeat_count bigint NOT NULL,
    repeat_interval bigint NOT NULL,
    times_triggered bigint NOT NULL,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);
",Retrieve all simple triggers and their repeat counts.,"SELECT trigger_name, trigger_group, repeat_count FROM public.qrtz_simple_triggers;"
"-- qrtz_simple_triggers Table
CREATE TABLE public.qrtz_simple_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    repeat_count bigint NOT NULL,
    repeat_interval bigint NOT NULL,
    times_triggered bigint NOT NULL,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);
",Find the job names and groups associated with specific simple triggers.,"SELECT job_name, job_group FROM public.qrtz_triggers WHERE (sched_name, trigger_name, trigger_group) IN (SELECT sched_name, trigger_name, trigger_group FROM public.qrtz_simple_triggers WHERE trigger_name = '[specific_trigger_name]' AND trigger_group = '[specific_trigger_group]');"
"-- qrtz_simple_triggers Table
CREATE TABLE public.qrtz_simple_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    repeat_count bigint NOT NULL,
    repeat_interval bigint NOT NULL,
    times_triggered bigint NOT NULL,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);
",Get simple triggers that have a specific trigger type.,"SELECT * FROM public.qrtz_simple_triggers WHERE (sched_name, trigger_name, trigger_group) IN (SELECT sched_name, trigger_name, trigger_group FROM public.qrtz_triggers WHERE trigger_type = '[specific_trigger_type]');"
"-- qrtz_simple_triggers Table
CREATE TABLE public.qrtz_simple_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    repeat_count bigint NOT NULL,
    repeat_interval bigint NOT NULL,
    times_triggered bigint NOT NULL,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);
",Retrieve the next fire time for a specific simple trigger.,SELECT next_fire_time FROM public.qrtz_triggers WHERE trigger_name = '[specific_trigger_name]' AND trigger_group = '[specific_trigger_group]';
"-- qrtz_simple_triggers Table
CREATE TABLE public.qrtz_simple_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    repeat_count bigint NOT NULL,
    repeat_interval bigint NOT NULL,
    times_triggered bigint NOT NULL,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);
",Retrieve the job name and group for simple triggers with a specific trigger state.,"SELECT job_name, job_group FROM public.qrtz_triggers WHERE trigger_state = '[specific_trigger_state]';"
"-- qrtz_simple_triggers Table
CREATE TABLE public.qrtz_simple_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    repeat_count bigint NOT NULL,
    repeat_interval bigint NOT NULL,
    times_triggered bigint NOT NULL,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);
",Get simple triggers that have a specific description.,"SELECT * FROM public.qrtz_simple_triggers WHERE (sched_name, trigger_name, trigger_group) IN (SELECT sched_name, trigger_name, trigger_group FROM public.qrtz_triggers WHERE description = '[specific_description]');"
"-- qrtz_simple_triggers Table
CREATE TABLE public.qrtz_simple_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    repeat_count bigint NOT NULL,
    repeat_interval bigint NOT NULL,
    times_triggered bigint NOT NULL,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);
","Retrieve simple triggers with a specific job name, group, and trigger state.","SELECT * FROM public.qrtz_simple_triggers WHERE (sched_name, trigger_name, trigger_group) IN (SELECT sched_name, trigger_name, trigger_group FROM public.qrtz_triggers WHERE job_name = '[specific_job_name]' AND job_group = '[specific_job_group]' AND trigger_state = '[specific_trigger_state]');"
"-- qrtz_simprop_triggers Table
CREATE TABLE public.qrtz_simprop_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    str_prop_1 text,
    str_prop_2 text,
    str_prop_3 text,
    int_prop_1 integer,
    int_prop_2 integer,
    long_prop_1 bigint,
    long_prop_2 bigint,
    dec_prop_1 numeric,
    dec_prop_2 numeric,
    bool_prop_1 boolean,
    bool_prop_2 boolean,
    time_zone_id text,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",Retrieve all simple properties of triggers with a specific str_prop_1 value.,SELECT * FROM public.qrtz_simprop_triggers WHERE str_prop_1 = '[specific_str_prop_1]';
"-- qrtz_simprop_triggers Table
CREATE TABLE public.qrtz_simprop_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    str_prop_1 text,
    str_prop_2 text,
    str_prop_3 text,
    int_prop_1 integer,
    int_prop_2 integer,
    long_prop_1 bigint,
    long_prop_2 bigint,
    dec_prop_1 numeric,
    dec_prop_2 numeric,
    bool_prop_1 boolean,
    bool_prop_2 boolean,
    time_zone_id text,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",Get triggers with a specific str_prop_3 value and their associated trigger groups.,SELECT trigger_group FROM public.qrtz_simprop_triggers WHERE str_prop_3 = '[specific_str_prop_3]';
"-- qrtz_simprop_triggers Table
CREATE TABLE public.qrtz_simprop_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    str_prop_1 text,
    str_prop_2 text,
    str_prop_3 text,
    int_prop_1 integer,
    int_prop_2 integer,
    long_prop_1 bigint,
    long_prop_2 bigint,
    dec_prop_1 numeric,
    dec_prop_2 numeric,
    bool_prop_1 boolean,
    bool_prop_2 boolean,
    time_zone_id text,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",Retrieve triggers with a specific time_zone_id value and their next fire times.,SELECT DISTINCT qt.next_fire_time FROM public.qrtz_simprop_triggers qst JOIN public.qrtz_triggers qt ON qst.sched_name = qt.sched_name AND qst.trigger_name = qt.trigger_name AND qst.trigger_group = qt.trigger_group WHERE qst.time_zone_id = '[specific_time_zone_id]';
"-- qrtz_simprop_triggers Table
CREATE TABLE public.qrtz_simprop_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    str_prop_1 text,
    str_prop_2 text,
    str_prop_3 text,
    int_prop_1 integer,
    int_prop_2 integer,
    long_prop_1 bigint,
    long_prop_2 bigint,
    dec_prop_1 numeric,
    dec_prop_2 numeric,
    bool_prop_1 boolean,
    bool_prop_2 boolean,
    time_zone_id text,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, trigger_name, trigger_group) REFERENCES public.qrtz_triggers(sched_name, trigger_name, trigger_group) ON DELETE CASCADE
);

-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);",List triggers with a specific trigger_type value and their calendar names.,SELECT DISTINCT qt.calendar_name FROM public.qrtz_simprop_triggers qst JOIN public.qrtz_triggers qt ON qst.sched_name = qt.sched_name AND qst.trigger_name = qt.trigger_name AND qst.trigger_group = qt.trigger_group WHERE qt.trigger_type = '[specific_trigger_type]';
"-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);

-- qrtz_job_details Table
CREATE TABLE public.qrtz_job_details (
    sched_name text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    job_class_name text NOT NULL,
    is_durable boolean NOT NULL,
    is_nonconcurrent boolean NOT NULL,
    is_update_data boolean NOT NULL,
    requests_recovery boolean NOT NULL,
    job_data bytea,
    PRIMARY KEY (sched_name, job_name, job_group)
);

-- Index
CREATE INDEX idx_qrtz_j_req_recovery ON public.qrtz_job_details USING btree (requests_recovery);",Retrieve all trigger names from the qrtz_triggers table.,SELECT trigger_name FROM public.qrtz_triggers;
"-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);

-- qrtz_job_details Table
CREATE TABLE public.qrtz_job_details (
    sched_name text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    job_class_name text NOT NULL,
    is_durable boolean NOT NULL,
    is_nonconcurrent boolean NOT NULL,
    is_update_data boolean NOT NULL,
    requests_recovery boolean NOT NULL,
    job_data bytea,
    PRIMARY KEY (sched_name, job_name, job_group)
);

-- Index
CREATE INDEX idx_qrtz_j_req_recovery ON public.qrtz_job_details USING btree (requests_recovery);",Find the trigger with the highest priority and its description.,"SELECT trigger_name, description FROM public.qrtz_triggers WHERE priority = (SELECT MAX(priority) FROM public.qrtz_triggers);"
"-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);

-- qrtz_job_details Table
CREATE TABLE public.qrtz_job_details (
    sched_name text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    job_class_name text NOT NULL,
    is_durable boolean NOT NULL,
    is_nonconcurrent boolean NOT NULL,
    is_update_data boolean NOT NULL,
    requests_recovery boolean NOT NULL,
    job_data bytea,
    PRIMARY KEY (sched_name, job_name, job_group)
);

-- Index
CREATE INDEX idx_qrtz_j_req_recovery ON public.qrtz_job_details USING btree (requests_recovery);",List all triggers in a specific state and their trigger types.,"SELECT trigger_name, trigger_type FROM public.qrtz_triggers WHERE trigger_state = '[specific_state]';"
"-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);

-- qrtz_job_details Table
CREATE TABLE public.qrtz_job_details (
    sched_name text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    job_class_name text NOT NULL,
    is_durable boolean NOT NULL,
    is_nonconcurrent boolean NOT NULL,
    is_update_data boolean NOT NULL,
    requests_recovery boolean NOT NULL,
    job_data bytea,
    PRIMARY KEY (sched_name, job_name, job_group)
);

-- Index
CREATE INDEX idx_qrtz_j_req_recovery ON public.qrtz_job_details USING btree (requests_recovery);",Get the job names associated with triggers in a specific calendar.,SELECT DISTINCT qt.job_name FROM public.qrtz_triggers qt WHERE qt.calendar_name = '[specific_calendar]';
"-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);

-- qrtz_job_details Table
CREATE TABLE public.qrtz_job_details (
    sched_name text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    job_class_name text NOT NULL,
    is_durable boolean NOT NULL,
    is_nonconcurrent boolean NOT NULL,
    is_update_data boolean NOT NULL,
    requests_recovery boolean NOT NULL,
    job_data bytea,
    PRIMARY KEY (sched_name, job_name, job_group)
);

-- Index
CREATE INDEX idx_qrtz_j_req_recovery ON public.qrtz_job_details USING btree (requests_recovery);",Find triggers with a specific trigger type and their trigger groups.,"SELECT trigger_name, trigger_group FROM public.qrtz_triggers WHERE trigger_type = '[specific_trigger_type]';"
"-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);

-- qrtz_job_details Table
CREATE TABLE public.qrtz_job_details (
    sched_name text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    job_class_name text NOT NULL,
    is_durable boolean NOT NULL,
    is_nonconcurrent boolean NOT NULL,
    is_update_data boolean NOT NULL,
    requests_recovery boolean NOT NULL,
    job_data bytea,
    PRIMARY KEY (sched_name, job_name, job_group)
);

-- Index
CREATE INDEX idx_qrtz_j_req_recovery ON public.qrtz_job_details USING btree (requests_recovery);",List triggers with a specific trigger state and their job names.,"SELECT trigger_name, job_name FROM public.qrtz_triggers WHERE trigger_state = '[specific_trigger_state]';"
"-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);

-- qrtz_job_details Table
CREATE TABLE public.qrtz_job_details (
    sched_name text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    job_class_name text NOT NULL,
    is_durable boolean NOT NULL,
    is_nonconcurrent boolean NOT NULL,
    is_update_data boolean NOT NULL,
    requests_recovery boolean NOT NULL,
    job_data bytea,
    PRIMARY KEY (sched_name, job_name, job_group)
);

-- Index
CREATE INDEX idx_qrtz_j_req_recovery ON public.qrtz_job_details USING btree (requests_recovery);",Get the descriptions of triggers with a specific trigger group.,SELECT DISTINCT description FROM public.qrtz_triggers WHERE trigger_group = '[specific_trigger_group]';
"-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);

-- qrtz_job_details Table
CREATE TABLE public.qrtz_job_details (
    sched_name text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    job_class_name text NOT NULL,
    is_durable boolean NOT NULL,
    is_nonconcurrent boolean NOT NULL,
    is_update_data boolean NOT NULL,
    requests_recovery boolean NOT NULL,
    job_data bytea,
    PRIMARY KEY (sched_name, job_name, job_group)
);

-- Index
CREATE INDEX idx_qrtz_j_req_recovery ON public.qrtz_job_details USING btree (requests_recovery);",Retrieve triggers with a specific job name and their trigger states.,"SELECT trigger_name, trigger_state FROM public.qrtz_triggers WHERE job_name = '[specific_job_name]';"
"-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);

-- qrtz_job_details Table
CREATE TABLE public.qrtz_job_details (
    sched_name text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    job_class_name text NOT NULL,
    is_durable boolean NOT NULL,
    is_nonconcurrent boolean NOT NULL,
    is_update_data boolean NOT NULL,
    requests_recovery boolean NOT NULL,
    job_data bytea,
    PRIMARY KEY (sched_name, job_name, job_group)
);

-- Index
CREATE INDEX idx_qrtz_j_req_recovery ON public.qrtz_job_details USING btree (requests_recovery);",Find triggers with a specific job group and their next fire times.,"SELECT trigger_name, next_fire_time FROM public.qrtz_triggers WHERE job_group = '[specific_job_group]';"
"-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);

-- qrtz_job_details Table
CREATE TABLE public.qrtz_job_details (
    sched_name text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    job_class_name text NOT NULL,
    is_durable boolean NOT NULL,
    is_nonconcurrent boolean NOT NULL,
    is_update_data boolean NOT NULL,
    requests_recovery boolean NOT NULL,
    job_data bytea,
    PRIMARY KEY (sched_name, job_name, job_group)
);

-- Index
CREATE INDEX idx_qrtz_j_req_recovery ON public.qrtz_job_details USING btree (requests_recovery);",List triggers with a specific trigger group and their previous fire times.,"SELECT trigger_name, prev_fire_time FROM public.qrtz_triggers WHERE trigger_group = '[specific_trigger_group]';"
"-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);

-- qrtz_job_details Table
CREATE TABLE public.qrtz_job_details (
    sched_name text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    job_class_name text NOT NULL,
    is_durable boolean NOT NULL,
    is_nonconcurrent boolean NOT NULL,
    is_update_data boolean NOT NULL,
    requests_recovery boolean NOT NULL,
    job_data bytea,
    PRIMARY KEY (sched_name, job_name, job_group)
);

-- Index
CREATE INDEX idx_qrtz_j_req_recovery ON public.qrtz_job_details USING btree (requests_recovery);",Find triggers with a specific calendar name and their trigger types.,"SELECT trigger_name, trigger_type FROM public.qrtz_triggers WHERE calendar_name = '[specific_calendar_name]';"
"-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);

-- qrtz_job_details Table
CREATE TABLE public.qrtz_job_details (
    sched_name text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    job_class_name text NOT NULL,
    is_durable boolean NOT NULL,
    is_nonconcurrent boolean NOT NULL,
    is_update_data boolean NOT NULL,
    requests_recovery boolean NOT NULL,
    job_data bytea,
    PRIMARY KEY (sched_name, job_name, job_group)
);

-- Index
CREATE INDEX idx_qrtz_j_req_recovery ON public.qrtz_job_details USING btree (requests_recovery);",List triggers with a specific trigger state and their misfire instructions.,"SELECT trigger_name, misfire_instr FROM public.qrtz_triggers WHERE trigger_state = '[specific_trigger_state]';"
"-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);

-- qrtz_job_details Table
CREATE TABLE public.qrtz_job_details (
    sched_name text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    job_class_name text NOT NULL,
    is_durable boolean NOT NULL,
    is_nonconcurrent boolean NOT NULL,
    is_update_data boolean NOT NULL,
    requests_recovery boolean NOT NULL,
    job_data bytea,
    PRIMARY KEY (sched_name, job_name, job_group)
);

-- Index
CREATE INDEX idx_qrtz_j_req_recovery ON public.qrtz_job_details USING btree (requests_recovery);",Get the trigger names associated with triggers in a specific job group.,SELECT DISTINCT trigger_name FROM public.qrtz_triggers WHERE job_group = '[specific_job_group]';
"-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);

-- qrtz_job_details Table
CREATE TABLE public.qrtz_job_details (
    sched_name text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    job_class_name text NOT NULL,
    is_durable boolean NOT NULL,
    is_nonconcurrent boolean NOT NULL,
    is_update_data boolean NOT NULL,
    requests_recovery boolean NOT NULL,
    job_data bytea,
    PRIMARY KEY (sched_name, job_name, job_group)
);

-- Index
CREATE INDEX idx_qrtz_j_req_recovery ON public.qrtz_job_details USING btree (requests_recovery);",List triggers with a specific job data and their job names.,"SELECT trigger_name, job_name FROM public.qrtz_triggers WHERE job_data = '[specific_job_data]';"
"-- qrtz_triggers Table
CREATE TABLE public.qrtz_triggers (
    sched_name text NOT NULL,
    trigger_name text NOT NULL,
    trigger_group text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    next_fire_time bigint,
    prev_fire_time bigint,
    priority integer,
    trigger_state text NOT NULL,
    trigger_type text NOT NULL,
    start_time bigint NOT NULL,
    end_time bigint,
    calendar_name text,
    misfire_instr smallint,
    job_data bytea,
    PRIMARY KEY (sched_name, trigger_name, trigger_group),
    FOREIGN KEY (sched_name, job_name, job_group) REFERENCES public.qrtz_job_details(sched_name, job_name, job_group)
);

-- Indexes
CREATE INDEX idx_qrtz_t_next_fire_time ON public.qrtz_triggers USING btree (next_fire_time);
CREATE INDEX idx_qrtz_t_nft_st ON public.qrtz_triggers USING btree (next_fire_time, trigger_state);
CREATE INDEX idx_qrtz_t_state ON public.qrtz_triggers USING btree (trigger_state);

-- qrtz_job_details Table
CREATE TABLE public.qrtz_job_details (
    sched_name text NOT NULL,
    job_name text NOT NULL,
    job_group text NOT NULL,
    description text,
    job_class_name text NOT NULL,
    is_durable boolean NOT NULL,
    is_nonconcurrent boolean NOT NULL,
    is_update_data boolean NOT NULL,
    requests_recovery boolean NOT NULL,
    job_data bytea,
    PRIMARY KEY (sched_name, job_name, job_group)
);

-- Index
CREATE INDEX idx_qrtz_j_req_recovery ON public.qrtz_job_details USING btree (requests_recovery);",Get the trigger groups associated with triggers in a specific schedule name.,SELECT DISTINCT trigger_group FROM public.qrtz_triggers WHERE sched_name = '[specific_sched_name]';
,Retrieve all campaigns.,SELECT * FROM public.campaign;
,List the names of campaigns that have been executed.,SELECT name FROM public.campaign WHERE executed = true;
,Find the campaign names owned by 'John Doe'.,SELECT name FROM public.campaign WHERE owner = 'John Doe';
,Get the campaign names that are scheduled.,SELECT name FROM public.campaign WHERE is_scheduled = true;
,Retrieve the names of campaigns with custom templates.,SELECT name FROM public.campaign WHERE has_custom_template = true;
,List the campaign names that have reminders.,SELECT name FROM public.campaign WHERE has_reminders = true;
,Find the campaign names with reminders every 7 days.,SELECT name FROM public.campaign WHERE has_reminders = true AND reminders_frequency = 7;
,Get the campaign names that belong to project ID 123.,SELECT name FROM public.campaign WHERE project_id = 123;
,Find the campaign names using a specific attack technique.,SELECT name FROM public.campaign WHERE technique_id = 456;
,List the campaigns with 'Phishing' as the subject.,SELECT * FROM public.campaign WHERE subject = 'Phishing';
,Find campaigns with 'Email' as the type.,SELECT * FROM public.campaign WHERE type = 'Email';
,Get the campaign names that are auto-training enabled.,SELECT name FROM public.campaign WHERE is_auto_training = true;
,Retrieve campaign names with reminders more than 3.,SELECT name FROM public.campaign WHERE reminders_number > 3;
,List campaigns with custom templates owned by 'Alice'.,SELECT * FROM public.campaign WHERE has_custom_template = true AND owner = 'Alice';
,Find campaigns scheduled after '2023-07-01'.,SELECT * FROM public.campaign WHERE is_scheduled = true AND schedule_time > '2023-07-01';
,Get the campaign names owned by 'Bob' and are launched.,SELECT name FROM public.campaign WHERE owner = 'Bob' AND launched = true;
,Retrieve campaigns executed on '2023-05-15'.,SELECT * FROM public.campaign WHERE executed = true AND executed_at = '2023-05-15';
,List campaigns with reminders every 14 days or more.,SELECT * FROM public.campaign WHERE has_reminders = true AND reminders_frequency >= 14;
,Find campaigns with a specific timezone.,SELECT * FROM public.campaign WHERE timezone = 'UTC';
,Retrieve all training hubs.,SELECT * FROM public.training_hub;
,List the names of enabled training hubs.,SELECT id FROM public.training_hub WHERE is_enabled = true;
,Find the IDs of training hubs with training templates.,SELECT id FROM public.training_hub WHERE has_training_templates = true;
,Get the names of training videos with descriptions.,"SELECT name, description FROM public.training_videos;"
,Retrieve the IDs of training hubs with a specific video.,SELECT id FROM public.training_hub WHERE video_id = 123;
,List the names of training videos that are enabled.,SELECT name FROM public.training_videos WHERE is_enabled = true;
,Find training hubs created after '2023-01-01'.,SELECT * FROM public.training_hub WHERE created_at > '2023-01-01';
,Get the names of training videos with a specific poster.,SELECT name FROM public.training_videos WHERE poster_id = 456;
,Retrieve training hubs with training templates.,SELECT * FROM public.training_hub WHERE has_training_templates = true;
,List the names of training videos with unique names.,SELECT DISTINCT name FROM public.training_videos;
,Find training hubs with updated timestamps.,SELECT * FROM public.training_hub WHERE updated_at IS NOT NULL;
,Get the names of training videos that are not enabled.,SELECT name FROM public.training_videos WHERE is_enabled = false;
,Retrieve training hubs with a specific ID.,SELECT * FROM public.training_hub WHERE id = 789;
,List training videos with descriptions containing 'tips'.,SELECT * FROM public.training_videos WHERE description LIKE '%tips%';
,Find training hubs that are not enabled.,SELECT * FROM public.training_hub WHERE is_enabled = false;
,Get the names of training videos with a specific path.,SELECT name FROM public.training_videos WHERE path_id = 987;
,Retrieve training hubs with training templates and videos.,SELECT * FROM public.training_hub WHERE has_training_templates = true AND video_id IS NOT NULL;
,List training videos with descriptions not containing 'demo'.,SELECT * FROM public.training_videos WHERE description NOT LIKE '%demo%';
,Find training hubs created or updated after '2023-06-01'.,SELECT * FROM public.training_hub WHERE created_at > '2023-06-01' OR updated_at > '2023-06-01';
,Retrieve all users in campaigns.,SELECT * FROM public.users_in_campaigns;
,List users who have been caught.,SELECT user_id FROM public.users_in_campaigns WHERE caught = true;
,Find users who have not been opened.,SELECT user_id FROM public.users_in_campaigns WHERE opened = false;
,Get users who have been trained.,SELECT user_id FROM public.users_in_campaigns WHERE trained = true;
,Retrieve all users who received training.,SELECT user_id FROM public.users_in_campaigns WHERE training_id IS NOT NULL;
,List users who have not received training.,SELECT user_id FROM public.users_in_campaigns WHERE training_id IS NULL;
,Find users who are currently in training.,SELECT user_id FROM public.users_in_campaigns WHERE training_in_progress = true;
,Get users who have been caught and opened.,SELECT user_id FROM public.users_in_campaigns WHERE caught = true AND opened = true;
,Retrieve users who have been trained but not sent.,SELECT user_id FROM public.users_in_campaigns WHERE trained = true AND training_sent = false;
,"List users who have been offended, compromised, or simulated.",SELECT id FROM public.users WHERE offended = true OR compromised = true OR simulated = true;
,Find users who belong to a specific company.,SELECT id FROM public.users WHERE company_id = 123;
,Get users who have not been updated.,SELECT id FROM public.users WHERE updated_at IS NULL;
,Retrieve all users in a specific project.,SELECT id FROM public.users WHERE project_id = 456;
,List users with a specific role.,SELECT id FROM public.users WHERE role_id = 789;
,Find users who are enabled and not compromised.,SELECT id FROM public.users WHERE is_enabled = true AND compromised = false;
,Get users who have been compromised but not simulated.,SELECT id FROM public.users WHERE compromised = true AND simulated = false;
,Retrieve users who have been offended and belong to a specific role.,SELECT id FROM public.users WHERE offended = true AND role_id = 987;
,List users who have been caught in a specific campaign.,SELECT user_id FROM public.users_in_campaigns WHERE campaign_id = 101;
,Find users who have been caught and trained in the same campaign.,SELECT user_id FROM public.users_in_campaigns WHERE caught = true AND trained = true;
,Get users who have been trained in a specific training hub.,SELECT user_id FROM public.users_in_campaigns WHERE training_id = 303;
,Retrieve all admin-project associations.,SELECT * FROM public.admins_projects;
,List projects that are enabled.,SELECT * FROM public.projects WHERE is_enabled = true;
,Find projects with a specific name.,SELECT * FROM public.projects WHERE name = 'Project XYZ';
,Get projects with a specific type.,SELECT * FROM public.projects WHERE type = 'Type A';
,Retrieve projects that have an associated company.,SELECT * FROM public.projects WHERE company_id IS NOT NULL;
,List projects that do not have a company association.,SELECT * FROM public.projects WHERE company_id IS NULL;
,Find projects with a specific project lead.,SELECT * FROM public.projects WHERE project_lead_id = 123;
,Get admin-project associations for a specific admin.,SELECT * FROM public.admins_projects WHERE admin_id = 456;
,Retrieve projects associated with a specific admin.,SELECT project_id FROM public.admins_projects WHERE admin_id = 789;
,List admin-project associations for a specific project.,SELECT admin_id FROM public.admins_projects WHERE project_id = 101;
,Find projects with an associated admin.,SELECT project_id FROM public.admins_projects WHERE admin_id IS NOT NULL;
,Get projects that have a specific avatar.,SELECT * FROM public.projects WHERE avatar = 'project_avatar.jpg';
,Retrieve projects with specific types and enabled status.,"SELECT * FROM public.projects WHERE type IN ('Type A', 'Type B') AND is_enabled = true;"
,List projects with names containing a specific keyword.,SELECT * FROM public.projects WHERE name LIKE '%keyword%';
,Find projects with a description matching a specific pattern.,SELECT * FROM public.projects WHERE description LIKE 'Pattern%';
,Get projects associated with a specific company.,SELECT * FROM public.projects WHERE company_id = 123;
,Retrieve admin-project associations for a specific project.,SELECT admin_id FROM public.admins_projects WHERE project_id = 456;
,List projects that were updated recently.,SELECT * FROM public.projects WHERE updated_at >= '2023-09-01';
,Find projects with specific URLs.,"SELECT * FROM public.projects WHERE url IN ('url1', 'url2', 'url3');"
,Get projects that have both a company and a project lead.,SELECT * FROM public.projects WHERE company_id IS NOT NULL AND project_lead_id IS NOT NULL;
"The ""training_templates"" table has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""description"" (a varchar field for a short description), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to another table ""documents"" through a foreign key constraint), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""training_hub_templates"" table is related to the ""training_templates"" table through foreign keys. It consists of two columns, ""training_id"" and ""template_id,"" both of which are bigint data types. These columns form a composite primary key for the table, and they reference the ""training_hub"" and ""training_templates"" tables, respectively.",Retrieve all enabled training templates.,SELECT * FROM public.training_templates WHERE is_enabled = true;
"The ""training_templates"" table has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""description"" (a varchar field for a short description), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to another table ""documents"" through a foreign key constraint), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""training_hub_templates"" table is related to the ""training_templates"" table through foreign keys. It consists of two columns, ""training_id"" and ""template_id,"" both of which are bigint data types. These columns form a composite primary key for the table, and they reference the ""training_hub"" and ""training_templates"" tables, respectively.",Find the description of the template with ID 123.,SELECT description FROM public.training_templates WHERE id = 123;
"The ""training_templates"" table has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""description"" (a varchar field for a short description), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to another table ""documents"" through a foreign key constraint), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""training_hub_templates"" table is related to the ""training_templates"" table through foreign keys. It consists of two columns, ""training_id"" and ""template_id,"" both of which are bigint data types. These columns form a composite primary key for the table, and they reference the ""training_hub"" and ""training_templates"" tables, respectively.",List all templates related to phishing.,SELECT * FROM public.training_templates WHERE is_phishing = true;
"The ""training_templates"" table has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""description"" (a varchar field for a short description), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to another table ""documents"" through a foreign key constraint), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""training_hub_templates"" table is related to the ""training_templates"" table through foreign keys. It consists of two columns, ""training_id"" and ""template_id,"" both of which are bigint data types. These columns form a composite primary key for the table, and they reference the ""training_hub"" and ""training_templates"" tables, respectively.",Get the titles of all templates.,SELECT title FROM public.training_templates;
"The ""training_templates"" table has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""description"" (a varchar field for a short description), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to another table ""documents"" through a foreign key constraint), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""training_hub_templates"" table is related to the ""training_templates"" table through foreign keys. It consists of two columns, ""training_id"" and ""template_id,"" both of which are bigint data types. These columns form a composite primary key for the table, and they reference the ""training_hub"" and ""training_templates"" tables, respectively.",Show all training templates created after a specific date.,SELECT * FROM public.training_templates WHERE created_at > '2023-01-01';
"The ""training_templates"" table has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""description"" (a varchar field for a short description), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to another table ""documents"" through a foreign key constraint), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""training_hub_templates"" table is related to the ""training_templates"" table through foreign keys. It consists of two columns, ""training_id"" and ""template_id,"" both of which are bigint data types. These columns form a composite primary key for the table, and they reference the ""training_hub"" and ""training_templates"" tables, respectively.",Find templates that were last updated on a given date.,SELECT * FROM public.training_templates WHERE updated_at = '2023-09-27';
"The ""training_templates"" table has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""description"" (a varchar field for a short description), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to another table ""documents"" through a foreign key constraint), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""training_hub_templates"" table is related to the ""training_templates"" table through foreign keys. It consists of two columns, ""training_id"" and ""template_id,"" both of which are bigint data types. These columns form a composite primary key for the table, and they reference the ""training_hub"" and ""training_templates"" tables, respectively.",Retrieve the training ID and template ID pairs.,"SELECT training_id, template_id FROM public.training_hub_templates;"
"The ""training_templates"" table has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""description"" (a varchar field for a short description), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to another table ""documents"" through a foreign key constraint), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""training_hub_templates"" table is related to the ""training_templates"" table through foreign keys. It consists of two columns, ""training_id"" and ""template_id,"" both of which are bigint data types. These columns form a composite primary key for the table, and they reference the ""training_hub"" and ""training_templates"" tables, respectively.",List all training templates with their corresponding hub.,"SELECT T.*, H.training_id FROM public.training_templates T INNER JOIN public.training_hub_templates H ON T.id = H.template_id;"
"The ""training_templates"" table has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""description"" (a varchar field for a short description), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to another table ""documents"" through a foreign key constraint), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""training_hub_templates"" table is related to the ""training_templates"" table through foreign keys. It consists of two columns, ""training_id"" and ""template_id,"" both of which are bigint data types. These columns form a composite primary key for the table, and they reference the ""training_hub"" and ""training_templates"" tables, respectively.",Count the total number of training templates.,SELECT COUNT(*) FROM public.training_templates;
"The ""training_templates"" table has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""description"" (a varchar field for a short description), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to another table ""documents"" through a foreign key constraint), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""training_hub_templates"" table is related to the ""training_templates"" table through foreign keys. It consists of two columns, ""training_id"" and ""template_id,"" both of which are bigint data types. These columns form a composite primary key for the table, and they reference the ""training_hub"" and ""training_templates"" tables, respectively.",Find templates with a specific title.,SELECT * FROM public.training_templates WHERE title = 'My Template';
"The ""training_templates"" table has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""description"" (a varchar field for a short description), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to another table ""documents"" through a foreign key constraint), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""training_hub_templates"" table is related to the ""training_templates"" table through foreign keys. It consists of two columns, ""training_id"" and ""template_id,"" both of which are bigint data types. These columns form a composite primary key for the table, and they reference the ""training_hub"" and ""training_templates"" tables, respectively.",Get the file path IDs of all templates.,SELECT file_path_id FROM public.training_templates;
"The ""training_templates"" table has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""description"" (a varchar field for a short description), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to another table ""documents"" through a foreign key constraint), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""training_hub_templates"" table is related to the ""training_templates"" table through foreign keys. It consists of two columns, ""training_id"" and ""template_id,"" both of which are bigint data types. These columns form a composite primary key for the table, and they reference the ""training_hub"" and ""training_templates"" tables, respectively.",Show all templates related to a specific hub.,SELECT T.* FROM public.training_templates T INNER JOIN public.training_hub_templates H ON T.id = H.template_id WHERE H.training_id = 456;
"The ""training_templates"" table has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""description"" (a varchar field for a short description), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to another table ""documents"" through a foreign key constraint), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""training_hub_templates"" table is related to the ""training_templates"" table through foreign keys. It consists of two columns, ""training_id"" and ""template_id,"" both of which are bigint data types. These columns form a composite primary key for the table, and they reference the ""training_hub"" and ""training_templates"" tables, respectively.",Find templates created within a date range.,SELECT * FROM public.training_templates WHERE created_at BETWEEN '2023-01-01' AND '2023-09-27';
"The ""training_templates"" table has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""description"" (a varchar field for a short description), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to another table ""documents"" through a foreign key constraint), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""training_hub_templates"" table is related to the ""training_templates"" table through foreign keys. It consists of two columns, ""training_id"" and ""template_id,"" both of which are bigint data types. These columns form a composite primary key for the table, and they reference the ""training_hub"" and ""training_templates"" tables, respectively.",Retrieve the ID of the template with a specific description.,SELECT id FROM public.training_templates WHERE description = 'Sample Description';
"The ""training_templates"" table has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""description"" (a varchar field for a short description), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to another table ""documents"" through a foreign key constraint), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""training_hub_templates"" table is related to the ""training_templates"" table through foreign keys. It consists of two columns, ""training_id"" and ""template_id,"" both of which are bigint data types. These columns form a composite primary key for the table, and they reference the ""training_hub"" and ""training_templates"" tables, respectively.",List all templates without a thumbnail.,SELECT * FROM public.training_templates WHERE thumbnail_id IS NULL;
"The ""training_templates"" table has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""description"" (a varchar field for a short description), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to another table ""documents"" through a foreign key constraint), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""training_hub_templates"" table is related to the ""training_templates"" table through foreign keys. It consists of two columns, ""training_id"" and ""template_id,"" both of which are bigint data types. These columns form a composite primary key for the table, and they reference the ""training_hub"" and ""training_templates"" tables, respectively.",Show all enabled training templates with their IDs.,"SELECT id, is_enabled FROM public.training_templates WHERE is_enabled = true;"
"The ""training_templates"" table has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""description"" (a varchar field for a short description), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to another table ""documents"" through a foreign key constraint), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""training_hub_templates"" table is related to the ""training_templates"" table through foreign keys. It consists of two columns, ""training_id"" and ""template_id,"" both of which are bigint data types. These columns form a composite primary key for the table, and they reference the ""training_hub"" and ""training_templates"" tables, respectively.",Find templates associated with a specific file path ID.,SELECT * FROM public.training_templates WHERE file_path_id = 789;
"The ""training_templates"" table has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""description"" (a varchar field for a short description), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to another table ""documents"" through a foreign key constraint), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""training_hub_templates"" table is related to the ""training_templates"" table through foreign keys. It consists of two columns, ""training_id"" and ""template_id,"" both of which are bigint data types. These columns form a composite primary key for the table, and they reference the ""training_hub"" and ""training_templates"" tables, respectively.",Get the latest training template.,SELECT * FROM public.training_templates ORDER BY created_at DESC LIMIT 1;
"The ""training_templates"" table has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""description"" (a varchar field for a short description), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to another table ""documents"" through a foreign key constraint), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""training_hub_templates"" table is related to the ""training_templates"" table through foreign keys. It consists of two columns, ""training_id"" and ""template_id,"" both of which are bigint data types. These columns form a composite primary key for the table, and they reference the ""training_hub"" and ""training_templates"" tables, respectively.",Find the total number of hub templates.,SELECT COUNT(*) FROM public.training_hub_templates;
"The ""admins_projects"" table is a junction table that facilitates a many-to-many relationship between administrators (admins) and projects. It has two columns, ""admin_id"" and ""project_id,"" both of which are of the bigint data type. These columns together form a composite primary key for the table, ensuring that each combination of admin and project is unique. The ""admin_id"" column references the ""admins"" table through a foreign key constraint, and the ""project_id"" column references the ""projects"" table through another foreign key constraint.
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the project's avatar image file path), ""description"" (a varchar field for a short description of the project), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type or category of the project), ""url"" (a varchar field for the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, with a unique constraint to ensure uniqueness), and ""project_lead_id"" (a reference to the ""admins"" table to indicate the administrator leading the project).",List all projects led by a specific admin.,SELECT P.* FROM public.projects P INNER JOIN public.admins_projects AP ON P.id = AP.project_id WHERE AP.admin_id = 123;
"The ""admins_projects"" table is a junction table that facilitates a many-to-many relationship between administrators (admins) and projects. It has two columns, ""admin_id"" and ""project_id,"" both of which are of the bigint data type. These columns together form a composite primary key for the table, ensuring that each combination of admin and project is unique. The ""admin_id"" column references the ""admins"" table through a foreign key constraint, and the ""project_id"" column references the ""projects"" table through another foreign key constraint.
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the project's avatar image file path), ""description"" (a varchar field for a short description of the project), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type or category of the project), ""url"" (a varchar field for the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, with a unique constraint to ensure uniqueness), and ""project_lead_id"" (a reference to the ""admins"" table to indicate the administrator leading the project).",Find the name and description of a specific project.,"SELECT name, description FROM public.projects WHERE id = 456;"
"The ""admins_projects"" table is a junction table that facilitates a many-to-many relationship between administrators (admins) and projects. It has two columns, ""admin_id"" and ""project_id,"" both of which are of the bigint data type. These columns together form a composite primary key for the table, ensuring that each combination of admin and project is unique. The ""admin_id"" column references the ""admins"" table through a foreign key constraint, and the ""project_id"" column references the ""projects"" table through another foreign key constraint.
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the project's avatar image file path), ""description"" (a varchar field for a short description of the project), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type or category of the project), ""url"" (a varchar field for the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, with a unique constraint to ensure uniqueness), and ""project_lead_id"" (a reference to the ""admins"" table to indicate the administrator leading the project).",Retrieve all projects with enabled status.,SELECT * FROM public.projects WHERE is_enabled = true;
"The ""admins_projects"" table is a junction table that facilitates a many-to-many relationship between administrators (admins) and projects. It has two columns, ""admin_id"" and ""project_id,"" both of which are of the bigint data type. These columns together form a composite primary key for the table, ensuring that each combination of admin and project is unique. The ""admin_id"" column references the ""admins"" table through a foreign key constraint, and the ""project_id"" column references the ""projects"" table through another foreign key constraint.
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the project's avatar image file path), ""description"" (a varchar field for a short description of the project), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type or category of the project), ""url"" (a varchar field for the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, with a unique constraint to ensure uniqueness), and ""project_lead_id"" (a reference to the ""admins"" table to indicate the administrator leading the project).",Get the total number of projects.,SELECT COUNT(*) FROM public.projects;
"The ""admins_projects"" table is a junction table that facilitates a many-to-many relationship between administrators (admins) and projects. It has two columns, ""admin_id"" and ""project_id,"" both of which are of the bigint data type. These columns together form a composite primary key for the table, ensuring that each combination of admin and project is unique. The ""admin_id"" column references the ""admins"" table through a foreign key constraint, and the ""project_id"" column references the ""projects"" table through another foreign key constraint.
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the project's avatar image file path), ""description"" (a varchar field for a short description of the project), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type or category of the project), ""url"" (a varchar field for the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, with a unique constraint to ensure uniqueness), and ""project_lead_id"" (a reference to the ""admins"" table to indicate the administrator leading the project).",Show all admins associated with a particular project.,SELECT A.* FROM public.admins A INNER JOIN public.admins_projects AP ON A.id = AP.admin_id WHERE AP.project_id = 789;
"The ""admins_projects"" table is a junction table that facilitates a many-to-many relationship between administrators (admins) and projects. It has two columns, ""admin_id"" and ""project_id,"" both of which are of the bigint data type. These columns together form a composite primary key for the table, ensuring that each combination of admin and project is unique. The ""admin_id"" column references the ""admins"" table through a foreign key constraint, and the ""project_id"" column references the ""projects"" table through another foreign key constraint.
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the project's avatar image file path), ""description"" (a varchar field for a short description of the project), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type or category of the project), ""url"" (a varchar field for the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, with a unique constraint to ensure uniqueness), and ""project_lead_id"" (a reference to the ""admins"" table to indicate the administrator leading the project).",Find projects created after a specific date.,SELECT * FROM public.projects WHERE created_at > '2023-01-01';
"The ""admins_projects"" table is a junction table that facilitates a many-to-many relationship between administrators (admins) and projects. It has two columns, ""admin_id"" and ""project_id,"" both of which are of the bigint data type. These columns together form a composite primary key for the table, ensuring that each combination of admin and project is unique. The ""admin_id"" column references the ""admins"" table through a foreign key constraint, and the ""project_id"" column references the ""projects"" table through another foreign key constraint.
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the project's avatar image file path), ""description"" (a varchar field for a short description of the project), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type or category of the project), ""url"" (a varchar field for the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, with a unique constraint to ensure uniqueness), and ""project_lead_id"" (a reference to the ""admins"" table to indicate the administrator leading the project).",Retrieve the type and URL of all projects.,"SELECT type, url FROM public.projects;"
"The ""admins_projects"" table is a junction table that facilitates a many-to-many relationship between administrators (admins) and projects. It has two columns, ""admin_id"" and ""project_id,"" both of which are of the bigint data type. These columns together form a composite primary key for the table, ensuring that each combination of admin and project is unique. The ""admin_id"" column references the ""admins"" table through a foreign key constraint, and the ""project_id"" column references the ""projects"" table through another foreign key constraint.
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the project's avatar image file path), ""description"" (a varchar field for a short description of the project), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type or category of the project), ""url"" (a varchar field for the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, with a unique constraint to ensure uniqueness), and ""project_lead_id"" (a reference to the ""admins"" table to indicate the administrator leading the project).",List all projects without an avatar.,SELECT * FROM public.projects WHERE avatar IS NULL;
"The ""admins_projects"" table is a junction table that facilitates a many-to-many relationship between administrators (admins) and projects. It has two columns, ""admin_id"" and ""project_id,"" both of which are of the bigint data type. These columns together form a composite primary key for the table, ensuring that each combination of admin and project is unique. The ""admin_id"" column references the ""admins"" table through a foreign key constraint, and the ""project_id"" column references the ""projects"" table through another foreign key constraint.
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the project's avatar image file path), ""description"" (a varchar field for a short description of the project), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type or category of the project), ""url"" (a varchar field for the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, with a unique constraint to ensure uniqueness), and ""project_lead_id"" (a reference to the ""admins"" table to indicate the administrator leading the project).",Find the administrators associated with a specific project.,SELECT A.* FROM public.admins A INNER JOIN public.admins_projects AP ON A.id = AP.admin_id WHERE AP.project_id = 123;
"The ""admins_projects"" table is a junction table that facilitates a many-to-many relationship between administrators (admins) and projects. It has two columns, ""admin_id"" and ""project_id,"" both of which are of the bigint data type. These columns together form a composite primary key for the table, ensuring that each combination of admin and project is unique. The ""admin_id"" column references the ""admins"" table through a foreign key constraint, and the ""project_id"" column references the ""projects"" table through another foreign key constraint.
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the project's avatar image file path), ""description"" (a varchar field for a short description of the project), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type or category of the project), ""url"" (a varchar field for the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, with a unique constraint to ensure uniqueness), and ""project_lead_id"" (a reference to the ""admins"" table to indicate the administrator leading the project).",Get the unique company ID for a specific project.,SELECT company_id FROM public.projects WHERE id = 456;
"The ""admins_projects"" table is a junction table that facilitates a many-to-many relationship between administrators (admins) and projects. It has two columns, ""admin_id"" and ""project_id,"" both of which are of the bigint data type. These columns together form a composite primary key for the table, ensuring that each combination of admin and project is unique. The ""admin_id"" column references the ""admins"" table through a foreign key constraint, and the ""project_id"" column references the ""projects"" table through another foreign key constraint.
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the project's avatar image file path), ""description"" (a varchar field for a short description of the project), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type or category of the project), ""url"" (a varchar field for the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, with a unique constraint to ensure uniqueness), and ""project_lead_id"" (a reference to the ""admins"" table to indicate the administrator leading the project).",Find the latest project created.,SELECT * FROM public.projects ORDER BY created_at DESC LIMIT 1;
"The ""admins_projects"" table is a junction table that facilitates a many-to-many relationship between administrators (admins) and projects. It has two columns, ""admin_id"" and ""project_id,"" both of which are of the bigint data type. These columns together form a composite primary key for the table, ensuring that each combination of admin and project is unique. The ""admin_id"" column references the ""admins"" table through a foreign key constraint, and the ""project_id"" column references the ""projects"" table through another foreign key constraint.
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the project's avatar image file path), ""description"" (a varchar field for a short description of the project), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type or category of the project), ""url"" (a varchar field for the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, with a unique constraint to ensure uniqueness), and ""project_lead_id"" (a reference to the ""admins"" table to indicate the administrator leading the project).",Retrieve all admins linked to projects.,SELECT DISTINCT A.* FROM public.admins A INNER JOIN public.admins_projects AP ON A.id = AP.admin_id;
"The ""admins_projects"" table is a junction table that facilitates a many-to-many relationship between administrators (admins) and projects. It has two columns, ""admin_id"" and ""project_id,"" both of which are of the bigint data type. These columns together form a composite primary key for the table, ensuring that each combination of admin and project is unique. The ""admin_id"" column references the ""admins"" table through a foreign key constraint, and the ""project_id"" column references the ""projects"" table through another foreign key constraint.
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the project's avatar image file path), ""description"" (a varchar field for a short description of the project), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type or category of the project), ""url"" (a varchar field for the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, with a unique constraint to ensure uniqueness), and ""project_lead_id"" (a reference to the ""admins"" table to indicate the administrator leading the project).",Show all projects of a particular type.,SELECT * FROM public.projects WHERE type = 'Tech';
"The ""admins_projects"" table is a junction table that facilitates a many-to-many relationship between administrators (admins) and projects. It has two columns, ""admin_id"" and ""project_id,"" both of which are of the bigint data type. These columns together form a composite primary key for the table, ensuring that each combination of admin and project is unique. The ""admin_id"" column references the ""admins"" table through a foreign key constraint, and the ""project_id"" column references the ""projects"" table through another foreign key constraint.
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the project's avatar image file path), ""description"" (a varchar field for a short description of the project), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type or category of the project), ""url"" (a varchar field for the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, with a unique constraint to ensure uniqueness), and ""project_lead_id"" (a reference to the ""admins"" table to indicate the administrator leading the project).",Get the project IDs associated with a specific admin.,SELECT project_id FROM public.admins_projects WHERE admin_id = 789;
"The ""admins_projects"" table is a junction table that facilitates a many-to-many relationship between administrators (admins) and projects. It has two columns, ""admin_id"" and ""project_id,"" both of which are of the bigint data type. These columns together form a composite primary key for the table, ensuring that each combination of admin and project is unique. The ""admin_id"" column references the ""admins"" table through a foreign key constraint, and the ""project_id"" column references the ""projects"" table through another foreign key constraint.
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the project's avatar image file path), ""description"" (a varchar field for a short description of the project), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type or category of the project), ""url"" (a varchar field for the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, with a unique constraint to ensure uniqueness), and ""project_lead_id"" (a reference to the ""admins"" table to indicate the administrator leading the project).",List all projects related to a specific company.,SELECT * FROM public.projects WHERE company_id = 123;
"The ""admins_projects"" table is a junction table that facilitates a many-to-many relationship between administrators (admins) and projects. It has two columns, ""admin_id"" and ""project_id,"" both of which are of the bigint data type. These columns together form a composite primary key for the table, ensuring that each combination of admin and project is unique. The ""admin_id"" column references the ""admins"" table through a foreign key constraint, and the ""project_id"" column references the ""projects"" table through another foreign key constraint.
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the project's avatar image file path), ""description"" (a varchar field for a short description of the project), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type or category of the project), ""url"" (a varchar field for the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, with a unique constraint to ensure uniqueness), and ""project_lead_id"" (a reference to the ""admins"" table to indicate the administrator leading the project).",Find projects last updated on a specific date.,SELECT * FROM public.projects WHERE updated_at = '2023-09-27';
"The ""admins_projects"" table is a junction table that facilitates a many-to-many relationship between administrators (admins) and projects. It has two columns, ""admin_id"" and ""project_id,"" both of which are of the bigint data type. These columns together form a composite primary key for the table, ensuring that each combination of admin and project is unique. The ""admin_id"" column references the ""admins"" table through a foreign key constraint, and the ""project_id"" column references the ""projects"" table through another foreign key constraint.
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the project's avatar image file path), ""description"" (a varchar field for a short description of the project), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type or category of the project), ""url"" (a varchar field for the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, with a unique constraint to ensure uniqueness), and ""project_lead_id"" (a reference to the ""admins"" table to indicate the administrator leading the project).",Show all projects that are not enabled.,SELECT * FROM public.projects WHERE is_enabled = false;
"The ""admins_projects"" table is a junction table that facilitates a many-to-many relationship between administrators (admins) and projects. It has two columns, ""admin_id"" and ""project_id,"" both of which are of the bigint data type. These columns together form a composite primary key for the table, ensuring that each combination of admin and project is unique. The ""admin_id"" column references the ""admins"" table through a foreign key constraint, and the ""project_id"" column references the ""projects"" table through another foreign key constraint.
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the project's avatar image file path), ""description"" (a varchar field for a short description of the project), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type or category of the project), ""url"" (a varchar field for the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, with a unique constraint to ensure uniqueness), and ""project_lead_id"" (a reference to the ""admins"" table to indicate the administrator leading the project).",Find the project lead administrator for a specific project.,SELECT project_lead_id FROM public.projects WHERE id = 456;
"The ""admins_projects"" table is a junction table that facilitates a many-to-many relationship between administrators (admins) and projects. It has two columns, ""admin_id"" and ""project_id,"" both of which are of the bigint data type. These columns together form a composite primary key for the table, ensuring that each combination of admin and project is unique. The ""admin_id"" column references the ""admins"" table through a foreign key constraint, and the ""project_id"" column references the ""projects"" table through another foreign key constraint.
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the project's avatar image file path), ""description"" (a varchar field for a short description of the project), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type or category of the project), ""url"" (a varchar field for the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, with a unique constraint to ensure uniqueness), and ""project_lead_id"" (a reference to the ""admins"" table to indicate the administrator leading the project).",Count the total number of admin-project associations.,SELECT COUNT(*) FROM public.admins_projects;
"The ""training_templates"" table represents training templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the template was created), ""is_enabled"" (a boolean value representing whether the template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the template was last updated), ""description"" (a varchar field for a short description of the template), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to the ""documents"" table through a foreign key constraint, specifically to the ""id"" column), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint, also to the ""id"" column).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",List all training templates.,SELECT * FROM public.training_templates;
"The ""training_templates"" table represents training templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the template was created), ""is_enabled"" (a boolean value representing whether the template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the template was last updated), ""description"" (a varchar field for a short description of the template), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to the ""documents"" table through a foreign key constraint, specifically to the ""id"" column), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint, also to the ""id"" column).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find the description of a specific training template.,SELECT description FROM public.training_templates WHERE id = 123;
"The ""training_templates"" table represents training templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the template was created), ""is_enabled"" (a boolean value representing whether the template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the template was last updated), ""description"" (a varchar field for a short description of the template), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to the ""documents"" table through a foreign key constraint, specifically to the ""id"" column), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint, also to the ""id"" column).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Retrieve all enabled training templates.,SELECT * FROM public.training_templates WHERE is_enabled = true;
"The ""training_templates"" table represents training templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the template was created), ""is_enabled"" (a boolean value representing whether the template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the template was last updated), ""description"" (a varchar field for a short description of the template), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to the ""documents"" table through a foreign key constraint, specifically to the ""id"" column), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint, also to the ""id"" column).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Get the total number of training templates.,SELECT COUNT(*) FROM public.training_templates;
"The ""training_templates"" table represents training templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the template was created), ""is_enabled"" (a boolean value representing whether the template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the template was last updated), ""description"" (a varchar field for a short description of the template), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to the ""documents"" table through a foreign key constraint, specifically to the ""id"" column), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint, also to the ""id"" column).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Show all documents with a specific MIME type.,SELECT * FROM public.documents WHERE mime_type = 'application/pdf';
"The ""training_templates"" table represents training templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the template was created), ""is_enabled"" (a boolean value representing whether the template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the template was last updated), ""description"" (a varchar field for a short description of the template), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to the ""documents"" table through a foreign key constraint, specifically to the ""id"" column), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint, also to the ""id"" column).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find documents created after a specific date.,SELECT * FROM public.documents WHERE created_at > '2023-01-01';
"The ""training_templates"" table represents training templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the template was created), ""is_enabled"" (a boolean value representing whether the template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the template was last updated), ""description"" (a varchar field for a short description of the template), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to the ""documents"" table through a foreign key constraint, specifically to the ""id"" column), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint, also to the ""id"" column).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Retrieve the size and extension of all documents.,"SELECT size, ext FROM public.documents;"
"The ""training_templates"" table represents training templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the template was created), ""is_enabled"" (a boolean value representing whether the template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the template was last updated), ""description"" (a varchar field for a short description of the template), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to the ""documents"" table through a foreign key constraint, specifically to the ""id"" column), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint, also to the ""id"" column).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",List all documents with a specific file extension.,SELECT * FROM public.documents WHERE ext = 'jpg';
"The ""training_templates"" table represents training templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the template was created), ""is_enabled"" (a boolean value representing whether the template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the template was last updated), ""description"" (a varchar field for a short description of the template), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to the ""documents"" table through a foreign key constraint, specifically to the ""id"" column), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint, also to the ""id"" column).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find the training template associated with a specific file.,SELECT T.* FROM public.training_templates T INNER JOIN public.documents D ON T.file_path_id = D.id WHERE D.node_ref = 'xyz';
"The ""training_templates"" table represents training templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the template was created), ""is_enabled"" (a boolean value representing whether the template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the template was last updated), ""description"" (a varchar field for a short description of the template), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to the ""documents"" table through a foreign key constraint, specifically to the ""id"" column), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint, also to the ""id"" column).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Get the MIME type of a specific document.,SELECT mime_type FROM public.documents WHERE id = 456;
"The ""training_templates"" table represents training templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the template was created), ""is_enabled"" (a boolean value representing whether the template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the template was last updated), ""description"" (a varchar field for a short description of the template), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to the ""documents"" table through a foreign key constraint, specifically to the ""id"" column), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint, also to the ""id"" column).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find documents last updated on a specific date.,SELECT * FROM public.documents WHERE updated_at = '2023-09-27';
"The ""training_templates"" table represents training templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the template was created), ""is_enabled"" (a boolean value representing whether the template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the template was last updated), ""description"" (a varchar field for a short description of the template), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to the ""documents"" table through a foreign key constraint, specifically to the ""id"" column), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint, also to the ""id"" column).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Show all enabled training templates with their titles.,SELECT title FROM public.training_templates WHERE is_enabled = true;
"The ""training_templates"" table represents training templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the template was created), ""is_enabled"" (a boolean value representing whether the template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the template was last updated), ""description"" (a varchar field for a short description of the template), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to the ""documents"" table through a foreign key constraint, specifically to the ""id"" column), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint, also to the ""id"" column).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Retrieve the node_ref of the document with a specific name.,SELECT node_ref FROM public.documents WHERE original_name = 'example.doc';
"The ""training_templates"" table represents training templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the template was created), ""is_enabled"" (a boolean value representing whether the template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the template was last updated), ""description"" (a varchar field for a short description of the template), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to the ""documents"" table through a foreign key constraint, specifically to the ""id"" column), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint, also to the ""id"" column).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",List all documents with a size greater than a specific value.,SELECT * FROM public.documents WHERE size > 1000000;
"The ""training_templates"" table represents training templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the template was created), ""is_enabled"" (a boolean value representing whether the template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the template was last updated), ""description"" (a varchar field for a short description of the template), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to the ""documents"" table through a foreign key constraint, specifically to the ""id"" column), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint, also to the ""id"" column).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find the training template associated with a specific thumbnail.,SELECT T.* FROM public.training_templates T INNER JOIN public.documents D ON T.thumbnail_id = D.id WHERE D.node_ref = 'abc';
"The ""training_templates"" table represents training templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the template was created), ""is_enabled"" (a boolean value representing whether the template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the template was last updated), ""description"" (a varchar field for a short description of the template), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to the ""documents"" table through a foreign key constraint, specifically to the ""id"" column), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint, also to the ""id"" column).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Count the total number of documents.,SELECT COUNT(*) FROM public.documents;
"The ""training_templates"" table represents training templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the template was created), ""is_enabled"" (a boolean value representing whether the template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the template was last updated), ""description"" (a varchar field for a short description of the template), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to the ""documents"" table through a foreign key constraint, specifically to the ""id"" column), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint, also to the ""id"" column).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Show all training templates related to phishing.,SELECT * FROM public.training_templates WHERE is_phishing = true;
"The ""training_templates"" table represents training templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the template was created), ""is_enabled"" (a boolean value representing whether the template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the template was last updated), ""description"" (a varchar field for a short description of the template), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to the ""documents"" table through a foreign key constraint, specifically to the ""id"" column), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint, also to the ""id"" column).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find documents with a specific node reference.,SELECT * FROM public.documents WHERE node_ref = 'xyz';
"The ""training_templates"" table represents training templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the template was created), ""is_enabled"" (a boolean value representing whether the template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the template was last updated), ""description"" (a varchar field for a short description of the template), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to the ""documents"" table through a foreign key constraint, specifically to the ""id"" column), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint, also to the ""id"" column).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Get the original names of all documents.,SELECT original_name FROM public.documents;
"The ""training_templates"" table represents training templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the template was created), ""is_enabled"" (a boolean value representing whether the template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the template was last updated), ""description"" (a varchar field for a short description of the template), ""is_phishing"" (a boolean field to indicate if it's related to phishing), ""title"" (a varchar field for the title of the template), ""file_path_id"" (a reference to the ""documents"" table through a foreign key constraint, specifically to the ""id"" column), and ""thumbnail_id"" (another reference to the ""documents"" table through a foreign key constraint, also to the ""id"" column).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Retrieve the duration of a specific document.,SELECT duration FROM public.documents WHERE id = 789;
"The ""campaigns_log"" table represents logs for campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the log entry was created), ""is_enabled"" (a boolean value representing whether the log entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the log entry was last updated), and several columns to track campaign statistics such as ""caught_users,"" ""opened_emails,"" ""total_emails,"" ""total_users,"" ""trained_users,"" ""trainings_sent,"" ""campaign_id"" (a reference to the ""campaign"" table through a unique constraint), and ""training_in_progress.""
The ""campaign"" table represents campaigns and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), and various other columns to store campaign details such as name, owner, schedule time, subject, type, and references to other tables like ""projects,"" ""attack_techniques,"" ""email_profile,"" and ""training_hub.""
Additionally, an index ""project_index"" is added to the ""campaign"" table on the ""project_id"" column to improve query performance, and a foreign key constraint is added to the ""campaigns_log"" table, linking the ""campaign_id"" column to the ""id"" column of the ""campaign"" table.",List all campaign logs.,SELECT * FROM public.campaigns_log;
"The ""campaigns_log"" table represents logs for campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the log entry was created), ""is_enabled"" (a boolean value representing whether the log entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the log entry was last updated), and several columns to track campaign statistics such as ""caught_users,"" ""opened_emails,"" ""total_emails,"" ""total_users,"" ""trained_users,"" ""trainings_sent,"" ""campaign_id"" (a reference to the ""campaign"" table through a unique constraint), and ""training_in_progress.""
The ""campaign"" table represents campaigns and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), and various other columns to store campaign details such as name, owner, schedule time, subject, type, and references to other tables like ""projects,"" ""attack_techniques,"" ""email_profile,"" and ""training_hub.""
Additionally, an index ""project_index"" is added to the ""campaign"" table on the ""project_id"" column to improve query performance, and a foreign key constraint is added to the ""campaigns_log"" table, linking the ""campaign_id"" column to the ""id"" column of the ""campaign"" table.",Find the caught users for a specific campaign log.,SELECT caught_users FROM public.campaigns_log WHERE id = 123;
"The ""campaigns_log"" table represents logs for campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the log entry was created), ""is_enabled"" (a boolean value representing whether the log entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the log entry was last updated), and several columns to track campaign statistics such as ""caught_users,"" ""opened_emails,"" ""total_emails,"" ""total_users,"" ""trained_users,"" ""trainings_sent,"" ""campaign_id"" (a reference to the ""campaign"" table through a unique constraint), and ""training_in_progress.""
The ""campaign"" table represents campaigns and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), and various other columns to store campaign details such as name, owner, schedule time, subject, type, and references to other tables like ""projects,"" ""attack_techniques,"" ""email_profile,"" and ""training_hub.""
Additionally, an index ""project_index"" is added to the ""campaign"" table on the ""project_id"" column to improve query performance, and a foreign key constraint is added to the ""campaigns_log"" table, linking the ""campaign_id"" column to the ""id"" column of the ""campaign"" table.",Retrieve all enabled campaign logs.,SELECT * FROM public.campaigns_log WHERE is_enabled = true;
"The ""campaigns_log"" table represents logs for campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the log entry was created), ""is_enabled"" (a boolean value representing whether the log entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the log entry was last updated), and several columns to track campaign statistics such as ""caught_users,"" ""opened_emails,"" ""total_emails,"" ""total_users,"" ""trained_users,"" ""trainings_sent,"" ""campaign_id"" (a reference to the ""campaign"" table through a unique constraint), and ""training_in_progress.""
The ""campaign"" table represents campaigns and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), and various other columns to store campaign details such as name, owner, schedule time, subject, type, and references to other tables like ""projects,"" ""attack_techniques,"" ""email_profile,"" and ""training_hub.""
Additionally, an index ""project_index"" is added to the ""campaign"" table on the ""project_id"" column to improve query performance, and a foreign key constraint is added to the ""campaigns_log"" table, linking the ""campaign_id"" column to the ""id"" column of the ""campaign"" table.",Get the total number of campaign logs.,SELECT COUNT(*) FROM public.campaigns_log;
"The ""campaigns_log"" table represents logs for campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the log entry was created), ""is_enabled"" (a boolean value representing whether the log entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the log entry was last updated), and several columns to track campaign statistics such as ""caught_users,"" ""opened_emails,"" ""total_emails,"" ""total_users,"" ""trained_users,"" ""trainings_sent,"" ""campaign_id"" (a reference to the ""campaign"" table through a unique constraint), and ""training_in_progress.""
The ""campaign"" table represents campaigns and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), and various other columns to store campaign details such as name, owner, schedule time, subject, type, and references to other tables like ""projects,"" ""attack_techniques,"" ""email_profile,"" and ""training_hub.""
Additionally, an index ""project_index"" is added to the ""campaign"" table on the ""project_id"" column to improve query performance, and a foreign key constraint is added to the ""campaigns_log"" table, linking the ""campaign_id"" column to the ""id"" column of the ""campaign"" table.",Show all campaigns with a custom template.,SELECT * FROM public.campaign WHERE has_custom_template = true;
"The ""campaigns_log"" table represents logs for campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the log entry was created), ""is_enabled"" (a boolean value representing whether the log entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the log entry was last updated), and several columns to track campaign statistics such as ""caught_users,"" ""opened_emails,"" ""total_emails,"" ""total_users,"" ""trained_users,"" ""trainings_sent,"" ""campaign_id"" (a reference to the ""campaign"" table through a unique constraint), and ""training_in_progress.""
The ""campaign"" table represents campaigns and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), and various other columns to store campaign details such as name, owner, schedule time, subject, type, and references to other tables like ""projects,"" ""attack_techniques,"" ""email_profile,"" and ""training_hub.""
Additionally, an index ""project_index"" is added to the ""campaign"" table on the ""project_id"" column to improve query performance, and a foreign key constraint is added to the ""campaigns_log"" table, linking the ""campaign_id"" column to the ""id"" column of the ""campaign"" table.",Find campaigns created after a specific date.,SELECT * FROM public.campaign WHERE created_at > '2023-01-01';
"The ""campaigns_log"" table represents logs for campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the log entry was created), ""is_enabled"" (a boolean value representing whether the log entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the log entry was last updated), and several columns to track campaign statistics such as ""caught_users,"" ""opened_emails,"" ""total_emails,"" ""total_users,"" ""trained_users,"" ""trainings_sent,"" ""campaign_id"" (a reference to the ""campaign"" table through a unique constraint), and ""training_in_progress.""
The ""campaign"" table represents campaigns and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), and various other columns to store campaign details such as name, owner, schedule time, subject, type, and references to other tables like ""projects,"" ""attack_techniques,"" ""email_profile,"" and ""training_hub.""
Additionally, an index ""project_index"" is added to the ""campaign"" table on the ""project_id"" column to improve query performance, and a foreign key constraint is added to the ""campaigns_log"" table, linking the ""campaign_id"" column to the ""id"" column of the ""campaign"" table.",Retrieve the type and owner of all campaigns.,"SELECT type, owner FROM public.campaign;"
"The ""campaigns_log"" table represents logs for campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the log entry was created), ""is_enabled"" (a boolean value representing whether the log entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the log entry was last updated), and several columns to track campaign statistics such as ""caught_users,"" ""opened_emails,"" ""total_emails,"" ""total_users,"" ""trained_users,"" ""trainings_sent,"" ""campaign_id"" (a reference to the ""campaign"" table through a unique constraint), and ""training_in_progress.""
The ""campaign"" table represents campaigns and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), and various other columns to store campaign details such as name, owner, schedule time, subject, type, and references to other tables like ""projects,"" ""attack_techniques,"" ""email_profile,"" and ""training_hub.""
Additionally, an index ""project_index"" is added to the ""campaign"" table on the ""project_id"" column to improve query performance, and a foreign key constraint is added to the ""campaigns_log"" table, linking the ""campaign_id"" column to the ""id"" column of the ""campaign"" table.",List all campaigns with a specific status.,SELECT * FROM public.campaign WHERE status = 1;
"The ""campaigns_log"" table represents logs for campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the log entry was created), ""is_enabled"" (a boolean value representing whether the log entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the log entry was last updated), and several columns to track campaign statistics such as ""caught_users,"" ""opened_emails,"" ""total_emails,"" ""total_users,"" ""trained_users,"" ""trainings_sent,"" ""campaign_id"" (a reference to the ""campaign"" table through a unique constraint), and ""training_in_progress.""
The ""campaign"" table represents campaigns and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), and various other columns to store campaign details such as name, owner, schedule time, subject, type, and references to other tables like ""projects,"" ""attack_techniques,"" ""email_profile,"" and ""training_hub.""
Additionally, an index ""project_index"" is added to the ""campaign"" table on the ""project_id"" column to improve query performance, and a foreign key constraint is added to the ""campaigns_log"" table, linking the ""campaign_id"" column to the ""id"" column of the ""campaign"" table.",Find the campaign associated with a specific campaign log.,SELECT C.* FROM public.campaign C INNER JOIN public.campaigns_log CL ON C.id = CL.campaign_id WHERE CL.id = 456;
"The ""campaigns_log"" table represents logs for campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the log entry was created), ""is_enabled"" (a boolean value representing whether the log entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the log entry was last updated), and several columns to track campaign statistics such as ""caught_users,"" ""opened_emails,"" ""total_emails,"" ""total_users,"" ""trained_users,"" ""trainings_sent,"" ""campaign_id"" (a reference to the ""campaign"" table through a unique constraint), and ""training_in_progress.""
The ""campaign"" table represents campaigns and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), and various other columns to store campaign details such as name, owner, schedule time, subject, type, and references to other tables like ""projects,"" ""attack_techniques,"" ""email_profile,"" and ""training_hub.""
Additionally, an index ""project_index"" is added to the ""campaign"" table on the ""project_id"" column to improve query performance, and a foreign key constraint is added to the ""campaigns_log"" table, linking the ""campaign_id"" column to the ""id"" column of the ""campaign"" table.",Get the subject of a specific campaign.,SELECT subject FROM public.campaign WHERE id = 789;
"The ""campaigns_log"" table represents logs for campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the log entry was created), ""is_enabled"" (a boolean value representing whether the log entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the log entry was last updated), and several columns to track campaign statistics such as ""caught_users,"" ""opened_emails,"" ""total_emails,"" ""total_users,"" ""trained_users,"" ""trainings_sent,"" ""campaign_id"" (a reference to the ""campaign"" table through a unique constraint), and ""training_in_progress.""
The ""campaign"" table represents campaigns and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), and various other columns to store campaign details such as name, owner, schedule time, subject, type, and references to other tables like ""projects,"" ""attack_techniques,"" ""email_profile,"" and ""training_hub.""
Additionally, an index ""project_index"" is added to the ""campaign"" table on the ""project_id"" column to improve query performance, and a foreign key constraint is added to the ""campaigns_log"" table, linking the ""campaign_id"" column to the ""id"" column of the ""campaign"" table.",Find campaigns that are scheduled.,SELECT * FROM public.campaign WHERE is_scheduled = true;
"The ""campaigns_log"" table represents logs for campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the log entry was created), ""is_enabled"" (a boolean value representing whether the log entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the log entry was last updated), and several columns to track campaign statistics such as ""caught_users,"" ""opened_emails,"" ""total_emails,"" ""total_users,"" ""trained_users,"" ""trainings_sent,"" ""campaign_id"" (a reference to the ""campaign"" table through a unique constraint), and ""training_in_progress.""
The ""campaign"" table represents campaigns and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), and various other columns to store campaign details such as name, owner, schedule time, subject, type, and references to other tables like ""projects,"" ""attack_techniques,"" ""email_profile,"" and ""training_hub.""
Additionally, an index ""project_index"" is added to the ""campaign"" table on the ""project_id"" column to improve query performance, and a foreign key constraint is added to the ""campaigns_log"" table, linking the ""campaign_id"" column to the ""id"" column of the ""campaign"" table.",Show all enabled campaigns with their names.,SELECT name FROM public.campaign WHERE is_enabled = true;
"The ""campaigns_log"" table represents logs for campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the log entry was created), ""is_enabled"" (a boolean value representing whether the log entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the log entry was last updated), and several columns to track campaign statistics such as ""caught_users,"" ""opened_emails,"" ""total_emails,"" ""total_users,"" ""trained_users,"" ""trainings_sent,"" ""campaign_id"" (a reference to the ""campaign"" table through a unique constraint), and ""training_in_progress.""
The ""campaign"" table represents campaigns and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), and various other columns to store campaign details such as name, owner, schedule time, subject, type, and references to other tables like ""projects,"" ""attack_techniques,"" ""email_profile,"" and ""training_hub.""
Additionally, an index ""project_index"" is added to the ""campaign"" table on the ""project_id"" column to improve query performance, and a foreign key constraint is added to the ""campaigns_log"" table, linking the ""campaign_id"" column to the ""id"" column of the ""campaign"" table.",Retrieve the owner of a campaign with a specific name.,SELECT owner FROM public.campaign WHERE name = 'My Campaign';
"The ""campaigns_log"" table represents logs for campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the log entry was created), ""is_enabled"" (a boolean value representing whether the log entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the log entry was last updated), and several columns to track campaign statistics such as ""caught_users,"" ""opened_emails,"" ""total_emails,"" ""total_users,"" ""trained_users,"" ""trainings_sent,"" ""campaign_id"" (a reference to the ""campaign"" table through a unique constraint), and ""training_in_progress.""
The ""campaign"" table represents campaigns and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), and various other columns to store campaign details such as name, owner, schedule time, subject, type, and references to other tables like ""projects,"" ""attack_techniques,"" ""email_profile,"" and ""training_hub.""
Additionally, an index ""project_index"" is added to the ""campaign"" table on the ""project_id"" column to improve query performance, and a foreign key constraint is added to the ""campaigns_log"" table, linking the ""campaign_id"" column to the ""id"" column of the ""campaign"" table.",List all campaigns with reminders enabled.,SELECT * FROM public.campaign WHERE has_reminders = true;
"The ""campaigns_log"" table represents logs for campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the log entry was created), ""is_enabled"" (a boolean value representing whether the log entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the log entry was last updated), and several columns to track campaign statistics such as ""caught_users,"" ""opened_emails,"" ""total_emails,"" ""total_users,"" ""trained_users,"" ""trainings_sent,"" ""campaign_id"" (a reference to the ""campaign"" table through a unique constraint), and ""training_in_progress.""
The ""campaign"" table represents campaigns and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), and various other columns to store campaign details such as name, owner, schedule time, subject, type, and references to other tables like ""projects,"" ""attack_techniques,"" ""email_profile,"" and ""training_hub.""
Additionally, an index ""project_index"" is added to the ""campaign"" table on the ""project_id"" column to improve query performance, and a foreign key constraint is added to the ""campaigns_log"" table, linking the ""campaign_id"" column to the ""id"" column of the ""campaign"" table.",Find the campaign execution status for a specific campaign.,SELECT executed FROM public.campaign WHERE id = 123;
"The ""campaigns_log"" table represents logs for campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the log entry was created), ""is_enabled"" (a boolean value representing whether the log entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the log entry was last updated), and several columns to track campaign statistics such as ""caught_users,"" ""opened_emails,"" ""total_emails,"" ""total_users,"" ""trained_users,"" ""trainings_sent,"" ""campaign_id"" (a reference to the ""campaign"" table through a unique constraint), and ""training_in_progress.""
The ""campaign"" table represents campaigns and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), and various other columns to store campaign details such as name, owner, schedule time, subject, type, and references to other tables like ""projects,"" ""attack_techniques,"" ""email_profile,"" and ""training_hub.""
Additionally, an index ""project_index"" is added to the ""campaign"" table on the ""project_id"" column to improve query performance, and a foreign key constraint is added to the ""campaigns_log"" table, linking the ""campaign_id"" column to the ""id"" column of the ""campaign"" table.",Get the campaign launch status for all campaigns.,SELECT launched FROM public.campaign;
"The ""campaigns_log"" table represents logs for campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the log entry was created), ""is_enabled"" (a boolean value representing whether the log entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the log entry was last updated), and several columns to track campaign statistics such as ""caught_users,"" ""opened_emails,"" ""total_emails,"" ""total_users,"" ""trained_users,"" ""trainings_sent,"" ""campaign_id"" (a reference to the ""campaign"" table through a unique constraint), and ""training_in_progress.""
The ""campaign"" table represents campaigns and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), and various other columns to store campaign details such as name, owner, schedule time, subject, type, and references to other tables like ""projects,"" ""attack_techniques,"" ""email_profile,"" and ""training_hub.""
Additionally, an index ""project_index"" is added to the ""campaign"" table on the ""project_id"" column to improve query performance, and a foreign key constraint is added to the ""campaigns_log"" table, linking the ""campaign_id"" column to the ""id"" column of the ""campaign"" table.",Show all campaigns related to a specific project.,SELECT * FROM public.campaign WHERE project_id = 123;
"The ""campaigns_log"" table represents logs for campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the log entry was created), ""is_enabled"" (a boolean value representing whether the log entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the log entry was last updated), and several columns to track campaign statistics such as ""caught_users,"" ""opened_emails,"" ""total_emails,"" ""total_users,"" ""trained_users,"" ""trainings_sent,"" ""campaign_id"" (a reference to the ""campaign"" table through a unique constraint), and ""training_in_progress.""
The ""campaign"" table represents campaigns and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), and various other columns to store campaign details such as name, owner, schedule time, subject, type, and references to other tables like ""projects,"" ""attack_techniques,"" ""email_profile,"" and ""training_hub.""
Additionally, an index ""project_index"" is added to the ""campaign"" table on the ""project_id"" column to improve query performance, and a foreign key constraint is added to the ""campaigns_log"" table, linking the ""campaign_id"" column to the ""id"" column of the ""campaign"" table.",Find campaigns executed after a specific date and time.,SELECT * FROM public.campaign WHERE executed_at > '2023-01-01 12:00:00';
"The ""campaigns_log"" table represents logs for campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the log entry was created), ""is_enabled"" (a boolean value representing whether the log entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the log entry was last updated), and several columns to track campaign statistics such as ""caught_users,"" ""opened_emails,"" ""total_emails,"" ""total_users,"" ""trained_users,"" ""trainings_sent,"" ""campaign_id"" (a reference to the ""campaign"" table through a unique constraint), and ""training_in_progress.""
The ""campaign"" table represents campaigns and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), and various other columns to store campaign details such as name, owner, schedule time, subject, type, and references to other tables like ""projects,"" ""attack_techniques,"" ""email_profile,"" and ""training_hub.""
Additionally, an index ""project_index"" is added to the ""campaign"" table on the ""project_id"" column to improve query performance, and a foreign key constraint is added to the ""campaigns_log"" table, linking the ""campaign_id"" column to the ""id"" column of the ""campaign"" table.",Count the total number of campaigns with custom templates.,SELECT COUNT(*) FROM public.campaign WHERE has_custom_template = true;
"The ""campaigns_log"" table represents logs for campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the log entry was created), ""is_enabled"" (a boolean value representing whether the log entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the log entry was last updated), and several columns to track campaign statistics such as ""caught_users,"" ""opened_emails,"" ""total_emails,"" ""total_users,"" ""trained_users,"" ""trainings_sent,"" ""campaign_id"" (a reference to the ""campaign"" table through a unique constraint), and ""training_in_progress.""
The ""campaign"" table represents campaigns and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), and various other columns to store campaign details such as name, owner, schedule time, subject, type, and references to other tables like ""projects,"" ""attack_techniques,"" ""email_profile,"" and ""training_hub.""
Additionally, an index ""project_index"" is added to the ""campaign"" table on the ""project_id"" column to improve query performance, and a foreign key constraint is added to the ""campaigns_log"" table, linking the ""campaign_id"" column to the ""id"" column of the ""campaign"" table.",Retrieve the timezone for a specific campaign.,SELECT timezone FROM public.campaign WHERE id = 456;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",List all administrators.,SELECT * FROM public.admins;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Find the first and last names of a specific administrator.,"SELECT firstname, lastname FROM public.admins WHERE id = 123;"
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Retrieve all enabled administrator accounts.,SELECT * FROM public.admins WHERE is_enabled = true;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Get the total number of administrators.,SELECT COUNT(*) FROM public.admins;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Show all administrators with super admin privileges.,SELECT * FROM public.admins WHERE super_admin = true;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Find administrators created after a specific date.,SELECT * FROM public.admins WHERE created_at > '2023-01-01';
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Retrieve the job roles of all administrators.,SELECT job_role FROM public.admins;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",List all administrators in a specific company.,SELECT * FROM public.admins WHERE company_id = 123;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Find administrators with a specific role.,SELECT * FROM public.admins WHERE role_id = 456;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Get the email addresses of all administrators.,SELECT email FROM public.admins;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Show all administrators with activated accounts.,SELECT * FROM public.admins WHERE activated = true;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Retrieve the usernames of administrators with super admin privileges.,SELECT username FROM public.admins WHERE super_admin = true;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",List all companies in a specific country.,SELECT * FROM public.company WHERE country = 'USA';
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Find companies belonging to a specific industry.,SELECT * FROM public.company WHERE industry = 'Technology';
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Get the names of all companies.,SELECT name FROM public.company;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Show all companies with more than a specific number of employees.,SELECT * FROM public.company WHERE size > 1000;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Find companies located in a specific state.,SELECT * FROM public.company WHERE state = 'California';
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Retrieve the ZIP codes of all companies.,SELECT zipcode FROM public.company;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",List all administrators with their associated companies.,"SELECT A.*, C.name AS company_name FROM public.admins A INNER JOIN public.company C ON A.company_id = C.id;"
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Find the administrator with a specific email address.,SELECT * FROM public.admins WHERE email = 'admin@example.com';
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""company"" table represents companies and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Get the company size for a specific company.,SELECT size FROM public.company WHERE name = 'ABC Corporation';
"The ""training_hub"" table represents a training hub and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating if the training hub has training templates), and a reference to the ""training_videos"" table through the ""video_id"" column.
The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).",List all training hubs.,SELECT * FROM public.training_hub;
"The ""training_hub"" table represents a training hub and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating if the training hub has training templates), and a reference to the ""training_videos"" table through the ""video_id"" column.",Find the creation timestamp of a specific training hub.,SELECT created_at FROM public.training_hub WHERE id = 123;
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).",Retrieve all enabled training hubs.,SELECT * FROM public.training_hub WHERE is_enabled = true;
"The ""training_hub"" table represents a training hub and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating if the training hub has training templates), and a reference to the ""training_videos"" table through the ""video_id"" column.",Get the total number of training hubs.,SELECT COUNT(*) FROM public.training_hub;
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).",Show all training hubs with training templates.,SELECT * FROM public.training_hub WHERE has_training_templates = true;
"The ""training_hub"" table represents a training hub and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating if the training hub has training templates), and a reference to the ""training_videos"" table through the ""video_id"" column.",Find training hubs created after a specific date.,SELECT * FROM public.training_hub WHERE created_at > '2023-01-01';
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).",Retrieve the description of all training videos.,SELECT description FROM public.training_videos;
"The ""training_hub"" table represents a training hub and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating if the training hub has training templates), and a reference to the ""training_videos"" table through the ""video_id"" column.",List all training videos with unique names.,SELECT DISTINCT name FROM public.training_videos;
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).",Find the training hub associated with a specific video.,SELECT T.* FROM public.training_hub T INNER JOIN public.training_videos V ON T.video_id = V.id WHERE V.id = 456;
"The ""training_hub"" table represents a training hub and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating if the training hub has training templates), and a reference to the ""training_videos"" table through the ""video_id"" column.",Get the poster ID for a specific training video.,SELECT poster_id FROM public.training_videos WHERE id = 789;
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).",Find training videos with a specific description.,SELECT * FROM public.training_videos WHERE description = 'Introduction to Security';
"The ""training_hub"" table represents a training hub and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating if the training hub has training templates), and a reference to the ""training_videos"" table through the ""video_id"" column.",Show all enabled training hubs with their IDs.,SELECT id FROM public.training_hub WHERE is_enabled = true;
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).",Retrieve the names of all training videos.,SELECT name FROM public.training_videos;
"The ""training_hub"" table represents a training hub and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating if the training hub has training templates), and a reference to the ""training_videos"" table through the ""video_id"" column.",List all training videos with a specific poster ID.,SELECT * FROM public.training_videos WHERE poster_id = 123;
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).",Find training hubs with videos associated with a specific document ID.,SELECT T.* FROM public.training_hub T INNER JOIN public.training_videos V ON T.video_id = V.id WHERE V.path_id = 789;
"The ""training_hub"" table represents a training hub and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating if the training hub has training templates), and a reference to the ""training_videos"" table through the ""video_id"" column.",Count the total number of training videos.,SELECT COUNT(*) FROM public.training_videos;
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).",Show all training hubs with videos related to a specific document.,SELECT T.* FROM public.training_hub T INNER JOIN public.training_videos V ON T.video_id = V.id WHERE V.path_id = 456;
"The ""training_hub"" table represents a training hub and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating if the training hub has training templates), and a reference to the ""training_videos"" table through the ""video_id"" column.",Find the training hub with a specific creation timestamp.,SELECT * FROM public.training_hub WHERE created_at = '2023-09-27 10:00:00';
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).",Get the IDs of training videos with a specific name.,SELECT id FROM public.training_videos WHERE name = 'Security101';
"The ""training_hub"" table represents a training hub and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating if the training hub has training templates), and a reference to the ""training_videos"" table through the ""video_id"" column.",Retrieve the update timestamp of a specific training hub.,SELECT updated_at FROM public.training_hub WHERE id = 123;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a varchar field for the description of the attack technique), ""icon"" (a varchar field for the icon associated with the attack technique), and ""name"" (a varchar field for the name of the attack technique, which is also unique).",List all email templates.,SELECT * FROM public.email_template;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a varchar field for the description of the attack technique), ""icon"" (a varchar field for the icon associated with the attack technique), and ""name"" (a varchar field for the name of the attack technique, which is also unique).",Find the description of a specific email template.,SELECT description FROM public.email_template WHERE id = 123;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a varchar field for the description of the attack technique), ""icon"" (a varchar field for the icon associated with the attack technique), and ""name"" (a varchar field for the name of the attack technique, which is also unique).",Retrieve all enabled email templates.,SELECT * FROM public.email_template WHERE is_enabled = true;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a varchar field for the description of the attack technique), ""icon"" (a varchar field for the icon associated with the attack technique), and ""name"" (a varchar field for the name of the attack technique, which is also unique).",Get the total number of email templates.,SELECT COUNT(*) FROM public.email_template;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a varchar field for the description of the attack technique), ""icon"" (a varchar field for the icon associated with the attack technique), and ""name"" (a varchar field for the name of the attack technique, which is also unique).",Show all email templates with a specific industry.,SELECT * FROM public.email_template WHERE industry = 'Finance';
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a varchar field for the description of the attack technique), ""icon"" (a varchar field for the icon associated with the attack technique), and ""name"" (a varchar field for the name of the attack technique, which is also unique).",Find email templates created after a specific date.,SELECT * FROM public.email_template WHERE created_at > '2023-01-01';
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a varchar field for the description of the attack technique), ""icon"" (a varchar field for the icon associated with the attack technique), and ""name"" (a varchar field for the name of the attack technique, which is also unique).",Retrieve the titles of all email templates.,SELECT title FROM public.email_template;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a varchar field for the description of the attack technique), ""icon"" (a varchar field for the icon associated with the attack technique), and ""name"" (a varchar field for the name of the attack technique, which is also unique).",List all email templates with a specific compromise rate.,SELECT * FROM public.email_template WHERE compromise_rate > 0.5;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a varchar field for the description of the attack technique), ""icon"" (a varchar field for the icon associated with the attack technique), and ""name"" (a varchar field for the name of the attack technique, which is also unique).",Find the email template associated with a specific technique.,SELECT E.* FROM public.email_template E INNER JOIN public.attack_techniques A ON E.technique_id = A.id WHERE A.name = 'Phishing';
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a varchar field for the description of the attack technique), ""icon"" (a varchar field for the icon associated with the attack technique), and ""name"" (a varchar field for the name of the attack technique, which is also unique).",Get the brand of a specific email template.,SELECT brand FROM public.email_template WHERE id = 456;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a varchar field for the description of the attack technique), ""icon"" (a varchar field for the icon associated with the attack technique), and ""name"" (a varchar field for the name of the attack technique, which is also unique).",Find email templates with a specific source.,SELECT * FROM public.email_template WHERE source = 'External Vendor';
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a varchar field for the description of the attack technique), ""icon"" (a varchar field for the icon associated with the attack technique), and ""name"" (a varchar field for the name of the attack technique, which is also unique).",Show all enabled email templates with their subjects.,SELECT subject FROM public.email_template WHERE is_enabled = true;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a varchar field for the description of the attack technique), ""icon"" (a varchar field for the icon associated with the attack technique), and ""name"" (a varchar field for the name of the attack technique, which is also unique).",Retrieve the themes of all email templates.,SELECT theme FROM public.email_template;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a varchar field for the description of the attack technique), ""icon"" (a varchar field for the icon associated with the attack technique), and ""name"" (a varchar field for the name of the attack technique, which is also unique).",List all email templates with a specific subject.,SELECT * FROM public.email_template WHERE subject = 'Important Update';
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a varchar field for the description of the attack technique), ""icon"" (a varchar field for the icon associated with the attack technique), and ""name"" (a varchar field for the name of the attack technique, which is also unique).",Find email templates with thumbnails linked to specific documents.,SELECT E.* FROM public.email_template E INNER JOIN public.documents D ON E.thumbnail_id = D.id WHERE D.mime_type = 'image/jpeg';
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a varchar field for the description of the attack technique), ""icon"" (a varchar field for the icon associated with the attack technique), and ""name"" (a varchar field for the name of the attack technique, which is also unique).",Count the total number of attack techniques.,SELECT COUNT(*) FROM public.attack_techniques;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a varchar field for the description of the attack technique), ""icon"" (a varchar field for the icon associated with the attack technique), and ""name"" (a varchar field for the name of the attack technique, which is also unique).",Show all email templates with themes related to a specific industry.,SELECT E.* FROM public.email_template E WHERE E.industry = 'Healthcare';
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a varchar field for the description of the attack technique), ""icon"" (a varchar field for the icon associated with the attack technique), and ""name"" (a varchar field for the name of the attack technique, which is also unique).",Find the attack technique with a specific name.,SELECT * FROM public.attack_techniques WHERE name = 'Phishing';
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a varchar field for the description of the attack technique), ""icon"" (a varchar field for the icon associated with the attack technique), and ""name"" (a varchar field for the name of the attack technique, which is also unique).",Get the icons associated with all attack techniques.,SELECT icon FROM public.attack_techniques;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a varchar field for the description of the attack technique), ""icon"" (a varchar field for the icon associated with the attack technique), and ""name"" (a varchar field for the name of the attack technique, which is also unique).",Retrieve the names of all attack techniques.,SELECT name FROM public.attack_techniques;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",List all email templates.,SELECT * FROM public.email_template;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find the description of a specific email template.,SELECT description FROM public.email_template WHERE id = 123;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Retrieve all enabled email templates.,SELECT * FROM public.email_template WHERE is_enabled = true;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Get the total number of email templates.,SELECT COUNT(*) FROM public.email_template;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Show all email templates with a specific industry.,SELECT * FROM public.email_template WHERE industry = 'Finance';
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find email templates created after a specific date.,SELECT * FROM public.email_template WHERE created_at > '2023-01-01';
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Retrieve the titles of all email templates.,SELECT title FROM public.email_template;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",List all email templates with a specific compromise rate.,SELECT * FROM public.email_template WHERE compromise_rate > 0.5;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find the email template associated with a specific technique.,SELECT E.* FROM public.email_template E INNER JOIN public.attack_techniques A ON E.technique_id = A.id WHERE A.name = 'Phishing';
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Get the brand of a specific email template.,SELECT brand FROM public.email_template WHERE id = 456;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find email templates with a specific source.,SELECT * FROM public.email_template WHERE source = 'External Vendor';
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Show all enabled email templates with their subjects.,SELECT subject FROM public.email_template WHERE is_enabled = true;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Retrieve the themes of all email templates.,SELECT theme FROM public.email_template;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",List all email templates with a specific subject.,SELECT * FROM public.email_template WHERE subject = 'Important Update';
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find email templates with thumbnails linked to specific documents.,SELECT E.* FROM public.email_template E INNER JOIN public.documents D ON E.thumbnail_id = D.id WHERE D.mime_type = 'image/jpeg';
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Count the total number of documents.,SELECT COUNT(*) FROM public.documents;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Show all email templates with themes related to a specific industry.,SELECT E.* FROM public.email_template E WHERE E.industry = 'Healthcare';
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find the document with a specific node reference.,SELECT * FROM public.documents WHERE node_ref = 'xyz';
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Get the original names of all documents.,SELECT original_name FROM public.documents;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",List all documents with a size greater than a specific value.,SELECT * FROM public.documents WHERE size > 1000000;
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find the document associated with a specific path.,SELECT * FROM public.documents WHERE path = '/path/to/document.pdf';
"The ""email_template"" table represents email templates and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the description of the email template), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to some other table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate), and references to the ""documents"" table through the ""file_id"" and ""thumbnail_id"" columns.
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Retrieve the duration of a specific document.,SELECT duration FROM public.documents WHERE id = 789;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""roles"" table represents roles for administrators and has two columns, including ""id"" (a unique identifier) and ""name"" (a varchar field for the name of the role, which is also unique).",List all administrators.,SELECT * FROM public.admins;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""roles"" table represents roles for administrators and has two columns, including ""id"" (a unique identifier) and ""name"" (a varchar field for the name of the role, which is also unique).",Find the first and last names of a specific administrator.,"SELECT firstname, lastname FROM public.admins WHERE id = 123;"
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""roles"" table represents roles for administrators and has two columns, including ""id"" (a unique identifier) and ""name"" (a varchar field for the name of the role, which is also unique).",Retrieve all enabled administrator accounts.,SELECT * FROM public.admins WHERE is_enabled = true;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""roles"" table represents roles for administrators and has two columns, including ""id"" (a unique identifier) and ""name"" (a varchar field for the name of the role, which is also unique).",Get the total number of administrators.,SELECT COUNT(*) FROM public.admins;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""roles"" table represents roles for administrators and has two columns, including ""id"" (a unique identifier) and ""name"" (a varchar field for the name of the role, which is also unique).",Show all administrators with super admin privileges.,SELECT * FROM public.admins WHERE super_admin = true;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""roles"" table represents roles for administrators and has two columns, including ""id"" (a unique identifier) and ""name"" (a varchar field for the name of the role, which is also unique).",Find administrators created after a specific date.,SELECT * FROM public.admins WHERE created_at > '2023-01-01';
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""roles"" table represents roles for administrators and has two columns, including ""id"" (a unique identifier) and ""name"" (a varchar field for the name of the role, which is also unique).",Retrieve the job roles of all administrators.,SELECT job_role FROM public.admins;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""roles"" table represents roles for administrators and has two columns, including ""id"" (a unique identifier) and ""name"" (a varchar field for the name of the role, which is also unique).",List all administrators in a specific company.,SELECT * FROM public.admins WHERE company_id = 123;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""roles"" table represents roles for administrators and has two columns, including ""id"" (a unique identifier) and ""name"" (a varchar field for the name of the role, which is also unique).",Find administrators with a specific role.,SELECT * FROM public.admins WHERE role_id = 456;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""roles"" table represents roles for administrators and has two columns, including ""id"" (a unique identifier) and ""name"" (a varchar field for the name of the role, which is also unique).",Get the email addresses of all administrators.,SELECT email FROM public.admins;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""roles"" table represents roles for administrators and has two columns, including ""id"" (a unique identifier) and ""name"" (a varchar field for the name of the role, which is also unique).",Show all administrators with activated accounts.,SELECT * FROM public.admins WHERE activated = true;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""roles"" table represents roles for administrators and has two columns, including ""id"" (a unique identifier) and ""name"" (a varchar field for the name of the role, which is also unique).",Retrieve the usernames of administrators with super admin privileges.,SELECT username FROM public.admins WHERE super_admin = true;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""roles"" table represents roles for administrators and has two columns, including ""id"" (a unique identifier) and ""name"" (a varchar field for the name of the role, which is also unique).",List all roles.,SELECT * FROM public.roles;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""roles"" table represents roles for administrators and has two columns, including ""id"" (a unique identifier) and ""name"" (a varchar field for the name of the role, which is also unique).",Find the role with a specific name.,SELECT * FROM public.roles WHERE name = 'Admin';
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""roles"" table represents roles for administrators and has two columns, including ""id"" (a unique identifier) and ""name"" (a varchar field for the name of the role, which is also unique).",Get the names of all roles.,SELECT name FROM public.roles;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""roles"" table represents roles for administrators and has two columns, including ""id"" (a unique identifier) and ""name"" (a varchar field for the name of the role, which is also unique).",Show all administrators with their associated roles.,"SELECT A.*, R.name AS role_name FROM public.admins A INNER JOIN public.roles R ON A.role_id = R.id;"
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""roles"" table represents roles for administrators and has two columns, including ""id"" (a unique identifier) and ""name"" (a varchar field for the name of the role, which is also unique).",Find the administrator with a specific email address.,SELECT * FROM public.admins WHERE email = 'admin@example.com';
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""roles"" table represents roles for administrators and has two columns, including ""id"" (a unique identifier) and ""name"" (a varchar field for the name of the role, which is also unique).",Get the role name for a specific administrator.,SELECT R.name FROM public.admins A INNER JOIN public.roles R ON A.role_id = R.id WHERE A.id = 123;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""roles"" table represents roles for administrators and has two columns, including ""id"" (a unique identifier) and ""name"" (a varchar field for the name of the role, which is also unique).",Retrieve the activation status of a specific administrator.,SELECT activated FROM public.admins WHERE id = 456;
"The ""admins"" table represents administrators and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is also unique and not nullable), ""firstname"" (a character varying field for the administrator's first name), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name), ""password"" (a character varying field for the administrator's password), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is also unique and not nullable), ""verify_time"" (a timestamp without time zone), and references to other tables like ""company"" and ""roles"" through foreign key constraints.
The ""roles"" table represents roles for administrators and has two columns, including ""id"" (a unique identifier) and ""name"" (a varchar field for the name of the role, which is also unique).",Find administrators with a specific phone number.,SELECT * FROM public.admins WHERE phone = '123-456-7890';
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",List all training videos.,SELECT * FROM public.training_videos;
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find the creation timestamp of a specific training video.,SELECT created_at FROM public.training_videos WHERE id = 123;
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Retrieve all enabled training videos.,SELECT * FROM public.training_videos WHERE is_enabled = true;
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Get the total number of training videos.,SELECT COUNT(*) FROM public.training_videos;
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Show all training videos with a specific name.,SELECT * FROM public.training_videos WHERE name = 'TrainingVideo1';
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find training videos created after a specific date.,SELECT * FROM public.training_videos WHERE created_at > '2023-01-01';
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Retrieve the descriptions of all training videos.,SELECT description FROM public.training_videos;
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",List all training videos with unique names.,SELECT DISTINCT name FROM public.training_videos;
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find the training video associated with a specific poster ID.,SELECT * FROM public.training_videos WHERE poster_id = 456;
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Get the poster ID for a specific training video.,SELECT poster_id FROM public.training_videos WHERE id = 789;
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Show all enabled training videos with their descriptions.,SELECT description FROM public.training_videos WHERE is_enabled = true;
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Retrieve the names of all training videos.,SELECT name FROM public.training_videos;
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",List all training videos with specific MIME types.,SELECT * FROM public.training_videos T INNER JOIN public.documents D ON T.path_id = D.id WHERE D.mime_type = 'video/mp4';
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find training videos with a specific file path.,SELECT * FROM public.training_videos T INNER JOIN public.documents D ON T.path_id = D.id WHERE D.path = '/videos/training/';
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find training videos associated with specific documents by node reference.,SELECT T.* FROM public.training_videos T INNER JOIN public.documents D ON T.path_id = D.id WHERE D.node_ref = 'xyz';
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Count the total number of documents.,SELECT COUNT(*) FROM public.documents;
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Show all training videos with paths containing a specific substring.,SELECT * FROM public.training_videos T INNER JOIN public.documents D ON T.path_id = D.id WHERE D.path LIKE '%/videos/%';
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find the training video with a specific unique name.,SELECT * FROM public.training_videos WHERE name = 'IntroVideo';
"The ""training_videos"" table represents training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a varchar field for the description of the training video), ""name"" (a varchar field for the name of the training video, which is also unique), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (another reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table represents various documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field that must be unique and is not nullable, serving as a reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Get the file extensions of all training videos.,SELECT D.ext FROM public.training_videos T INNER JOIN public.documents D ON T.path_id = D.id;
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",List all campaigns.,SELECT * FROM public.campaign;
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Find the name and subject of a specific campaign.,"SELECT name, subject FROM public.campaign WHERE id = 123;"
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Retrieve all enabled campaigns.,SELECT * FROM public.campaign WHERE is_enabled = true;
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Get the total number of campaigns.,SELECT COUNT(*) FROM public.campaign;
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Show all campaigns with custom templates.,SELECT * FROM public.campaign WHERE has_custom_template = true;
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Find campaigns created after a specific date.,SELECT * FROM public.campaign WHERE created_at > '2023-01-01';
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Retrieve the owners of all campaigns.,SELECT owner FROM public.campaign;
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",List all campaigns with a specific status.,SELECT * FROM public.campaign WHERE status = 2;
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Find campaigns associated with a specific project.,SELECT * FROM public.campaign WHERE project_id = 456;
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Get the email profile ID for a specific campaign.,SELECT email_profile_id FROM public.campaign WHERE id = 789;
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Show all campaigns with reminders enabled.,SELECT * FROM public.campaign WHERE has_reminders = true;
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Retrieve the names of all campaigns.,SELECT name FROM public.campaign;
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",List all campaigns with a specific execution status.,SELECT * FROM public.campaign WHERE executed = true;
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Find campaigns scheduled after a specific timestamp.,SELECT * FROM public.campaign WHERE schedule_time > '2023-06-15 08:00:00';
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Get the techniques used in all campaigns.,SELECT DISTINCT technique_id FROM public.campaign;
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Show all campaigns with auto-training enabled.,SELECT * FROM public.campaign WHERE is_auto_training = true;
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Retrieve the types of all campaigns.,SELECT DISTINCT type FROM public.campaign;
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",List all email profiles.,SELECT * FROM public.email_profile;
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Find the email profile associated with a specific campaign.,SELECT E.* FROM public.email_profile E INNER JOIN public.campaign C ON E.id = C.email_profile_id WHERE C.id = 123;
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Get the passwords for all email profiles.,SELECT password FROM public.email_profile;
"The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating if the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating if the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating if the campaign is scheduled), ""launched"" (a boolean value indicating if the campaign has been launched, with a default value of false), ""name"" (a character varying field for the name of the campaign), ""owner"" (a character varying field for the owner of the campaign), ""schedule_time"" (a timestamp field for the scheduled time of the campaign), ""subject"" (a character varying field for the subject of the campaign), ""type"" (a character varying field for the type of the campaign), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field for the status of the campaign), ""is_auto_training"" (a boolean value indicating if the campaign has auto-training enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating if the campaign has reminders enabled, with a default value of false), ""reminders_frequency"" (an integer field for the reminders frequency), ""reminders_number"" (an integer field for the number of reminders), and ""timezone"" (a character varying field for the timezone of the campaign).
The ""email_profile"" table represents email profiles and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value representing whether the email profile is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email profile was last updated), ""email"" (a character varying field for the email address associated with the profile), ""name"" (a character varying field for the name of the email profile), ""password"" (a character varying field for the password associated with the email profile), ""port"" (an integer field for the port used by the email profile), ""protocol"" (a character varying field for the protocol used by the email profile), ""server"" (a character varying field for the server used by the email profile), ""username"" (a character varying field for the username associated with the email profile), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Show all campaigns with launched status.,SELECT * FROM public.campaign WHERE launched = true;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",List all users.,SELECT * FROM public.users;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Find the first and last names of a specific user.,"SELECT firstname, lastname FROM public.users WHERE id = 123;"
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Retrieve all enabled user accounts.,SELECT * FROM public.users WHERE is_enabled = true;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Get the total number of users.,SELECT COUNT(*) FROM public.users;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Show all users in a specific company.,SELECT * FROM public.users WHERE company_id = 456;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Find users created after a specific date.,SELECT * FROM public.users WHERE created_at > '2023-01-01';
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Retrieve the roles of all users.,SELECT role_id FROM public.users;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",List all users with specific roles.,SELECT * FROM public.users WHERE role_id = 789;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Find users with a specific email address.,SELECT * FROM public.users WHERE email = 'user@example.com';
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Get the last names of all users.,SELECT lastname FROM public.users;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Show all users with compromised status.,SELECT * FROM public.users WHERE compromised = true;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Retrieve the first names of all users.,SELECT firstname FROM public.users;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",List all users who are offended.,SELECT * FROM public.users WHERE offended = true;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Find users associated with a specific project.,SELECT * FROM public.users WHERE project_id = 123;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Get the user ID for a specific email address.,SELECT id FROM public.users WHERE email = 'anotheruser@example.com';
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Show all users who are simulated.,SELECT * FROM public.users WHERE simulated = true;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Retrieve the company names of all users.,SELECT C.name FROM public.users U INNER JOIN public.company C ON U.company_id = C.id;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",List all users in a specific country.,SELECT * FROM public.users U INNER JOIN public.company C ON U.company_id = C.id WHERE C.country = 'USA';
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Find users with specific ZIP codes.,SELECT * FROM public.users U INNER JOIN public.company C ON U.company_id = C.id WHERE C.zipcode = 12345;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Get the sizes of all companies where users are employed.,SELECT DISTINCT C.size FROM public.users U INNER JOIN public.company C ON U.company_id = C.id;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""company"" table represents company information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the company record was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company record was last updated), ""country"" (a varchar field for the country where the company is located), ""industry"" (a varchar field for the industry to which the company belongs), ""name"" (a varchar field for the name of the company), ""size"" (a bigint field for the size of the company), ""state"" (a varchar field for the state where the company is located), and ""zipcode"" (a bigint field for the company's ZIP code).",Show all users with their associated projects.,"SELECT U.*, P.name AS project_name FROM public.users U LEFT JOIN public.projects P ON U.project_id = P.id;"
"The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).",List all administrator-project associations.,SELECT * FROM public.admins_projects;
"The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).",Find the administrators associated with a specific project.,SELECT A.* FROM public.admins A INNER JOIN public.admins_projects AP ON A.id = AP.admin_id WHERE AP.project_id = 123;
"The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).",Retrieve all enabled projects.,SELECT * FROM public.projects WHERE is_enabled = true;
"The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).",Get the total number of projects.,SELECT COUNT(*) FROM public.projects;
"The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).",Show all projects with specific types.,SELECT * FROM public.projects WHERE type = 'Research';
"The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).",Find projects created after a specific date.,SELECT * FROM public.projects WHERE created_at > '2023-01-01';
"The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).",Retrieve the descriptions of all projects.,SELECT description FROM public.projects;
"The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).",List all projects with specific project leads.,SELECT * FROM public.projects WHERE project_lead_id = 456;
"The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).",Find projects associated with a specific company.,SELECT * FROM public.projects WHERE company_id = 789;
"The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).",Get the project names and URLs for all projects.,"SELECT name, url FROM public.projects;"
"The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).",Show all projects with unique company associations.,SELECT DISTINCT company_id FROM public.projects;
"The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).",Retrieve the names of all administrators associated with a specific project.,"SELECT A.firstname, A.lastname FROM public.admins A INNER JOIN public.admins_projects AP ON A.id = AP.admin_id WHERE AP.project_id = 123;"
"The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).",List all projects with specific descriptions.,SELECT * FROM public.projects WHERE description LIKE '%research%';
"The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).",Find projects with specific avatar URLs.,SELECT * FROM public.projects WHERE avatar = 'https://example.com/avatar.jpg';
"The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).",Show all projects with unique project lead associations.,SELECT DISTINCT project_lead_id FROM public.projects;
"The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).",Retrieve the types of all projects.,SELECT DISTINCT type FROM public.projects;
"The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).",List all administrators associated with a specific project type.,SELECT A.* FROM public.admins A INNER JOIN public.admins_projects AP ON A.id = AP.admin_id INNER JOIN public.projects P ON AP.project_id = P.id WHERE P.type = 'Development';
"The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).",Find projects with a specific project lead.,SELECT * FROM public.projects WHERE project_lead_id = 123;
"The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).",Get the project IDs for all projects with enabled statuses.,SELECT id FROM public.projects WHERE is_enabled = true;
"The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).",Show all administrators associated with multiple projects.,SELECT A.* FROM public.admins A INNER JOIN public.admins_projects AP ON A.id = AP.admin_id GROUP BY A.id HAVING COUNT(AP.project_id) > 1;
"The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the name of the group), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).
",List all groups.,SELECT * FROM public.groups;
"The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the name of the group), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).
",Find the name and description of a specific group.,"SELECT name, description FROM public.groups WHERE id = 123;"
"The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the name of the group), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).
",Retrieve all enabled groups.,SELECT * FROM public.groups WHERE is_enabled = true;
"The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the name of the group), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).
",Get the total number of groups.,SELECT COUNT(*) FROM public.groups;
"The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the name of the group), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).
",Show all groups in a specific project.,SELECT * FROM public.groups WHERE project_id = 456;
"The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the name of the group), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).
",Find groups created after a specific date.,SELECT * FROM public.groups WHERE created_at > '2023-01-01';
"The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the name of the group), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).
",Retrieve the names of all groups.,SELECT name FROM public.groups;
"The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the name of the group), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).
",List all groups with specific descriptions.,SELECT * FROM public.groups WHERE description LIKE '%security%';
"The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the name of the group), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).
",Find groups associated with a specific project type.,SELECT * FROM public.groups G INNER JOIN public.projects P ON G.project_id = P.id WHERE P.type = 'Development';
"The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the name of the group), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).
",Get the group names and descriptions for all groups.,"SELECT name, description FROM public.groups;"
"The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the name of the group), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).
",Show all groups with unique project associations.,SELECT DISTINCT project_id FROM public.groups;
"The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the name of the group), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).
",Retrieve the descriptions of all groups.,SELECT description FROM public.groups;
"The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the name of the group), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).
",List all groups with unique company associations.,SELECT DISTINCT P.company_id FROM public.groups G INNER JOIN public.projects P ON G.project_id = P.id;
"The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the name of the group), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).
",Find groups with specific names.,"SELECT * FROM public.groups WHERE name IN ('Group A', 'Group B');"
"The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the name of the group), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).
",Show all groups associated with a specific company.,SELECT * FROM public.groups G INNER JOIN public.projects P ON G.project_id = P.id WHERE P.company_id = 789;
"The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the name of the group), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).
",Retrieve the IDs of all groups with enabled statuses.,SELECT id FROM public.groups WHERE is_enabled = true;
"The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the name of the group), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).
",List all groups with unique project lead associations.,SELECT DISTINCT P.project_lead_id FROM public.groups G INNER JOIN public.projects P ON G.project_id = P.id;
"The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the name of the group), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).
",Get the project IDs for all groups with specific descriptions.,SELECT G.project_id FROM public.groups G WHERE G.description LIKE '%team%';
"The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the name of the group), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).
",Show all groups created before a specific timestamp.,SELECT * FROM public.groups WHERE created_at < '2023-06-15 08:00:00';
"The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the name of the group), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents project information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for the avatar associated with the project), ""description"" (a varchar field for the project's description), ""name"" (a varchar field for the name of the project), ""type"" (a varchar field for the type of the project), ""url"" (a varchar field for the URL of the project), ""company_id"" (a reference to the ""company"" table through a foreign key constraint, which is also marked as unique), and ""project_lead_id"" (a bigint field for the ID of the project lead, if applicable).
",Retrieve the types of all projects associated with groups.,SELECT DISTINCT P.type FROM public.groups G INNER JOIN public.projects P ON G.project_id = P.id;
"The ""admins"" table represents administrator information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is unique and not nullable), ""firstname"" (a character varying field for the administrator's first name, which is not nullable), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name, which is not nullable), ""password"" (a character varying field for the administrator's password, which is not nullable), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is unique and not nullable), ""verify_time"" (a timestamp without time zone for verification time), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).
The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
",List all administrators.,SELECT * FROM public.admins;
"The ""admins"" table represents administrator information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is unique and not nullable), ""firstname"" (a character varying field for the administrator's first name, which is not nullable), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name, which is not nullable), ""password"" (a character varying field for the administrator's password, which is not nullable), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is unique and not nullable), ""verify_time"" (a timestamp without time zone for verification time), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).
The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
",Find the first and last names of a specific administrator.,"SELECT firstname, lastname FROM public.admins WHERE id = 123;"
"The ""admins"" table represents administrator information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is unique and not nullable), ""firstname"" (a character varying field for the administrator's first name, which is not nullable), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name, which is not nullable), ""password"" (a character varying field for the administrator's password, which is not nullable), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is unique and not nullable), ""verify_time"" (a timestamp without time zone for verification time), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).
The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
",Retrieve all enabled administrator accounts.,SELECT * FROM public.admins WHERE is_enabled = true;
"The ""admins"" table represents administrator information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is unique and not nullable), ""firstname"" (a character varying field for the administrator's first name, which is not nullable), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name, which is not nullable), ""password"" (a character varying field for the administrator's password, which is not nullable), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is unique and not nullable), ""verify_time"" (a timestamp without time zone for verification time), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).
The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
",Get the total number of administrators.,SELECT COUNT(*) FROM public.admins;
"The ""admins"" table represents administrator information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is unique and not nullable), ""firstname"" (a character varying field for the administrator's first name, which is not nullable), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name, which is not nullable), ""password"" (a character varying field for the administrator's password, which is not nullable), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is unique and not nullable), ""verify_time"" (a timestamp without time zone for verification time), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).
The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
",Show all administrators with specific job roles.,SELECT * FROM public.admins WHERE job_role = 'Manager';
"The ""admins"" table represents administrator information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is unique and not nullable), ""firstname"" (a character varying field for the administrator's first name, which is not nullable), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name, which is not nullable), ""password"" (a character varying field for the administrator's password, which is not nullable), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is unique and not nullable), ""verify_time"" (a timestamp without time zone for verification time), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).
The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
",Find administrators created after a specific date.,SELECT * FROM public.admins WHERE created_at > '2023-01-01';
"The ""admins"" table represents administrator information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is unique and not nullable), ""firstname"" (a character varying field for the administrator's first name, which is not nullable), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name, which is not nullable), ""password"" (a character varying field for the administrator's password, which is not nullable), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is unique and not nullable), ""verify_time"" (a timestamp without time zone for verification time), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).
The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
",Retrieve the usernames of all administrators.,SELECT username FROM public.admins;
"The ""admins"" table represents administrator information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is unique and not nullable), ""firstname"" (a character varying field for the administrator's first name, which is not nullable), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name, which is not nullable), ""password"" (a character varying field for the administrator's password, which is not nullable), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is unique and not nullable), ""verify_time"" (a timestamp without time zone for verification time), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).
The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
",List all administrators who are super admins.,SELECT * FROM public.admins WHERE super_admin = true;
"The ""admins"" table represents administrator information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is unique and not nullable), ""firstname"" (a character varying field for the administrator's first name, which is not nullable), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name, which is not nullable), ""password"" (a character varying field for the administrator's password, which is not nullable), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is unique and not nullable), ""verify_time"" (a timestamp without time zone for verification time), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).
The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
",Find administrators with specific email addresses.,"SELECT * FROM public.admins WHERE email IN ('admin1@example.com', 'admin2@example.com');"
"The ""admins"" table represents administrator information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is unique and not nullable), ""firstname"" (a character varying field for the administrator's first name, which is not nullable), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name, which is not nullable), ""password"" (a character varying field for the administrator's password, which is not nullable), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is unique and not nullable), ""verify_time"" (a timestamp without time zone for verification time), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).
The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
",Get the last names of all administrators.,SELECT lastname FROM public.admins;
"The ""admins"" table represents administrator information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is unique and not nullable), ""firstname"" (a character varying field for the administrator's first name, which is not nullable), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name, which is not nullable), ""password"" (a character varying field for the administrator's password, which is not nullable), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is unique and not nullable), ""verify_time"" (a timestamp without time zone for verification time), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).
The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
",Show all administrators who are activated.,SELECT * FROM public.admins WHERE activated = true;
"The ""admins"" table represents administrator information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is unique and not nullable), ""firstname"" (a character varying field for the administrator's first name, which is not nullable), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name, which is not nullable), ""password"" (a character varying field for the administrator's password, which is not nullable), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is unique and not nullable), ""verify_time"" (a timestamp without time zone for verification time), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).
The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
",Retrieve the company IDs of all administrators.,SELECT company_id FROM public.admins;
"The ""admins"" table represents administrator information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is unique and not nullable), ""firstname"" (a character varying field for the administrator's first name, which is not nullable), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name, which is not nullable), ""password"" (a character varying field for the administrator's password, which is not nullable), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is unique and not nullable), ""verify_time"" (a timestamp without time zone for verification time), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).
The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
",List all administrators with specific phone numbers.,"SELECT * FROM public.admins WHERE phone IN ('123-456-7890', '987-654-3210');"
"The ""admins"" table represents administrator information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is unique and not nullable), ""firstname"" (a character varying field for the administrator's first name, which is not nullable), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name, which is not nullable), ""password"" (a character varying field for the administrator's password, which is not nullable), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is unique and not nullable), ""verify_time"" (a timestamp without time zone for verification time), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).
The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
",Find administrators with specific usernames.,SELECT * FROM public.admins WHERE username = 'admin123';
"The ""admins"" table represents administrator information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is unique and not nullable), ""firstname"" (a character varying field for the administrator's first name, which is not nullable), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name, which is not nullable), ""password"" (a character varying field for the administrator's password, which is not nullable), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is unique and not nullable), ""verify_time"" (a timestamp without time zone for verification time), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).
The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
",Get the IDs of all administrators with super admin status.,SELECT id FROM public.admins WHERE super_admin = true;
"The ""admins"" table represents administrator information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is unique and not nullable), ""firstname"" (a character varying field for the administrator's first name, which is not nullable), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name, which is not nullable), ""password"" (a character varying field for the administrator's password, which is not nullable), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is unique and not nullable), ""verify_time"" (a timestamp without time zone for verification time), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).
The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
",Show all administrators associated with a specific company.,SELECT * FROM public.admins WHERE company_id = 789;
"The ""admins"" table represents administrator information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is unique and not nullable), ""firstname"" (a character varying field for the administrator's first name, which is not nullable), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name, which is not nullable), ""password"" (a character varying field for the administrator's password, which is not nullable), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is unique and not nullable), ""verify_time"" (a timestamp without time zone for verification time), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).
The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
",Retrieve the email addresses of all administrators.,SELECT email FROM public.admins;
"The ""admins"" table represents administrator information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is unique and not nullable), ""firstname"" (a character varying field for the administrator's first name, which is not nullable), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name, which is not nullable), ""password"" (a character varying field for the administrator's password, which is not nullable), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is unique and not nullable), ""verify_time"" (a timestamp without time zone for verification time), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).
The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
",List all administrators with unique role associations.,SELECT DISTINCT role_id FROM public.admins;
"The ""admins"" table represents administrator information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is unique and not nullable), ""firstname"" (a character varying field for the administrator's first name, which is not nullable), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name, which is not nullable), ""password"" (a character varying field for the administrator's password, which is not nullable), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is unique and not nullable), ""verify_time"" (a timestamp without time zone for verification time), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).
The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
",Find administrators with specific verification times.,SELECT * FROM public.admins WHERE verify_time < '2023-06-15 08:00:00';
"The ""admins"" table represents administrator information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator account was created), ""is_enabled"" (a boolean value representing whether the administrator account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator account was last updated), ""activated"" (a boolean value indicating if the administrator account is activated), ""email"" (a character varying field for the administrator's email address, which is unique and not nullable), ""firstname"" (a character varying field for the administrator's first name, which is not nullable), ""image"" (a character varying field for the administrator's image), ""job_role"" (a character varying field for the administrator's job role), ""lastname"" (a character varying field for the administrator's last name, which is not nullable), ""password"" (a character varying field for the administrator's password, which is not nullable), ""phone"" (a character varying field for the administrator's phone number), ""super_admin"" (a boolean value indicating if the administrator is a super admin, with a default value of false), ""username"" (a character varying field for the administrator's username, which is unique and not nullable), ""verify_time"" (a timestamp without time zone for verification time), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).
The ""admins_projects"" table represents a many-to-many relationship between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
",Get the job roles of all administrators.,SELECT DISTINCT job_role FROM public.admins;
"The ""training_templates"" table represents training template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training template was created), ""is_enabled"" (a boolean value representing whether the training template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training template was last updated), ""description"" (a varchar field for the training template's description), ""is_phishing"" (a boolean value indicating if the training template is related to phishing), ""title"" (a varchar field for the title of the training template), ""file_path_id"" (a bigint field representing the ID of the associated document file path, with a foreign key constraint referencing the ""documents"" table), and ""thumbnail_id"" (a bigint field representing the ID of the associated thumbnail image, with a foreign key constraint referencing the ""documents"" table).
The ""documents"" table represents document information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field representing a unique reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",List all training templates.,SELECT * FROM public.training_templates;
"The ""training_templates"" table represents training template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training template was created), ""is_enabled"" (a boolean value representing whether the training template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training template was last updated), ""description"" (a varchar field for the training template's description), ""is_phishing"" (a boolean value indicating if the training template is related to phishing), ""title"" (a varchar field for the title of the training template), ""file_path_id"" (a bigint field representing the ID of the associated document file path, with a foreign key constraint referencing the ""documents"" table), and ""thumbnail_id"" (a bigint field representing the ID of the associated thumbnail image, with a foreign key constraint referencing the ""documents"" table).
The ""documents"" table represents document information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field representing a unique reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find the descriptions and titles of specific training templates.,"SELECT description, title FROM public.training_templates WHERE id IN (123, 456);"
"The ""training_templates"" table represents training template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training template was created), ""is_enabled"" (a boolean value representing whether the training template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training template was last updated), ""description"" (a varchar field for the training template's description), ""is_phishing"" (a boolean value indicating if the training template is related to phishing), ""title"" (a varchar field for the title of the training template), ""file_path_id"" (a bigint field representing the ID of the associated document file path, with a foreign key constraint referencing the ""documents"" table), and ""thumbnail_id"" (a bigint field representing the ID of the associated thumbnail image, with a foreign key constraint referencing the ""documents"" table).
The ""documents"" table represents document information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field representing a unique reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Retrieve all enabled training templates.,SELECT * FROM public.training_templates WHERE is_enabled = true;
"The ""training_templates"" table represents training template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training template was created), ""is_enabled"" (a boolean value representing whether the training template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training template was last updated), ""description"" (a varchar field for the training template's description), ""is_phishing"" (a boolean value indicating if the training template is related to phishing), ""title"" (a varchar field for the title of the training template), ""file_path_id"" (a bigint field representing the ID of the associated document file path, with a foreign key constraint referencing the ""documents"" table), and ""thumbnail_id"" (a bigint field representing the ID of the associated thumbnail image, with a foreign key constraint referencing the ""documents"" table).
The ""documents"" table represents document information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field representing a unique reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Get the total number of training templates.,SELECT COUNT(*) FROM public.training_templates;
"The ""training_templates"" table represents training template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training template was created), ""is_enabled"" (a boolean value representing whether the training template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training template was last updated), ""description"" (a varchar field for the training template's description), ""is_phishing"" (a boolean value indicating if the training template is related to phishing), ""title"" (a varchar field for the title of the training template), ""file_path_id"" (a bigint field representing the ID of the associated document file path, with a foreign key constraint referencing the ""documents"" table), and ""thumbnail_id"" (a bigint field representing the ID of the associated thumbnail image, with a foreign key constraint referencing the ""documents"" table).
The ""documents"" table represents document information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field representing a unique reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Show all training templates with specific descriptions.,SELECT * FROM public.training_templates WHERE description LIKE '%security%';
"The ""training_templates"" table represents training template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training template was created), ""is_enabled"" (a boolean value representing whether the training template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training template was last updated), ""description"" (a varchar field for the training template's description), ""is_phishing"" (a boolean value indicating if the training template is related to phishing), ""title"" (a varchar field for the title of the training template), ""file_path_id"" (a bigint field representing the ID of the associated document file path, with a foreign key constraint referencing the ""documents"" table), and ""thumbnail_id"" (a bigint field representing the ID of the associated thumbnail image, with a foreign key constraint referencing the ""documents"" table).
The ""documents"" table represents document information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field representing a unique reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find training templates created after a specific date.,SELECT * FROM public.training_templates WHERE created_at > '2023-01-01';
"The ""training_templates"" table represents training template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training template was created), ""is_enabled"" (a boolean value representing whether the training template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training template was last updated), ""description"" (a varchar field for the training template's description), ""is_phishing"" (a boolean value indicating if the training template is related to phishing), ""title"" (a varchar field for the title of the training template), ""file_path_id"" (a bigint field representing the ID of the associated document file path, with a foreign key constraint referencing the ""documents"" table), and ""thumbnail_id"" (a bigint field representing the ID of the associated thumbnail image, with a foreign key constraint referencing the ""documents"" table).
The ""documents"" table represents document information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field representing a unique reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Retrieve the titles of all training templates.,SELECT title FROM public.training_templates;
"The ""training_templates"" table represents training template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training template was created), ""is_enabled"" (a boolean value representing whether the training template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training template was last updated), ""description"" (a varchar field for the training template's description), ""is_phishing"" (a boolean value indicating if the training template is related to phishing), ""title"" (a varchar field for the title of the training template), ""file_path_id"" (a bigint field representing the ID of the associated document file path, with a foreign key constraint referencing the ""documents"" table), and ""thumbnail_id"" (a bigint field representing the ID of the associated thumbnail image, with a foreign key constraint referencing the ""documents"" table).
The ""documents"" table represents document information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field representing a unique reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",List all training templates related to phishing.,SELECT * FROM public.training_templates WHERE is_phishing = true;
"The ""training_templates"" table represents training template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training template was created), ""is_enabled"" (a boolean value representing whether the training template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training template was last updated), ""description"" (a varchar field for the training template's description), ""is_phishing"" (a boolean value indicating if the training template is related to phishing), ""title"" (a varchar field for the title of the training template), ""file_path_id"" (a bigint field representing the ID of the associated document file path, with a foreign key constraint referencing the ""documents"" table), and ""thumbnail_id"" (a bigint field representing the ID of the associated thumbnail image, with a foreign key constraint referencing the ""documents"" table).
The ""documents"" table represents document information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field representing a unique reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find training templates with specific titles.,"SELECT * FROM public.training_templates WHERE title IN ('Phishing Awareness', 'Security Fundamentals');"
"The ""training_templates"" table represents training template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training template was created), ""is_enabled"" (a boolean value representing whether the training template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training template was last updated), ""description"" (a varchar field for the training template's description), ""is_phishing"" (a boolean value indicating if the training template is related to phishing), ""title"" (a varchar field for the title of the training template), ""file_path_id"" (a bigint field representing the ID of the associated document file path, with a foreign key constraint referencing the ""documents"" table), and ""thumbnail_id"" (a bigint field representing the ID of the associated thumbnail image, with a foreign key constraint referencing the ""documents"" table).
The ""documents"" table represents document information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field representing a unique reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Get the IDs of all training templates with enabled statuses.,SELECT id FROM public.training_templates WHERE is_enabled = true;
"The ""training_templates"" table represents training template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training template was created), ""is_enabled"" (a boolean value representing whether the training template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training template was last updated), ""description"" (a varchar field for the training template's description), ""is_phishing"" (a boolean value indicating if the training template is related to phishing), ""title"" (a varchar field for the title of the training template), ""file_path_id"" (a bigint field representing the ID of the associated document file path, with a foreign key constraint referencing the ""documents"" table), and ""thumbnail_id"" (a bigint field representing the ID of the associated thumbnail image, with a foreign key constraint referencing the ""documents"" table).
The ""documents"" table represents document information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field representing a unique reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Show all training templates with unique thumbnail image references.,SELECT DISTINCT thumbnail_id FROM public.training_templates;
"The ""training_templates"" table represents training template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training template was created), ""is_enabled"" (a boolean value representing whether the training template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training template was last updated), ""description"" (a varchar field for the training template's description), ""is_phishing"" (a boolean value indicating if the training template is related to phishing), ""title"" (a varchar field for the title of the training template), ""file_path_id"" (a bigint field representing the ID of the associated document file path, with a foreign key constraint referencing the ""documents"" table), and ""thumbnail_id"" (a bigint field representing the ID of the associated thumbnail image, with a foreign key constraint referencing the ""documents"" table).
The ""documents"" table represents document information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field representing a unique reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Retrieve the descriptions of all training templates.,SELECT description FROM public.training_templates;
"The ""training_templates"" table represents training template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training template was created), ""is_enabled"" (a boolean value representing whether the training template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training template was last updated), ""description"" (a varchar field for the training template's description), ""is_phishing"" (a boolean value indicating if the training template is related to phishing), ""title"" (a varchar field for the title of the training template), ""file_path_id"" (a bigint field representing the ID of the associated document file path, with a foreign key constraint referencing the ""documents"" table), and ""thumbnail_id"" (a bigint field representing the ID of the associated thumbnail image, with a foreign key constraint referencing the ""documents"" table).
The ""documents"" table represents document information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field representing a unique reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",List all training templates with specific file path IDs.,"SELECT * FROM public.training_templates WHERE file_path_id IN (789, 890);"
"The ""training_templates"" table represents training template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training template was created), ""is_enabled"" (a boolean value representing whether the training template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training template was last updated), ""description"" (a varchar field for the training template's description), ""is_phishing"" (a boolean value indicating if the training template is related to phishing), ""title"" (a varchar field for the title of the training template), ""file_path_id"" (a bigint field representing the ID of the associated document file path, with a foreign key constraint referencing the ""documents"" table), and ""thumbnail_id"" (a bigint field representing the ID of the associated thumbnail image, with a foreign key constraint referencing the ""documents"" table).
The ""documents"" table represents document information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field representing a unique reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find training templates associated with specific document types.,SELECT * FROM public.training_templates T INNER JOIN public.documents D ON T.file_path_id = D.id WHERE D.mime_type = 'application/pdf';
"The ""training_templates"" table represents training template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training template was created), ""is_enabled"" (a boolean value representing whether the training template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training template was last updated), ""description"" (a varchar field for the training template's description), ""is_phishing"" (a boolean value indicating if the training template is related to phishing), ""title"" (a varchar field for the title of the training template), ""file_path_id"" (a bigint field representing the ID of the associated document file path, with a foreign key constraint referencing the ""documents"" table), and ""thumbnail_id"" (a bigint field representing the ID of the associated thumbnail image, with a foreign key constraint referencing the ""documents"" table).
The ""documents"" table represents document information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field representing a unique reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Show all training templates with unique document node references.,SELECT DISTINCT T.file_path_id FROM public.training_templates T INNER JOIN public.documents D ON T.file_path_id = D.id;
"The ""training_templates"" table represents training template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training template was created), ""is_enabled"" (a boolean value representing whether the training template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training template was last updated), ""description"" (a varchar field for the training template's description), ""is_phishing"" (a boolean value indicating if the training template is related to phishing), ""title"" (a varchar field for the title of the training template), ""file_path_id"" (a bigint field representing the ID of the associated document file path, with a foreign key constraint referencing the ""documents"" table), and ""thumbnail_id"" (a bigint field representing the ID of the associated thumbnail image, with a foreign key constraint referencing the ""documents"" table).
The ""documents"" table represents document information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field representing a unique reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Retrieve the IDs of all training templates with phishing content.,SELECT id FROM public.training_templates WHERE is_phishing = true;
"The ""training_templates"" table represents training template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training template was created), ""is_enabled"" (a boolean value representing whether the training template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training template was last updated), ""description"" (a varchar field for the training template's description), ""is_phishing"" (a boolean value indicating if the training template is related to phishing), ""title"" (a varchar field for the title of the training template), ""file_path_id"" (a bigint field representing the ID of the associated document file path, with a foreign key constraint referencing the ""documents"" table), and ""thumbnail_id"" (a bigint field representing the ID of the associated thumbnail image, with a foreign key constraint referencing the ""documents"" table).
The ""documents"" table represents document information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field representing a unique reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",List all training templates with specific thumbnail image IDs.,"SELECT * FROM public.training_templates WHERE thumbnail_id IN (567, 678);"
"The ""training_templates"" table represents training template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training template was created), ""is_enabled"" (a boolean value representing whether the training template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training template was last updated), ""description"" (a varchar field for the training template's description), ""is_phishing"" (a boolean value indicating if the training template is related to phishing), ""title"" (a varchar field for the title of the training template), ""file_path_id"" (a bigint field representing the ID of the associated document file path, with a foreign key constraint referencing the ""documents"" table), and ""thumbnail_id"" (a bigint field representing the ID of the associated thumbnail image, with a foreign key constraint referencing the ""documents"" table).
The ""documents"" table represents document information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field representing a unique reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Find training templates associated with specific file extensions.,SELECT * FROM public.training_templates T INNER JOIN public.documents D ON T.file_path_id = D.id WHERE D.ext = 'pptx';
"The ""training_templates"" table represents training template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training template was created), ""is_enabled"" (a boolean value representing whether the training template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training template was last updated), ""description"" (a varchar field for the training template's description), ""is_phishing"" (a boolean value indicating if the training template is related to phishing), ""title"" (a varchar field for the title of the training template), ""file_path_id"" (a bigint field representing the ID of the associated document file path, with a foreign key constraint referencing the ""documents"" table), and ""thumbnail_id"" (a bigint field representing the ID of the associated thumbnail image, with a foreign key constraint referencing the ""documents"" table).
The ""documents"" table represents document information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field representing a unique reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Get the titles and descriptions of training templates.,"SELECT title, description FROM public.training_templates;"
"The ""training_templates"" table represents training template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training template was created), ""is_enabled"" (a boolean value representing whether the training template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training template was last updated), ""description"" (a varchar field for the training template's description), ""is_phishing"" (a boolean value indicating if the training template is related to phishing), ""title"" (a varchar field for the title of the training template), ""file_path_id"" (a bigint field representing the ID of the associated document file path, with a foreign key constraint referencing the ""documents"" table), and ""thumbnail_id"" (a bigint field representing the ID of the associated thumbnail image, with a foreign key constraint referencing the ""documents"" table).
The ""documents"" table represents document information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a varchar field for the file extension), ""mime_type"" (a varchar field for the MIME type of the document), ""node_ref"" (a varchar field representing a unique reference to the document), ""original_name"" (a varchar field for the original name of the document), ""path"" (a varchar field for the file path), ""size"" (a bigint field for the size of the document), and ""duration"" (an integer field representing the duration of the document).",Show all training templates with unique original document names.,SELECT DISTINCT D.original_name FROM public.training_templates T INNER JOIN public.documents D ON T.file_path_id = D.id;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",List all users.,SELECT * FROM public.users;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",Find the first and last names of a specific user.,"SELECT firstname, lastname FROM public.users WHERE id = 123;"
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",Retrieve all enabled user accounts.,SELECT * FROM public.users WHERE is_enabled = true;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",Get the total number of users.,SELECT COUNT(*) FROM public.users;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",Show all users with specific email addresses.,"SELECT * FROM public.users WHERE email IN ('user1@example.com', 'user2@example.com');"
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",Find users created after a specific date.,SELECT * FROM public.users WHERE created_at > '2023-01-01';
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",Retrieve the first names of all users.,SELECT firstname FROM public.users;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",List all users who are offended.,SELECT * FROM public.users WHERE offended = true;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",Find users with specific last names.,"SELECT * FROM public.users WHERE lastname IN ('Doe', 'Smith');"
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",Get the IDs of all users with enabled statuses.,SELECT id FROM public.users WHERE is_enabled = true;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",Show all users associated with a specific company.,SELECT * FROM public.users WHERE company_id = 789;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",Retrieve the last names of all users.,SELECT lastname FROM public.users;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",List all users who are compromised.,SELECT * FROM public.users WHERE compromised = true;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",Find users with specific first names.,"SELECT * FROM public.users WHERE firstname IN ('John', 'Jane');"
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",Get the role IDs of all users.,SELECT role_id FROM public.users;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",Show all users associated with a specific project.,SELECT * FROM public.users WHERE project_id = 456;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",Retrieve the IDs of all users with simulated status.,SELECT id FROM public.users WHERE simulated = true;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",List all users with unique company associations.,SELECT DISTINCT company_id FROM public.users;
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",Find users with specific email addresses and compromised status.,"SELECT * FROM public.users WHERE email IN ('user3@example.com', 'user4@example.com') AND compromised = true;"
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",Get the first and last names of users.,"SELECT firstname, lastname FROM public.users;"
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",Show all users associated with specific groups.,"SELECT * FROM public.users U INNER JOIN public.users_groups UG ON U.id = UG.user_id WHERE UG.group_id IN (1, 2);"
"The ""users"" table represents user information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user account was created), ""is_enabled"" (a boolean value representing whether the user account is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user account was last updated), ""email"" (a character varying field for the user's email address, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value indicating if the user is offended, with a default value of false), ""compromised"" (a boolean value indicating if the user is compromised, with a default value of false), and ""simulated"" (a boolean value indicating if the user is simulated, with a default value of false).
The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.",Retrieve the email addresses of all users.,SELECT email FROM public.users;
"The ""campaign_email_template"" table represents the association between campaign templates and email templates. It has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the association was created), ""is_enabled"" (a boolean value representing whether the association is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the association was last updated), ""custom_template"" (a character varying field for the custom template), ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), and ""email_template_id"" (a reference to the ""email_template"" table through a foreign key constraint).
The ""email_template"" table represents email template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the email template's description), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).",List all campaign email templates.,SELECT * FROM public.campaign_email_template;
"The ""campaign_email_template"" table represents the association between campaign templates and email templates. It has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the association was created), ""is_enabled"" (a boolean value representing whether the association is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the association was last updated), ""custom_template"" (a character varying field for the custom template), ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), and ""email_template_id"" (a reference to the ""email_template"" table through a foreign key constraint).
The ""email_template"" table represents email template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the email template's description), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).",Find the custom templates of specific campaign email templates.,"SELECT custom_template FROM public.campaign_email_template WHERE id IN (123, 456);"
"The ""campaign_email_template"" table represents the association between campaign templates and email templates. It has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the association was created), ""is_enabled"" (a boolean value representing whether the association is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the association was last updated), ""custom_template"" (a character varying field for the custom template), ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), and ""email_template_id"" (a reference to the ""email_template"" table through a foreign key constraint).
The ""email_template"" table represents email template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the email template's description), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).",Retrieve all enabled campaign email templates.,SELECT * FROM public.campaign_email_template WHERE is_enabled = true;
"The ""campaign_email_template"" table represents the association between campaign templates and email templates. It has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the association was created), ""is_enabled"" (a boolean value representing whether the association is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the association was last updated), ""custom_template"" (a character varying field for the custom template), ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), and ""email_template_id"" (a reference to the ""email_template"" table through a foreign key constraint).
The ""email_template"" table represents email template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the email template's description), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).",Get the total number of campaign email templates.,SELECT COUNT(*) FROM public.campaign_email_template;
"The ""campaign_email_template"" table represents the association between campaign templates and email templates. It has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the association was created), ""is_enabled"" (a boolean value representing whether the association is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the association was last updated), ""custom_template"" (a character varying field for the custom template), ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), and ""email_template_id"" (a reference to the ""email_template"" table through a foreign key constraint).
The ""email_template"" table represents email template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the email template's description), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).",Show all campaign email templates with specific custom templates.,SELECT * FROM public.campaign_email_template WHERE custom_template LIKE '%security%';
"The ""campaign_email_template"" table represents the association between campaign templates and email templates. It has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the association was created), ""is_enabled"" (a boolean value representing whether the association is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the association was last updated), ""custom_template"" (a character varying field for the custom template), ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), and ""email_template_id"" (a reference to the ""email_template"" table through a foreign key constraint).
The ""email_template"" table represents email template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the email template's description), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).",Find campaign email templates created after a specific date.,SELECT * FROM public.campaign_email_template WHERE created_at > '2023-01-01';
"The ""campaign_email_template"" table represents the association between campaign templates and email templates. It has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the association was created), ""is_enabled"" (a boolean value representing whether the association is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the association was last updated), ""custom_template"" (a character varying field for the custom template), ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), and ""email_template_id"" (a reference to the ""email_template"" table through a foreign key constraint).
The ""email_template"" table represents email template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the email template's description), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).",Retrieve the titles of all email templates.,SELECT title FROM public.email_template;
"The ""campaign_email_template"" table represents the association between campaign templates and email templates. It has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the association was created), ""is_enabled"" (a boolean value representing whether the association is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the association was last updated), ""custom_template"" (a character varying field for the custom template), ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), and ""email_template_id"" (a reference to the ""email_template"" table through a foreign key constraint).
The ""email_template"" table represents email template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the email template's description), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).",List all campaign email templates with specific campaign IDs.,"SELECT * FROM public.campaign_email_template WHERE campaign_id IN (789, 890);"
"The ""campaign_email_template"" table represents the association between campaign templates and email templates. It has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the association was created), ""is_enabled"" (a boolean value representing whether the association is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the association was last updated), ""custom_template"" (a character varying field for the custom template), ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), and ""email_template_id"" (a reference to the ""email_template"" table through a foreign key constraint).
The ""email_template"" table represents email template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the email template's description), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).",Find campaign email templates associated with specific email template IDs.,"SELECT * FROM public.campaign_email_template WHERE email_template_id IN (567, 678);"
"The ""campaign_email_template"" table represents the association between campaign templates and email templates. It has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the association was created), ""is_enabled"" (a boolean value representing whether the association is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the association was last updated), ""custom_template"" (a character varying field for the custom template), ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), and ""email_template_id"" (a reference to the ""email_template"" table through a foreign key constraint).
The ""email_template"" table represents email template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the email template's description), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).",Get the IDs of all campaign email templates with enabled statuses.,SELECT id FROM public.campaign_email_template WHERE is_enabled = true;
"The ""campaign_email_template"" table represents the association between campaign templates and email templates. It has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the association was created), ""is_enabled"" (a boolean value representing whether the association is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the association was last updated), ""custom_template"" (a character varying field for the custom template), ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), and ""email_template_id"" (a reference to the ""email_template"" table through a foreign key constraint).
The ""email_template"" table represents email template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the email template's description), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).",Show all campaign email templates with unique campaign IDs.,SELECT DISTINCT campaign_id FROM public.campaign_email_template;
"The ""campaign_email_template"" table represents the association between campaign templates and email templates. It has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the association was created), ""is_enabled"" (a boolean value representing whether the association is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the association was last updated), ""custom_template"" (a character varying field for the custom template), ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), and ""email_template_id"" (a reference to the ""email_template"" table through a foreign key constraint).
The ""email_template"" table represents email template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the email template's description), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).",Retrieve the descriptions of all email templates.,SELECT description FROM public.email_template;
"The ""campaign_email_template"" table represents the association between campaign templates and email templates. It has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the association was created), ""is_enabled"" (a boolean value representing whether the association is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the association was last updated), ""custom_template"" (a character varying field for the custom template), ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), and ""email_template_id"" (a reference to the ""email_template"" table through a foreign key constraint).
The ""email_template"" table represents email template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the email template's description), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).",List all campaign email templates with specific custom templates and campaign IDs.,"SELECT * FROM public.campaign_email_template WHERE custom_template LIKE '%security%' AND campaign_id IN (123, 456);"
"The ""campaign_email_template"" table represents the association between campaign templates and email templates. It has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the association was created), ""is_enabled"" (a boolean value representing whether the association is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the association was last updated), ""custom_template"" (a character varying field for the custom template), ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), and ""email_template_id"" (a reference to the ""email_template"" table through a foreign key constraint).
The ""email_template"" table represents email template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the email template's description), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).",Find campaign email templates associated with specific attack techniques.,SELECT * FROM public.campaign_email_template CE INNER JOIN public.email_template E ON CE.email_template_id = E.id WHERE E.technique_id = 789;
"The ""campaign_email_template"" table represents the association between campaign templates and email templates. It has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the association was created), ""is_enabled"" (a boolean value representing whether the association is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the association was last updated), ""custom_template"" (a character varying field for the custom template), ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), and ""email_template_id"" (a reference to the ""email_template"" table through a foreign key constraint).
The ""email_template"" table represents email template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the email template's description), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).",Show all campaign email templates with unique email template IDs.,SELECT DISTINCT email_template_id FROM public.campaign_email_template;
"The ""campaign_email_template"" table represents the association between campaign templates and email templates. It has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the association was created), ""is_enabled"" (a boolean value representing whether the association is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the association was last updated), ""custom_template"" (a character varying field for the custom template), ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), and ""email_template_id"" (a reference to the ""email_template"" table through a foreign key constraint).
The ""email_template"" table represents email template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the email template's description), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).",Retrieve the titles and descriptions of email templates.,"SELECT title, description FROM public.email_template;"
"The ""campaign_email_template"" table represents the association between campaign templates and email templates. It has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the association was created), ""is_enabled"" (a boolean value representing whether the association is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the association was last updated), ""custom_template"" (a character varying field for the custom template), ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), and ""email_template_id"" (a reference to the ""email_template"" table through a foreign key constraint).
The ""email_template"" table represents email template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the email template's description), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).",List all campaign email templates with specific compromise rates.,SELECT * FROM public.campaign_email_template CE INNER JOIN public.email_template E ON CE.email_template_id = E.id WHERE E.compromise_rate > 0.5;
"The ""campaign_email_template"" table represents the association between campaign templates and email templates. It has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the association was created), ""is_enabled"" (a boolean value representing whether the association is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the association was last updated), ""custom_template"" (a character varying field for the custom template), ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), and ""email_template_id"" (a reference to the ""email_template"" table through a foreign key constraint).
The ""email_template"" table represents email template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the email template's description), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).",Find campaign email templates associated with specific brands.,SELECT * FROM public.campaign_email_template CE INNER JOIN public.email_template E ON CE.email_template_id = E.id WHERE E.brand = 'ABC Inc.';
"The ""campaign_email_template"" table represents the association between campaign templates and email templates. It has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the association was created), ""is_enabled"" (a boolean value representing whether the association is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the association was last updated), ""custom_template"" (a character varying field for the custom template), ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), and ""email_template_id"" (a reference to the ""email_template"" table through a foreign key constraint).
The ""email_template"" table represents email template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the email template's description), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).",Get the custom templates and email template IDs of campaign email templates.,"SELECT custom_template, email_template_id FROM public.campaign_email_template;"
"The ""campaign_email_template"" table represents the association between campaign templates and email templates. It has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the association was created), ""is_enabled"" (a boolean value representing whether the association is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the association was last updated), ""custom_template"" (a character varying field for the custom template), ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), and ""email_template_id"" (a reference to the ""email_template"" table through a foreign key constraint).
The ""email_template"" table represents email template information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a varchar field for the email template's description), ""file_path"" (a varchar field for the file path of the email template), ""title"" (a varchar field for the title of the email template), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a varchar field for the brand associated with the email template), ""industry"" (a varchar field for the industry associated with the email template), ""source"" (a varchar field for the source of the email template), ""subject"" (a varchar field for the subject of the email template), ""theme"" (a varchar field for the theme of the email template), ""compromise_rate"" (a double precision field representing the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).",Show all campaign email templates with unique subject lines.,SELECT DISTINCT E.subject FROM public.campaign_email_template CE INNER JOIN public.email_template E ON CE.email_template_id = E.id;
"The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",List all user-group associations.,SELECT * FROM public.users_groups;
"The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Find the users belonging to specific groups.,"SELECT user_id FROM public.users_groups WHERE group_id IN (123, 456);"
"The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Retrieve all enabled user-group associations.,SELECT * FROM public.users_groups;
"The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Get the total number of user-group associations.,SELECT COUNT(*) FROM public.users_groups;
"The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Show all user-group associations with specific users.,"SELECT * FROM public.users_groups WHERE user_id IN (789, 890);"
"The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Retrieve the group IDs of all user-group associations.,SELECT group_id FROM public.users_groups;
"The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",List all user-group associations with specific groups.,"SELECT * FROM public.users_groups WHERE group_id IN (1, 2);"
"The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Find user-group associations associated with specific users.,"SELECT * FROM public.users_groups WHERE user_id IN (456, 789);"
"The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Get the user IDs of all user-group associations.,SELECT user_id FROM public.users_groups;
"The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Show all user-group associations with unique user IDs.,SELECT DISTINCT user_id FROM public.users_groups;
"The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Retrieve the descriptions of all groups.,SELECT description FROM public.groups;
"The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Find user-group associations associated with specific groups.,"SELECT * FROM public.users_groups WHERE group_id IN (123, 456) AND user_id IN (789, 890);"
"The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Get the project IDs associated with specific groups.,"SELECT project_id FROM public.groups WHERE id IN (1, 2);"
"The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Show all user-group associations with unique group IDs.,SELECT DISTINCT group_id FROM public.users_groups;
"The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Retrieve the names of all groups.,SELECT name FROM public.groups;
"The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",List all user-group associations with specific user and group combinations.,SELECT * FROM public.users_groups WHERE (user_id = 123 AND group_id = 1) OR (user_id = 456 AND group_id = 2);
"The ""users_groups"" table represents a many-to-many relationship between users and groups. It has two columns, ""user_id"" (a reference to the ""users"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""user_id"" and ""group_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Find user-group associations associated with specific project IDs.,"SELECT * FROM public.groups WHERE project_id IN (789, 890);"
"The ""users_in_campaigns"" table represents the association between users and campaigns, including various attributes related to user participation in campaigns. It has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean field indicating whether the user was caught in the campaign, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean field indicating whether the user opened campaign emails, with a default value of false), ""sent"" (a boolean field indicating whether emails were sent to the user as part of the campaign, with a default value of false), ""trained"" (a boolean field indicating whether the user completed training, with a default value of false), ""trained_at"" (a timestamp indicating when the user completed training), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean field indicating whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean field indicating whether training is in progress for the user, with a default value of false). The combination of ""campaign_id"" and ""user_id"" forms the primary key for this table.
The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), and various other fields related to campaign details, such as name, owner, subject, etc. It also includes foreign key constraints to other related tables.
An index named ""project_index"" is created on the ""campaign"" table, specifically on the ""project_id"" column.",List all users associated with specific campaigns.,"SELECT * FROM public.users_in_campaigns WHERE campaign_id IN (123, 456);"
"The ""users_in_campaigns"" table represents the association between users and campaigns, including various attributes related to user participation in campaigns. It has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean field indicating whether the user was caught in the campaign, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean field indicating whether the user opened campaign emails, with a default value of false), ""sent"" (a boolean field indicating whether emails were sent to the user as part of the campaign, with a default value of false), ""trained"" (a boolean field indicating whether the user completed training, with a default value of false), ""trained_at"" (a timestamp indicating when the user completed training), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean field indicating whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean field indicating whether training is in progress for the user, with a default value of false). The combination of ""campaign_id"" and ""user_id"" forms the primary key for this table.
The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), and various other fields related to campaign details, such as name, owner, subject, etc. It also includes foreign key constraints to other related tables.
An index named ""project_index"" is created on the ""campaign"" table, specifically on the ""project_id"" column.",Find the campaigns in which specific users participated and were caught.,"SELECT campaign_id FROM public.users_in_campaigns WHERE user_id IN (789, 890) AND caught = true;"
"The ""users_in_campaigns"" table represents the association between users and campaigns, including various attributes related to user participation in campaigns. It has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean field indicating whether the user was caught in the campaign, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean field indicating whether the user opened campaign emails, with a default value of false), ""sent"" (a boolean field indicating whether emails were sent to the user as part of the campaign, with a default value of false), ""trained"" (a boolean field indicating whether the user completed training, with a default value of false), ""trained_at"" (a timestamp indicating when the user completed training), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean field indicating whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean field indicating whether training is in progress for the user, with a default value of false). The combination of ""campaign_id"" and ""user_id"" forms the primary key for this table.
The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), and various other fields related to campaign details, such as name, owner, subject, etc. It also includes foreign key constraints to other related tables.
An index named ""project_index"" is created on the ""campaign"" table, specifically on the ""project_id"" column.",Retrieve all enabled campaigns.,SELECT * FROM public.campaign WHERE is_enabled = true;
"The ""users_in_campaigns"" table represents the association between users and campaigns, including various attributes related to user participation in campaigns. It has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean field indicating whether the user was caught in the campaign, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean field indicating whether the user opened campaign emails, with a default value of false), ""sent"" (a boolean field indicating whether emails were sent to the user as part of the campaign, with a default value of false), ""trained"" (a boolean field indicating whether the user completed training, with a default value of false), ""trained_at"" (a timestamp indicating when the user completed training), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean field indicating whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean field indicating whether training is in progress for the user, with a default value of false). The combination of ""campaign_id"" and ""user_id"" forms the primary key for this table.
The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), and various other fields related to campaign details, such as name, owner, subject, etc. It also includes foreign key constraints to other related tables.
An index named ""project_index"" is created on the ""campaign"" table, specifically on the ""project_id"" column.",Get the total number of users in campaigns.,SELECT COUNT(*) FROM public.users_in_campaigns;
"The ""users_in_campaigns"" table represents the association between users and campaigns, including various attributes related to user participation in campaigns. It has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean field indicating whether the user was caught in the campaign, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean field indicating whether the user opened campaign emails, with a default value of false), ""sent"" (a boolean field indicating whether emails were sent to the user as part of the campaign, with a default value of false), ""trained"" (a boolean field indicating whether the user completed training, with a default value of false), ""trained_at"" (a timestamp indicating when the user completed training), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean field indicating whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean field indicating whether training is in progress for the user, with a default value of false). The combination of ""campaign_id"" and ""user_id"" forms the primary key for this table.
The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), and various other fields related to campaign details, such as name, owner, subject, etc. It also includes foreign key constraints to other related tables.
An index named ""project_index"" is created on the ""campaign"" table, specifically on the ""project_id"" column.",Show all users who completed training in specific campaigns.,"SELECT user_id FROM public.users_in_campaigns WHERE campaign_id IN (123, 456) AND trained = true;"
"The ""users_in_campaigns"" table represents the association between users and campaigns, including various attributes related to user participation in campaigns. It has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean field indicating whether the user was caught in the campaign, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean field indicating whether the user opened campaign emails, with a default value of false), ""sent"" (a boolean field indicating whether emails were sent to the user as part of the campaign, with a default value of false), ""trained"" (a boolean field indicating whether the user completed training, with a default value of false), ""trained_at"" (a timestamp indicating when the user completed training), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean field indicating whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean field indicating whether training is in progress for the user, with a default value of false). The combination of ""campaign_id"" and ""user_id"" forms the primary key for this table.
The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), and various other fields related to campaign details, such as name, owner, subject, etc. It also includes foreign key constraints to other related tables.
An index named ""project_index"" is created on the ""campaign"" table, specifically on the ""project_id"" column.",Find campaigns created after a specific date.,SELECT * FROM public.campaign WHERE created_at > '2023-01-01';
"The ""users_in_campaigns"" table represents the association between users and campaigns, including various attributes related to user participation in campaigns. It has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean field indicating whether the user was caught in the campaign, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean field indicating whether the user opened campaign emails, with a default value of false), ""sent"" (a boolean field indicating whether emails were sent to the user as part of the campaign, with a default value of false), ""trained"" (a boolean field indicating whether the user completed training, with a default value of false), ""trained_at"" (a timestamp indicating when the user completed training), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean field indicating whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean field indicating whether training is in progress for the user, with a default value of false). The combination of ""campaign_id"" and ""user_id"" forms the primary key for this table.
The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), and various other fields related to campaign details, such as name, owner, subject, etc. It also includes foreign key constraints to other related tables.
An index named ""project_index"" is created on the ""campaign"" table, specifically on the ""project_id"" column.",Retrieve the campaign IDs of all user-campaign associations.,SELECT campaign_id FROM public.users_in_campaigns;
"The ""users_in_campaigns"" table represents the association between users and campaigns, including various attributes related to user participation in campaigns. It has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean field indicating whether the user was caught in the campaign, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean field indicating whether the user opened campaign emails, with a default value of false), ""sent"" (a boolean field indicating whether emails were sent to the user as part of the campaign, with a default value of false), ""trained"" (a boolean field indicating whether the user completed training, with a default value of false), ""trained_at"" (a timestamp indicating when the user completed training), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean field indicating whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean field indicating whether training is in progress for the user, with a default value of false). The combination of ""campaign_id"" and ""user_id"" forms the primary key for this table.
The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), and various other fields related to campaign details, such as name, owner, subject, etc. It also includes foreign key constraints to other related tables.
An index named ""project_index"" is created on the ""campaign"" table, specifically on the ""project_id"" column.",List all users who were caught in campaigns and opened campaign emails.,SELECT * FROM public.users_in_campaigns WHERE caught = true AND opened = true;
"The ""users_in_campaigns"" table represents the association between users and campaigns, including various attributes related to user participation in campaigns. It has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean field indicating whether the user was caught in the campaign, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean field indicating whether the user opened campaign emails, with a default value of false), ""sent"" (a boolean field indicating whether emails were sent to the user as part of the campaign, with a default value of false), ""trained"" (a boolean field indicating whether the user completed training, with a default value of false), ""trained_at"" (a timestamp indicating when the user completed training), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean field indicating whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean field indicating whether training is in progress for the user, with a default value of false). The combination of ""campaign_id"" and ""user_id"" forms the primary key for this table.
The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), and various other fields related to campaign details, such as name, owner, subject, etc. It also includes foreign key constraints to other related tables.
An index named ""project_index"" is created on the ""campaign"" table, specifically on the ""project_id"" column.",Find campaigns associated with specific users and training in progress.,"SELECT campaign_id FROM public.users_in_campaigns WHERE user_id IN (123, 456) AND training_in_progress = true;"
"The ""users_in_campaigns"" table represents the association between users and campaigns, including various attributes related to user participation in campaigns. It has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean field indicating whether the user was caught in the campaign, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean field indicating whether the user opened campaign emails, with a default value of false), ""sent"" (a boolean field indicating whether emails were sent to the user as part of the campaign, with a default value of false), ""trained"" (a boolean field indicating whether the user completed training, with a default value of false), ""trained_at"" (a timestamp indicating when the user completed training), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean field indicating whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean field indicating whether training is in progress for the user, with a default value of false). The combination of ""campaign_id"" and ""user_id"" forms the primary key for this table.
The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), and various other fields related to campaign details, such as name, owner, subject, etc. It also includes foreign key constraints to other related tables.
An index named ""project_index"" is created on the ""campaign"" table, specifically on the ""project_id"" column.",Get the user IDs of all users in campaigns.,SELECT user_id FROM public.users_in_campaigns;
"The ""users_in_campaigns"" table represents the association between users and campaigns, including various attributes related to user participation in campaigns. It has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean field indicating whether the user was caught in the campaign, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean field indicating whether the user opened campaign emails, with a default value of false), ""sent"" (a boolean field indicating whether emails were sent to the user as part of the campaign, with a default value of false), ""trained"" (a boolean field indicating whether the user completed training, with a default value of false), ""trained_at"" (a timestamp indicating when the user completed training), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean field indicating whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean field indicating whether training is in progress for the user, with a default value of false). The combination of ""campaign_id"" and ""user_id"" forms the primary key for this table.
The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), and various other fields related to campaign details, such as name, owner, subject, etc. It also includes foreign key constraints to other related tables.
An index named ""project_index"" is created on the ""campaign"" table, specifically on the ""project_id"" column.",Show all users who completed training in campaigns with enabled statuses.,SELECT user_id FROM public.users_in_campaigns UC INNER JOIN public.campaign C ON UC.campaign_id = C.id WHERE C.is_enabled = true AND UC.trained = true;
"The ""users_in_campaigns"" table represents the association between users and campaigns, including various attributes related to user participation in campaigns. It has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean field indicating whether the user was caught in the campaign, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean field indicating whether the user opened campaign emails, with a default value of false), ""sent"" (a boolean field indicating whether emails were sent to the user as part of the campaign, with a default value of false), ""trained"" (a boolean field indicating whether the user completed training, with a default value of false), ""trained_at"" (a timestamp indicating when the user completed training), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean field indicating whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean field indicating whether training is in progress for the user, with a default value of false). The combination of ""campaign_id"" and ""user_id"" forms the primary key for this table.
The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), and various other fields related to campaign details, such as name, owner, subject, etc. It also includes foreign key constraints to other related tables.
An index named ""project_index"" is created on the ""campaign"" table, specifically on the ""project_id"" column.",Retrieve the names of all campaigns.,SELECT name FROM public.campaign;
"The ""users_in_campaigns"" table represents the association between users and campaigns, including various attributes related to user participation in campaigns. It has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean field indicating whether the user was caught in the campaign, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean field indicating whether the user opened campaign emails, with a default value of false), ""sent"" (a boolean field indicating whether emails were sent to the user as part of the campaign, with a default value of false), ""trained"" (a boolean field indicating whether the user completed training, with a default value of false), ""trained_at"" (a timestamp indicating when the user completed training), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean field indicating whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean field indicating whether training is in progress for the user, with a default value of false). The combination of ""campaign_id"" and ""user_id"" forms the primary key for this table.
The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), and various other fields related to campaign details, such as name, owner, subject, etc. It also includes foreign key constraints to other related tables.
An index named ""project_index"" is created on the ""campaign"" table, specifically on the ""project_id"" column.",List all users in campaigns with specific caught and trained statuses.,SELECT * FROM public.users_in_campaigns WHERE caught = true AND trained = true;
"The ""users_in_campaigns"" table represents the association between users and campaigns, including various attributes related to user participation in campaigns. It has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean field indicating whether the user was caught in the campaign, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean field indicating whether the user opened campaign emails, with a default value of false), ""sent"" (a boolean field indicating whether emails were sent to the user as part of the campaign, with a default value of false), ""trained"" (a boolean field indicating whether the user completed training, with a default value of false), ""trained_at"" (a timestamp indicating when the user completed training), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean field indicating whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean field indicating whether training is in progress for the user, with a default value of false). The combination of ""campaign_id"" and ""user_id"" forms the primary key for this table.
The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), and various other fields related to campaign details, such as name, owner, subject, etc. It also includes foreign key constraints to other related tables.
An index named ""project_index"" is created on the ""campaign"" table, specifically on the ""project_id"" column.",Find campaigns associated with specific training IDs.,"SELECT * FROM public.campaign C WHERE EXISTS (SELECT 1 FROM public.users_in_campaigns UC WHERE UC.campaign_id = C.id AND UC.training_id IN (123, 456));"
"The ""users_in_campaigns"" table represents the association between users and campaigns, including various attributes related to user participation in campaigns. It has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean field indicating whether the user was caught in the campaign, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean field indicating whether the user opened campaign emails, with a default value of false), ""sent"" (a boolean field indicating whether emails were sent to the user as part of the campaign, with a default value of false), ""trained"" (a boolean field indicating whether the user completed training, with a default value of false), ""trained_at"" (a timestamp indicating when the user completed training), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean field indicating whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean field indicating whether training is in progress for the user, with a default value of false). The combination of ""campaign_id"" and ""user_id"" forms the primary key for this table.
The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), and various other fields related to campaign details, such as name, owner, subject, etc. It also includes foreign key constraints to other related tables.
An index named ""project_index"" is created on the ""campaign"" table, specifically on the ""project_id"" column.",Get the campaign IDs of all user-campaign associations with training sent.,SELECT campaign_id FROM public.users_in_campaigns WHERE training_sent = true;
"The ""users_in_campaigns"" table represents the association between users and campaigns, including various attributes related to user participation in campaigns. It has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean field indicating whether the user was caught in the campaign, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean field indicating whether the user opened campaign emails, with a default value of false), ""sent"" (a boolean field indicating whether emails were sent to the user as part of the campaign, with a default value of false), ""trained"" (a boolean field indicating whether the user completed training, with a default value of false), ""trained_at"" (a timestamp indicating when the user completed training), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean field indicating whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean field indicating whether training is in progress for the user, with a default value of false). The combination of ""campaign_id"" and ""user_id"" forms the primary key for this table.
The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), and various other fields related to campaign details, such as name, owner, subject, etc. It also includes foreign key constraints to other related tables.
An index named ""project_index"" is created on the ""campaign"" table, specifically on the ""project_id"" column.",Show all users who completed training in campaigns with training sent.,SELECT user_id FROM public.users_in_campaigns WHERE trained = true AND training_sent = true;
"The ""users_in_campaigns"" table represents the association between users and campaigns, including various attributes related to user participation in campaigns. It has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean field indicating whether the user was caught in the campaign, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean field indicating whether the user opened campaign emails, with a default value of false), ""sent"" (a boolean field indicating whether emails were sent to the user as part of the campaign, with a default value of false), ""trained"" (a boolean field indicating whether the user completed training, with a default value of false), ""trained_at"" (a timestamp indicating when the user completed training), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean field indicating whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean field indicating whether training is in progress for the user, with a default value of false). The combination of ""campaign_id"" and ""user_id"" forms the primary key for this table.
The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), and various other fields related to campaign details, such as name, owner, subject, etc. It also includes foreign key constraints to other related tables.
An index named ""project_index"" is created on the ""campaign"" table, specifically on the ""project_id"" column.",Retrieve the names and owners of campaigns.,"SELECT name, owner FROM public.campaign;"
"The ""users_in_campaigns"" table represents the association between users and campaigns, including various attributes related to user participation in campaigns. It has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean field indicating whether the user was caught in the campaign, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean field indicating whether the user opened campaign emails, with a default value of false), ""sent"" (a boolean field indicating whether emails were sent to the user as part of the campaign, with a default value of false), ""trained"" (a boolean field indicating whether the user completed training, with a default value of false), ""trained_at"" (a timestamp indicating when the user completed training), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean field indicating whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean field indicating whether training is in progress for the user, with a default value of false). The combination of ""campaign_id"" and ""user_id"" forms the primary key for this table.
The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), and various other fields related to campaign details, such as name, owner, subject, etc. It also includes foreign key constraints to other related tables.
An index named ""project_index"" is created on the ""campaign"" table, specifically on the ""project_id"" column.",List all users who were caught in campaigns with specific campaign and user combinations.,SELECT * FROM public.users_in_campaigns WHERE (campaign_id = 123 AND user_id = 789) OR (campaign_id = 456 AND user_id = 890);
"The ""users_in_campaigns"" table represents the association between users and campaigns, including various attributes related to user participation in campaigns. It has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean field indicating whether the user was caught in the campaign, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean field indicating whether the user opened campaign emails, with a default value of false), ""sent"" (a boolean field indicating whether emails were sent to the user as part of the campaign, with a default value of false), ""trained"" (a boolean field indicating whether the user completed training, with a default value of false), ""trained_at"" (a timestamp indicating when the user completed training), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean field indicating whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean field indicating whether training is in progress for the user, with a default value of false). The combination of ""campaign_id"" and ""user_id"" forms the primary key for this table.
The ""campaign"" table represents campaign information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), and various other fields related to campaign details, such as name, owner, subject, etc. It also includes foreign key constraints to other related tables.
An index named ""project_index"" is created on the ""campaign"" table, specifically on the ""project_id"" column.",Find campaigns associated with specific project IDs.,"SELECT * FROM public.campaign WHERE project_id IN (789, 890);"
"The ""admins_groups"" table represents the association between administrators and groups. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""admin_id"" and ""group_id"" forms the primary key for this table.
The ""admins_projects"" table represents the association between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",List all administrators associated with specific groups.,"SELECT * FROM public.admins_groups WHERE group_id IN (123, 456);"
"The ""admins_groups"" table represents the association between administrators and groups. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""admin_id"" and ""group_id"" forms the primary key for this table.
The ""admins_projects"" table represents the association between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Find the groups to which specific administrators belong.,"SELECT group_id FROM public.admins_groups WHERE admin_id IN (789, 890);"
"The ""admins_groups"" table represents the association between administrators and groups. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""admin_id"" and ""group_id"" forms the primary key for this table.
The ""admins_projects"" table represents the association between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Retrieve all enabled groups.,SELECT * FROM public.groups WHERE is_enabled = true;
"The ""admins_groups"" table represents the association between administrators and groups. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""admin_id"" and ""group_id"" forms the primary key for this table.
The ""admins_projects"" table represents the association between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Get the total number of administrators in specific groups.,SELECT COUNT(*) FROM public.admins_groups;
"The ""admins_groups"" table represents the association between administrators and groups. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""admin_id"" and ""group_id"" forms the primary key for this table.
The ""admins_projects"" table represents the association between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Show all administrators associated with specific projects.,"SELECT * FROM public.admins_projects WHERE project_id IN (123, 456);"
"The ""admins_groups"" table represents the association between administrators and groups. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""admin_id"" and ""group_id"" forms the primary key for this table.
The ""admins_projects"" table represents the association between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Find groups created after a specific date.,SELECT * FROM public.groups WHERE created_at > '2023-01-01';
"The ""admins_groups"" table represents the association between administrators and groups. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""admin_id"" and ""group_id"" forms the primary key for this table.
The ""admins_projects"" table represents the association between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Retrieve the group IDs of all administrator-group associations.,SELECT group_id FROM public.admins_groups;
"The ""admins_groups"" table represents the association between administrators and groups. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""admin_id"" and ""group_id"" forms the primary key for this table.
The ""admins_projects"" table represents the association between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",List all administrators associated with specific groups and projects.,"SELECT * FROM public.admins_groups WHERE group_id IN (1, 2) AND admin_id IN (3, 4);"
"The ""admins_groups"" table represents the association between administrators and groups. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""admin_id"" and ""group_id"" forms the primary key for this table.
The ""admins_projects"" table represents the association between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Find administrators associated with specific projects and groups.,"SELECT * FROM public.admins_projects WHERE project_id IN (789, 890) AND admin_id IN (123, 456);"
"The ""admins_groups"" table represents the association between administrators and groups. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""admin_id"" and ""group_id"" forms the primary key for this table.
The ""admins_projects"" table represents the association between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Get the administrator IDs of all administrator-group associations.,SELECT admin_id FROM public.admins_groups;
"The ""admins_groups"" table represents the association between administrators and groups. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""admin_id"" and ""group_id"" forms the primary key for this table.
The ""admins_projects"" table represents the association between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Show all administrators who belong to groups with enabled statuses.,SELECT admin_id FROM public.admins_groups AG INNER JOIN public.groups G ON AG.group_id = G.id WHERE G.is_enabled = true;
"The ""admins_groups"" table represents the association between administrators and groups. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""admin_id"" and ""group_id"" forms the primary key for this table.
The ""admins_projects"" table represents the association between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Retrieve the names of all groups.,SELECT name FROM public.groups;
"The ""admins_groups"" table represents the association between administrators and groups. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""admin_id"" and ""group_id"" forms the primary key for this table.
The ""admins_projects"" table represents the association between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",List all administrators who belong to groups with specific descriptions.,SELECT * FROM public.admins_groups AG INNER JOIN public.groups G ON AG.group_id = G.id WHERE G.description = 'Example';
"The ""admins_groups"" table represents the association between administrators and groups. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""admin_id"" and ""group_id"" forms the primary key for this table.
The ""admins_projects"" table represents the association between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Find groups associated with specific administrators and projects.,"SELECT * FROM public.admins_projects WHERE admin_id IN (123, 456) AND project_id IN (789, 890);"
"The ""admins_groups"" table represents the association between administrators and groups. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""admin_id"" and ""group_id"" forms the primary key for this table.
The ""admins_projects"" table represents the association between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Get the project IDs associated with specific groups.,"SELECT project_id FROM public.groups WHERE id IN (1, 2);"
"The ""admins_groups"" table represents the association between administrators and groups. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""admin_id"" and ""group_id"" forms the primary key for this table.
The ""admins_projects"" table represents the association between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Show all administrators who belong to groups with unique group IDs.,SELECT DISTINCT admin_id FROM public.admins_groups;
"The ""admins_groups"" table represents the association between administrators and groups. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""admin_id"" and ""group_id"" forms the primary key for this table.
The ""admins_projects"" table represents the association between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Retrieve the descriptions of all groups.,SELECT description FROM public.groups;
"The ""admins_groups"" table represents the association between administrators and groups. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""admin_id"" and ""group_id"" forms the primary key for this table.
The ""admins_projects"" table represents the association between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",List all administrators who belong to groups with specific names.,SELECT * FROM public.admins_groups AG INNER JOIN public.groups G ON AG.group_id = G.id WHERE G.name = 'Example Group';
"The ""admins_groups"" table represents the association between administrators and groups. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""group_id"" (a reference to the ""groups"" table through a foreign key constraint). The combination of ""admin_id"" and ""group_id"" forms the primary key for this table.
The ""admins_projects"" table represents the association between administrators and projects. It has two columns, ""admin_id"" (a reference to the ""admins"" table through a foreign key constraint) and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint). The combination of ""admin_id"" and ""project_id"" forms the primary key for this table.
The ""groups"" table represents group information and has multiple columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the group was created), ""is_enabled"" (a boolean value representing whether the group is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the group was last updated), ""description"" (a varchar field for the group's description), ""name"" (a varchar field for the group's name), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).",Find groups associated with specific administrator IDs.,"SELECT * FROM public.admins_groups WHERE admin_id IN (123, 456);"
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the technique was created), ""is_enabled"" (a boolean value representing whether the technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the technique was last updated), ""description"" (a varchar field for describing the technique), ""icon"" (a varchar field for an icon representing the technique), and ""name"" (a varchar field with a unique constraint representing the name of the technique).",List all offended techniques in a specific project.,SELECT * FROM public.offended_techniques WHERE project_id = 123;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the technique was created), ""is_enabled"" (a boolean value representing whether the technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the technique was last updated), ""description"" (a varchar field for describing the technique), ""icon"" (a varchar field for an icon representing the technique), and ""name"" (a varchar field with a unique constraint representing the name of the technique).",Find the count of offenses for a specific technique in a project.,SELECT count FROM public.offended_techniques WHERE attack_technique_id = 456 AND project_id = 123;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the technique was created), ""is_enabled"" (a boolean value representing whether the technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the technique was last updated), ""description"" (a varchar field for describing the technique), ""icon"" (a varchar field for an icon representing the technique), and ""name"" (a varchar field with a unique constraint representing the name of the technique).",Retrieve all enabled attack techniques.,SELECT * FROM public.attack_techniques WHERE is_enabled = true;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the technique was created), ""is_enabled"" (a boolean value representing whether the technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the technique was last updated), ""description"" (a varchar field for describing the technique), ""icon"" (a varchar field for an icon representing the technique), and ""name"" (a varchar field with a unique constraint representing the name of the technique).",Get the total number of offended techniques.,SELECT COUNT(*) FROM public.offended_techniques;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the technique was created), ""is_enabled"" (a boolean value representing whether the technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the technique was last updated), ""description"" (a varchar field for describing the technique), ""icon"" (a varchar field for an icon representing the technique), and ""name"" (a varchar field with a unique constraint representing the name of the technique).",Show all offended techniques with a count greater than a specific value.,SELECT * FROM public.offended_techniques WHERE count > 5;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the technique was created), ""is_enabled"" (a boolean value representing whether the technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the technique was last updated), ""description"" (a varchar field for describing the technique), ""icon"" (a varchar field for an icon representing the technique), and ""name"" (a varchar field with a unique constraint representing the name of the technique).",Find techniques created after a specific date.,SELECT * FROM public.attack_techniques WHERE created_at > '2023-01-01';
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the technique was created), ""is_enabled"" (a boolean value representing whether the technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the technique was last updated), ""description"" (a varchar field for describing the technique), ""icon"" (a varchar field for an icon representing the technique), and ""name"" (a varchar field with a unique constraint representing the name of the technique).",Retrieve the technique IDs of all offended technique entries.,SELECT attack_technique_id FROM public.offended_techniques;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the technique was created), ""is_enabled"" (a boolean value representing whether the technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the technique was last updated), ""description"" (a varchar field for describing the technique), ""icon"" (a varchar field for an icon representing the technique), and ""name"" (a varchar field with a unique constraint representing the name of the technique).",List all offended techniques in a specific project with counts.,SELECT * FROM public.offended_techniques WHERE project_id = 123 AND count IS NOT NULL;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the technique was created), ""is_enabled"" (a boolean value representing whether the technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the technique was last updated), ""description"" (a varchar field for describing the technique), ""icon"" (a varchar field for an icon representing the technique), and ""name"" (a varchar field with a unique constraint representing the name of the technique).",Find the names of all enabled attack techniques.,SELECT name FROM public.attack_techniques WHERE is_enabled = true;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the technique was created), ""is_enabled"" (a boolean value representing whether the technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the technique was last updated), ""description"" (a varchar field for describing the technique), ""icon"" (a varchar field for an icon representing the technique), and ""name"" (a varchar field with a unique constraint representing the name of the technique).",Get the project IDs associated with specific offended techniques.,"SELECT project_id FROM public.offended_techniques WHERE attack_technique_id IN (1, 2);"
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the technique was created), ""is_enabled"" (a boolean value representing whether the technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the technique was last updated), ""description"" (a varchar field for describing the technique), ""icon"" (a varchar field for an icon representing the technique), and ""name"" (a varchar field with a unique constraint representing the name of the technique).",Show all offended techniques with unique IDs.,SELECT DISTINCT id FROM public.offended_techniques;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the technique was created), ""is_enabled"" (a boolean value representing whether the technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the technique was last updated), ""description"" (a varchar field for describing the technique), ""icon"" (a varchar field for an icon representing the technique), and ""name"" (a varchar field with a unique constraint representing the name of the technique).",Retrieve the descriptions of all attack techniques.,SELECT description FROM public.attack_techniques;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the technique was created), ""is_enabled"" (a boolean value representing whether the technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the technique was last updated), ""description"" (a varchar field for describing the technique), ""icon"" (a varchar field for an icon representing the technique), and ""name"" (a varchar field with a unique constraint representing the name of the technique).",List all offended techniques with counts greater than specific values.,SELECT * FROM public.offended_techniques WHERE count > 10 AND count < 20;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the technique was created), ""is_enabled"" (a boolean value representing whether the technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the technique was last updated), ""description"" (a varchar field for describing the technique), ""icon"" (a varchar field for an icon representing the technique), and ""name"" (a varchar field with a unique constraint representing the name of the technique).",Find techniques associated with specific project IDs and count values.,"SELECT * FROM public.offended_techniques WHERE project_id IN (123, 456) AND count BETWEEN 5 AND 10;"
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the technique was created), ""is_enabled"" (a boolean value representing whether the technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the technique was last updated), ""description"" (a varchar field for describing the technique), ""icon"" (a varchar field for an icon representing the technique), and ""name"" (a varchar field with a unique constraint representing the name of the technique).",Get the count of offenses for a specific technique in projects.,"SELECT attack_technique_id, project_id, count FROM public.offended_techniques WHERE attack_technique_id = 123;"
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the technique was created), ""is_enabled"" (a boolean value representing whether the technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the technique was last updated), ""description"" (a varchar field for describing the technique), ""icon"" (a varchar field for an icon representing the technique), and ""name"" (a varchar field with a unique constraint representing the name of the technique).",Show all offended techniques with specific names.,SELECT * FROM public.offended_techniques OT INNER JOIN public.attack_techniques AT ON OT.attack_technique_id = AT.id WHERE AT.name = 'Example Technique';
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the technique was created), ""is_enabled"" (a boolean value representing whether the technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the technique was last updated), ""description"" (a varchar field for describing the technique), ""icon"" (a varchar field for an icon representing the technique), and ""name"" (a varchar field with a unique constraint representing the name of the technique).",Retrieve the names of attack techniques with unique names.,SELECT DISTINCT name FROM public.attack_techniques;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the technique was created), ""is_enabled"" (a boolean value representing whether the technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the technique was last updated), ""description"" (a varchar field for describing the technique), ""icon"" (a varchar field for an icon representing the technique), and ""name"" (a varchar field with a unique constraint representing the name of the technique).",List all offended techniques associated with specific attack technique IDs.,"SELECT * FROM public.offended_techniques WHERE attack_technique_id IN (1, 2, 3);"
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""attack_techniques"" table represents attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the technique was created), ""is_enabled"" (a boolean value representing whether the technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the technique was last updated), ""description"" (a varchar field for describing the technique), ""icon"" (a varchar field for an icon representing the technique), and ""name"" (a varchar field with a unique constraint representing the name of the technique).",Find the project IDs associated with specific offended techniques.,"SELECT project_id FROM public.offended_techniques WHERE id IN (1, 2, 3);"
"The ""training_hub_templates"" table represents the association between training hubs and training templates. It has two columns, ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint) and ""template_id"" (a reference to the ""training_templates"" table through a foreign key constraint). The combination of ""training_id"" and ""template_id"" forms the primary key for this table.
The ""training_hub"" table represents training hubs and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",List all training templates associated with a specific training hub.,SELECT * FROM public.training_hub_templates WHERE training_id = 123;
"The ""training_hub_templates"" table represents the association between training hubs and training templates. It has two columns, ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint) and ""template_id"" (a reference to the ""training_templates"" table through a foreign key constraint). The combination of ""training_id"" and ""template_id"" forms the primary key for this table.
The ""training_hub"" table represents training hubs and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Find the training hub that has specific training templates.,"SELECT training_id FROM public.training_hub_templates WHERE template_id IN (456, 789);"
"The ""training_hub_templates"" table represents the association between training hubs and training templates. It has two columns, ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint) and ""template_id"" (a reference to the ""training_templates"" table through a foreign key constraint). The combination of ""training_id"" and ""template_id"" forms the primary key for this table.
The ""training_hub"" table represents training hubs and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Retrieve all enabled training hubs.,SELECT * FROM public.training_hub WHERE is_enabled = true;
"The ""training_hub_templates"" table represents the association between training hubs and training templates. It has two columns, ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint) and ""template_id"" (a reference to the ""training_templates"" table through a foreign key constraint). The combination of ""training_id"" and ""template_id"" forms the primary key for this table.
The ""training_hub"" table represents training hubs and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Get the total number of training hubs.,SELECT COUNT(*) FROM public.training_hub;
"The ""training_hub_templates"" table represents the association between training hubs and training templates. It has two columns, ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint) and ""template_id"" (a reference to the ""training_templates"" table through a foreign key constraint). The combination of ""training_id"" and ""template_id"" forms the primary key for this table.
The ""training_hub"" table represents training hubs and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Show all training hubs with training templates.,SELECT * FROM public.training_hub WHERE has_training_templates = true;
"The ""training_hub_templates"" table represents the association between training hubs and training templates. It has two columns, ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint) and ""template_id"" (a reference to the ""training_templates"" table through a foreign key constraint). The combination of ""training_id"" and ""template_id"" forms the primary key for this table.
The ""training_hub"" table represents training hubs and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Find training hubs created after a specific date.,SELECT * FROM public.training_hub WHERE created_at > '2023-01-01';
"The ""training_hub_templates"" table represents the association between training hubs and training templates. It has two columns, ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint) and ""template_id"" (a reference to the ""training_templates"" table through a foreign key constraint). The combination of ""training_id"" and ""template_id"" forms the primary key for this table.
The ""training_hub"" table represents training hubs and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Retrieve the training hub IDs associated with specific templates.,SELECT training_id FROM public.training_hub_templates;
"The ""training_hub_templates"" table represents the association between training hubs and training templates. It has two columns, ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint) and ""template_id"" (a reference to the ""training_templates"" table through a foreign key constraint). The combination of ""training_id"" and ""template_id"" forms the primary key for this table.
The ""training_hub"" table represents training hubs and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",List all training templates associated with specific training hubs.,"SELECT * FROM public.training_hub_templates WHERE training_id IN (1, 2) AND template_id IN (3, 4);"
"The ""training_hub_templates"" table represents the association between training hubs and training templates. It has two columns, ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint) and ""template_id"" (a reference to the ""training_templates"" table through a foreign key constraint). The combination of ""training_id"" and ""template_id"" forms the primary key for this table.
The ""training_hub"" table represents training hubs and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Find training hubs associated with specific training templates.,"SELECT * FROM public.training_hub_templates WHERE template_id IN (123, 456) AND training_id IN (789, 890);"
"The ""training_hub_templates"" table represents the association between training hubs and training templates. It has two columns, ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint) and ""template_id"" (a reference to the ""training_templates"" table through a foreign key constraint). The combination of ""training_id"" and ""template_id"" forms the primary key for this table.
The ""training_hub"" table represents training hubs and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Get the template IDs of all training hub-template associations.,SELECT template_id FROM public.training_hub_templates;
"The ""training_hub_templates"" table represents the association between training hubs and training templates. It has two columns, ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint) and ""template_id"" (a reference to the ""training_templates"" table through a foreign key constraint). The combination of ""training_id"" and ""template_id"" forms the primary key for this table.
The ""training_hub"" table represents training hubs and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Show all training hubs with unique IDs.,SELECT DISTINCT id FROM public.training_hub;
"The ""training_hub_templates"" table represents the association between training hubs and training templates. It has two columns, ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint) and ""template_id"" (a reference to the ""training_templates"" table through a foreign key constraint). The combination of ""training_id"" and ""template_id"" forms the primary key for this table.
The ""training_hub"" table represents training hubs and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",List all training hubs with specific conditions on training templates.,SELECT * FROM public.training_hub WHERE has_training_templates = true AND updated_at > '2023-01-01';
"The ""training_hub_templates"" table represents the association between training hubs and training templates. It has two columns, ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint) and ""template_id"" (a reference to the ""training_templates"" table through a foreign key constraint). The combination of ""training_id"" and ""template_id"" forms the primary key for this table.
The ""training_hub"" table represents training hubs and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Find training hubs associated with specific IDs and conditions.,"SELECT * FROM public.training_hub WHERE id IN (1, 2) AND has_training_templates = false;"
"The ""training_hub_templates"" table represents the association between training hubs and training templates. It has two columns, ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint) and ""template_id"" (a reference to the ""training_templates"" table through a foreign key constraint). The combination of ""training_id"" and ""template_id"" forms the primary key for this table.
The ""training_hub"" table represents training hubs and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Get the video IDs associated with specific training hubs.,"SELECT video_id FROM public.training_hub WHERE id IN (123, 456);"
"The ""training_hub_templates"" table represents the association between training hubs and training templates. It has two columns, ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint) and ""template_id"" (a reference to the ""training_templates"" table through a foreign key constraint). The combination of ""training_id"" and ""template_id"" forms the primary key for this table.
The ""training_hub"" table represents training hubs and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Show all training hubs with specific attributes.,SELECT * FROM public.training_hub WHERE has_training_templates = true AND is_enabled = true;
"The ""training_hub_templates"" table represents the association between training hubs and training templates. It has two columns, ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint) and ""template_id"" (a reference to the ""training_templates"" table through a foreign key constraint). The combination of ""training_id"" and ""template_id"" forms the primary key for this table.
The ""training_hub"" table represents training hubs and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Retrieve the names of training templates associated with a training hub.,SELECT title FROM public.training_templates TT INNER JOIN public.training_hub_templates TH ON TT.id = TH.template_id WHERE TH.training_id = 123;
"The ""training_hub_templates"" table represents the association between training hubs and training templates. It has two columns, ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint) and ""template_id"" (a reference to the ""training_templates"" table through a foreign key constraint). The combination of ""training_id"" and ""template_id"" forms the primary key for this table.
The ""training_hub"" table represents training hubs and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value indicating whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",List all training hubs associated with specific template IDs.,"SELECT * FROM public.training_hub_templates WHERE template_id IN (1, 2) AND training_id IN (3, 4);"
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for an avatar image), ""description"" (a varchar field for project description), ""name"" (a varchar field for the project name), ""type"" (a varchar field for project type), ""url"" (a varchar field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",List all offended techniques in a specific project.,SELECT * FROM public.offended_techniques WHERE project_id = 123;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for an avatar image), ""description"" (a varchar field for project description), ""name"" (a varchar field for the project name), ""type"" (a varchar field for project type), ""url"" (a varchar field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Find the count of offenses for a specific technique in a project.,SELECT count FROM public.offended_techniques WHERE attack_technique_id = 456 AND project_id = 123;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for an avatar image), ""description"" (a varchar field for project description), ""name"" (a varchar field for the project name), ""type"" (a varchar field for project type), ""url"" (a varchar field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Retrieve all enabled projects.,SELECT * FROM public.projects WHERE is_enabled = true;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for an avatar image), ""description"" (a varchar field for project description), ""name"" (a varchar field for the project name), ""type"" (a varchar field for project type), ""url"" (a varchar field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Get the total number of projects.,SELECT COUNT(*) FROM public.projects;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for an avatar image), ""description"" (a varchar field for project description), ""name"" (a varchar field for the project name), ""type"" (a varchar field for project type), ""url"" (a varchar field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Show all projects with avatars.,SELECT * FROM public.projects WHERE avatar IS NOT NULL;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for an avatar image), ""description"" (a varchar field for project description), ""name"" (a varchar field for the project name), ""type"" (a varchar field for project type), ""url"" (a varchar field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Find projects created after a specific date.,SELECT * FROM public.projects WHERE created_at > '2023-01-01';
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for an avatar image), ""description"" (a varchar field for project description), ""name"" (a varchar field for the project name), ""type"" (a varchar field for project type), ""url"" (a varchar field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Retrieve the project IDs associated with specific techniques.,"SELECT project_id FROM public.offended_techniques WHERE attack_technique_id IN (1, 2, 3);"
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for an avatar image), ""description"" (a varchar field for project description), ""name"" (a varchar field for the project name), ""type"" (a varchar field for project type), ""url"" (a varchar field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",List all projects associated with specific project lead IDs.,"SELECT * FROM public.projects WHERE project_lead_id IN (101, 102, 103);"
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for an avatar image), ""description"" (a varchar field for project description), ""name"" (a varchar field for the project name), ""type"" (a varchar field for project type), ""url"" (a varchar field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Find projects with unique names.,SELECT DISTINCT name FROM public.projects;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for an avatar image), ""description"" (a varchar field for project description), ""name"" (a varchar field for the project name), ""type"" (a varchar field for project type), ""url"" (a varchar field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Get the count of offenses for specific techniques in projects.,"SELECT attack_technique_id, project_id, count FROM public.offended_techniques WHERE attack_technique_id IN (1, 2);"
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for an avatar image), ""description"" (a varchar field for project description), ""name"" (a varchar field for the project name), ""type"" (a varchar field for project type), ""url"" (a varchar field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Show all projects with specific types.,SELECT * FROM public.projects WHERE type = 'Research';
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for an avatar image), ""description"" (a varchar field for project description), ""name"" (a varchar field for the project name), ""type"" (a varchar field for project type), ""url"" (a varchar field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Retrieve project descriptions with unique values.,SELECT DISTINCT description FROM public.projects;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for an avatar image), ""description"" (a varchar field for project description), ""name"" (a varchar field for the project name), ""type"" (a varchar field for project type), ""url"" (a varchar field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",List all projects associated with specific company IDs.,"SELECT * FROM public.projects WHERE company_id IN (201, 202);"
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for an avatar image), ""description"" (a varchar field for project description), ""name"" (a varchar field for the project name), ""type"" (a varchar field for project type), ""url"" (a varchar field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Find projects with avatars and specific types.,SELECT * FROM public.projects WHERE avatar IS NOT NULL AND type = 'Development';
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for an avatar image), ""description"" (a varchar field for project description), ""name"" (a varchar field for the project name), ""type"" (a varchar field for project type), ""url"" (a varchar field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Get the project IDs associated with specific descriptions.,"SELECT id FROM public.projects WHERE description IN ('Project A', 'Project B');"
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for an avatar image), ""description"" (a varchar field for project description), ""name"" (a varchar field for the project name), ""type"" (a varchar field for project type), ""url"" (a varchar field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Show all offended techniques with specific counts.,SELECT * FROM public.offended_techniques WHERE count = 10;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for an avatar image), ""description"" (a varchar field for project description), ""name"" (a varchar field for the project name), ""type"" (a varchar field for project type), ""url"" (a varchar field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Retrieve the names of all projects.,SELECT name FROM public.projects;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for an avatar image), ""description"" (a varchar field for project description), ""name"" (a varchar field for the project name), ""type"" (a varchar field for project type), ""url"" (a varchar field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",List all projects associated with specific company IDs and types.,SELECT * FROM public.projects WHERE company_id = 301 AND type = 'Marketing';
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for an avatar image), ""description"" (a varchar field for project description), ""name"" (a varchar field for the project name), ""type"" (a varchar field for project type), ""url"" (a varchar field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Find projects with unique avatars.,SELECT DISTINCT avatar FROM public.projects WHERE avatar IS NOT NULL;
"The ""offended_techniques"" table represents information about techniques that have offended a project. It has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the entry was created), ""is_enabled"" (a boolean value representing whether the entry is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the entry was last updated), ""count"" (an integer representing the count of offenses), ""attack_technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), and ""project_id"" (a reference to the ""projects"" table through a foreign key constraint).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a varchar field for an avatar image), ""description"" (a varchar field for project description), ""name"" (a varchar field for the project name), ""type"" (a varchar field for project type), ""url"" (a varchar field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Get the count of offenses for a specific technique in projects.,"SELECT attack_technique_id, project_id, count FROM public.offended_techniques WHERE attack_technique_id = 123;"
"The ""users"" table represents user information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field for an avatar image), ""description"" (a character varying field for project description), ""name"" (a character varying field for the project name), ""type"" (a character varying field for project type), ""url"" (a character varying field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",List all users in a specific project.,SELECT * FROM public.users WHERE project_id = 123;
"The ""users"" table represents user information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field for an avatar image), ""description"" (a character varying field for project description), ""name"" (a character varying field for the project name), ""type"" (a character varying field for project type), ""url"" (a character varying field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Find the user's information by their email.,SELECT * FROM public.users WHERE email = 'user@example.com';
"The ""users"" table represents user information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field for an avatar image), ""description"" (a character varying field for project description), ""name"" (a character varying field for the project name), ""type"" (a character varying field for project type), ""url"" (a character varying field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Retrieve all enabled users.,SELECT * FROM public.users WHERE is_enabled = true;
"The ""users"" table represents user information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field for an avatar image), ""description"" (a character varying field for project description), ""name"" (a character varying field for the project name), ""type"" (a character varying field for project type), ""url"" (a character varying field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Get the total number of users.,SELECT COUNT(*) FROM public.users;
"The ""users"" table represents user information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field for an avatar image), ""description"" (a character varying field for project description), ""name"" (a character varying field for the project name), ""type"" (a character varying field for project type), ""url"" (a character varying field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Show all users with compromised status.,SELECT * FROM public.users WHERE compromised = true;
"The ""users"" table represents user information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field for an avatar image), ""description"" (a character varying field for project description), ""name"" (a character varying field for the project name), ""type"" (a character varying field for project type), ""url"" (a character varying field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Find users created after a specific date.,SELECT * FROM public.users WHERE created_at > '2023-01-01';
"The ""users"" table represents user information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field for an avatar image), ""description"" (a character varying field for project description), ""name"" (a character varying field for the project name), ""type"" (a character varying field for project type), ""url"" (a character varying field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Retrieve the user IDs associated with specific roles.,"SELECT id FROM public.users WHERE role_id IN (1, 2, 3);"
"The ""users"" table represents user information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field for an avatar image), ""description"" (a character varying field for project description), ""name"" (a character varying field for the project name), ""type"" (a character varying field for project type), ""url"" (a character varying field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",List all users associated with specific project IDs.,"SELECT * FROM public.users WHERE project_id IN (101, 102, 103);"
"The ""users"" table represents user information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field for an avatar image), ""description"" (a character varying field for project description), ""name"" (a character varying field for the project name), ""type"" (a character varying field for project type), ""url"" (a character varying field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Find users with unique first names.,SELECT DISTINCT firstname FROM public.users;
"The ""users"" table represents user information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field for an avatar image), ""description"" (a character varying field for project description), ""name"" (a character varying field for the project name), ""type"" (a character varying field for project type), ""url"" (a character varying field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Get the offended status of users with specific IDs.,"SELECT id, offended FROM public.users WHERE id IN (1, 2, 3);"
"The ""users"" table represents user information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field for an avatar image), ""description"" (a character varying field for project description), ""name"" (a character varying field for the project name), ""type"" (a character varying field for project type), ""url"" (a character varying field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Show all users with specific roles.,SELECT * FROM public.users WHERE role_id = 4;
"The ""users"" table represents user information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field for an avatar image), ""description"" (a character varying field for project description), ""name"" (a character varying field for the project name), ""type"" (a character varying field for project type), ""url"" (a character varying field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Retrieve user last names with unique values.,SELECT DISTINCT lastname FROM public.users;
"The ""users"" table represents user information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field for an avatar image), ""description"" (a character varying field for project description), ""name"" (a character varying field for the project name), ""type"" (a character varying field for project type), ""url"" (a character varying field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",List all users associated with specific company IDs.,"SELECT * FROM public.users WHERE company_id IN (201, 202);"
"The ""users"" table represents user information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field for an avatar image), ""description"" (a character varying field for project description), ""name"" (a character varying field for the project name), ""type"" (a character varying field for project type), ""url"" (a character varying field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Find users with compromised status and specific roles.,"SELECT * FROM public.users WHERE compromised = true AND role_id IN (5, 6);"
"The ""users"" table represents user information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field for an avatar image), ""description"" (a character varying field for project description), ""name"" (a character varying field for the project name), ""type"" (a character varying field for project type), ""url"" (a character varying field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Get the project IDs associated with specific user IDs.,"SELECT project_id FROM public.users WHERE id IN (123, 456);"
"The ""users"" table represents user information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field for an avatar image), ""description"" (a character varying field for project description), ""name"" (a character varying field for the project name), ""type"" (a character varying field for project type), ""url"" (a character varying field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Show all users with specific attributes.,SELECT * FROM public.users WHERE is_enabled = true AND simulated = false;
"The ""users"" table represents user information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field for an avatar image), ""description"" (a character varying field for project description), ""name"" (a character varying field for the project name), ""type"" (a character varying field for project type), ""url"" (a character varying field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Retrieve the first names of all users.,SELECT firstname FROM public.users;
"The ""users"" table represents user information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field for an avatar image), ""description"" (a character varying field for project description), ""name"" (a character varying field for the project name), ""type"" (a character varying field for project type), ""url"" (a character varying field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",List all users associated with specific company IDs and roles.,"SELECT * FROM public.users WHERE company_id = 301 AND role_id IN (7, 8);"
"The ""users"" table represents user information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field for an avatar image), ""description"" (a character varying field for project description), ""name"" (a character varying field for the project name), ""type"" (a character varying field for project type), ""url"" (a character varying field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Find users with compromised status and unique last names.,SELECT DISTINCT lastname FROM public.users WHERE compromised = true;
"The ""users"" table represents user information and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email, which is not nullable), ""firstname"" (a character varying field for the user's first name, which is not nullable), ""lastname"" (a character varying field for the user's last name, which is not nullable), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).
The ""projects"" table represents projects and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field for an avatar image), ""description"" (a character varying field for project description), ""name"" (a character varying field for the project name), ""type"" (a character varying field for project type), ""url"" (a character varying field for project URL), ""company_id"" (a reference to the ""company"" table through a unique constraint), and ""project_lead_id"" (a reference to the project lead through a foreign key constraint).
",Get the user IDs of compromised users.,SELECT id FROM public.users WHERE compromised = true;
"The ""campaign"" table represents information related to campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value representing whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value representing whether the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value representing whether the campaign is scheduled), ""launched"" (a boolean value representing whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign name), ""owner"" (a character varying field for the campaign owner), ""schedule_time"" (a timestamp indicating the scheduled time of the campaign), ""subject"" (a character varying field for the campaign subject), ""type"" (a character varying field for the campaign type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint with cascade delete), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field representing the status of the campaign), ""is_auto_training"" (a boolean value representing whether the campaign has automatic training, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value representing whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer field indicating the frequency of reminders), ""reminders_number"" (an integer field indicating the number of reminders), and ""timezone"" (a character varying field for the campaign timezone).
The ""training_hub"" table represents a training hub and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value representing whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",List all campaigns with a custom template.,SELECT * FROM public.campaign WHERE has_custom_template = true;
"The ""campaign"" table represents information related to campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value representing whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value representing whether the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value representing whether the campaign is scheduled), ""launched"" (a boolean value representing whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign name), ""owner"" (a character varying field for the campaign owner), ""schedule_time"" (a timestamp indicating the scheduled time of the campaign), ""subject"" (a character varying field for the campaign subject), ""type"" (a character varying field for the campaign type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint with cascade delete), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field representing the status of the campaign), ""is_auto_training"" (a boolean value representing whether the campaign has automatic training, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value representing whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer field indicating the frequency of reminders), ""reminders_number"" (an integer field indicating the number of reminders), and ""timezone"" (a character varying field for the campaign timezone).
The ""training_hub"" table represents a training hub and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value representing whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Find campaigns with a specific status.,SELECT * FROM public.campaign WHERE status = 2;
"The ""campaign"" table represents information related to campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value representing whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value representing whether the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value representing whether the campaign is scheduled), ""launched"" (a boolean value representing whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign name), ""owner"" (a character varying field for the campaign owner), ""schedule_time"" (a timestamp indicating the scheduled time of the campaign), ""subject"" (a character varying field for the campaign subject), ""type"" (a character varying field for the campaign type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint with cascade delete), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field representing the status of the campaign), ""is_auto_training"" (a boolean value representing whether the campaign has automatic training, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value representing whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer field indicating the frequency of reminders), ""reminders_number"" (an integer field indicating the number of reminders), and ""timezone"" (a character varying field for the campaign timezone).
The ""training_hub"" table represents a training hub and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value representing whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Retrieve campaigns executed after a certain date.,SELECT * FROM public.campaign WHERE executed = true AND executed_at > '2023-01-01';
"The ""campaign"" table represents information related to campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value representing whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value representing whether the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value representing whether the campaign is scheduled), ""launched"" (a boolean value representing whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign name), ""owner"" (a character varying field for the campaign owner), ""schedule_time"" (a timestamp indicating the scheduled time of the campaign), ""subject"" (a character varying field for the campaign subject), ""type"" (a character varying field for the campaign type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint with cascade delete), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field representing the status of the campaign), ""is_auto_training"" (a boolean value representing whether the campaign has automatic training, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value representing whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer field indicating the frequency of reminders), ""reminders_number"" (an integer field indicating the number of reminders), and ""timezone"" (a character varying field for the campaign timezone).
The ""training_hub"" table represents a training hub and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value representing whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Get the names of all campaigns.,SELECT name FROM public.campaign;
"The ""campaign"" table represents information related to campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value representing whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value representing whether the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value representing whether the campaign is scheduled), ""launched"" (a boolean value representing whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign name), ""owner"" (a character varying field for the campaign owner), ""schedule_time"" (a timestamp indicating the scheduled time of the campaign), ""subject"" (a character varying field for the campaign subject), ""type"" (a character varying field for the campaign type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint with cascade delete), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field representing the status of the campaign), ""is_auto_training"" (a boolean value representing whether the campaign has automatic training, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value representing whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer field indicating the frequency of reminders), ""reminders_number"" (an integer field indicating the number of reminders), and ""timezone"" (a character varying field for the campaign timezone).
The ""training_hub"" table represents a training hub and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value representing whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Show all campaigns associated with a specific project ID.,SELECT * FROM public.campaign WHERE project_id = 123;
"The ""campaign"" table represents information related to campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value representing whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value representing whether the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value representing whether the campaign is scheduled), ""launched"" (a boolean value representing whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign name), ""owner"" (a character varying field for the campaign owner), ""schedule_time"" (a timestamp indicating the scheduled time of the campaign), ""subject"" (a character varying field for the campaign subject), ""type"" (a character varying field for the campaign type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint with cascade delete), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field representing the status of the campaign), ""is_auto_training"" (a boolean value representing whether the campaign has automatic training, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value representing whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer field indicating the frequency of reminders), ""reminders_number"" (an integer field indicating the number of reminders), and ""timezone"" (a character varying field for the campaign timezone).
The ""training_hub"" table represents a training hub and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value representing whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Find campaigns with reminders enabled.,SELECT * FROM public.campaign WHERE has_reminders = true;
"The ""campaign"" table represents information related to campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value representing whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value representing whether the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value representing whether the campaign is scheduled), ""launched"" (a boolean value representing whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign name), ""owner"" (a character varying field for the campaign owner), ""schedule_time"" (a timestamp indicating the scheduled time of the campaign), ""subject"" (a character varying field for the campaign subject), ""type"" (a character varying field for the campaign type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint with cascade delete), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field representing the status of the campaign), ""is_auto_training"" (a boolean value representing whether the campaign has automatic training, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value representing whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer field indicating the frequency of reminders), ""reminders_number"" (an integer field indicating the number of reminders), and ""timezone"" (a character varying field for the campaign timezone).
The ""training_hub"" table represents a training hub and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value representing whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Get the campaign IDs with automatic training.,SELECT id FROM public.campaign WHERE is_auto_training = true;
"The ""campaign"" table represents information related to campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value representing whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value representing whether the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value representing whether the campaign is scheduled), ""launched"" (a boolean value representing whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign name), ""owner"" (a character varying field for the campaign owner), ""schedule_time"" (a timestamp indicating the scheduled time of the campaign), ""subject"" (a character varying field for the campaign subject), ""type"" (a character varying field for the campaign type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint with cascade delete), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field representing the status of the campaign), ""is_auto_training"" (a boolean value representing whether the campaign has automatic training, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value representing whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer field indicating the frequency of reminders), ""reminders_number"" (an integer field indicating the number of reminders), and ""timezone"" (a character varying field for the campaign timezone).
The ""training_hub"" table represents a training hub and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value representing whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",List all campaigns associated with a specific email profile ID.,SELECT * FROM public.campaign WHERE email_profile_id = 456;
"The ""campaign"" table represents information related to campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value representing whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value representing whether the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value representing whether the campaign is scheduled), ""launched"" (a boolean value representing whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign name), ""owner"" (a character varying field for the campaign owner), ""schedule_time"" (a timestamp indicating the scheduled time of the campaign), ""subject"" (a character varying field for the campaign subject), ""type"" (a character varying field for the campaign type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint with cascade delete), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field representing the status of the campaign), ""is_auto_training"" (a boolean value representing whether the campaign has automatic training, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value representing whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer field indicating the frequency of reminders), ""reminders_number"" (an integer field indicating the number of reminders), and ""timezone"" (a character varying field for the campaign timezone).
The ""training_hub"" table represents a training hub and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value representing whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Find campaigns with a specific type and launched status.,SELECT * FROM public.campaign WHERE type = 'Newsletter' AND launched = true;
"The ""campaign"" table represents information related to campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value representing whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value representing whether the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value representing whether the campaign is scheduled), ""launched"" (a boolean value representing whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign name), ""owner"" (a character varying field for the campaign owner), ""schedule_time"" (a timestamp indicating the scheduled time of the campaign), ""subject"" (a character varying field for the campaign subject), ""type"" (a character varying field for the campaign type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint with cascade delete), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field representing the status of the campaign), ""is_auto_training"" (a boolean value representing whether the campaign has automatic training, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value representing whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer field indicating the frequency of reminders), ""reminders_number"" (an integer field indicating the number of reminders), and ""timezone"" (a character varying field for the campaign timezone).
The ""training_hub"" table represents a training hub and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value representing whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Retrieve the campaign IDs with a specific technique ID.,SELECT id FROM public.campaign WHERE technique_id = 789;
"The ""campaign"" table represents information related to campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value representing whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value representing whether the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value representing whether the campaign is scheduled), ""launched"" (a boolean value representing whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign name), ""owner"" (a character varying field for the campaign owner), ""schedule_time"" (a timestamp indicating the scheduled time of the campaign), ""subject"" (a character varying field for the campaign subject), ""type"" (a character varying field for the campaign type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint with cascade delete), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field representing the status of the campaign), ""is_auto_training"" (a boolean value representing whether the campaign has automatic training, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value representing whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer field indicating the frequency of reminders), ""reminders_number"" (an integer field indicating the number of reminders), and ""timezone"" (a character varying field for the campaign timezone).
The ""training_hub"" table represents a training hub and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value representing whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Show all campaigns scheduled for a particular timezone.,SELECT * FROM public.campaign WHERE timezone = 'UTC';
"The ""campaign"" table represents information related to campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value representing whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value representing whether the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value representing whether the campaign is scheduled), ""launched"" (a boolean value representing whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign name), ""owner"" (a character varying field for the campaign owner), ""schedule_time"" (a timestamp indicating the scheduled time of the campaign), ""subject"" (a character varying field for the campaign subject), ""type"" (a character varying field for the campaign type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint with cascade delete), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field representing the status of the campaign), ""is_auto_training"" (a boolean value representing whether the campaign has automatic training, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value representing whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer field indicating the frequency of reminders), ""reminders_number"" (an integer field indicating the number of reminders), and ""timezone"" (a character varying field for the campaign timezone).
The ""training_hub"" table represents a training hub and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value representing whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Find campaigns with reminders and a specific frequency.,SELECT * FROM public.campaign WHERE has_reminders = true AND reminders_frequency = 7;
"The ""campaign"" table represents information related to campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value representing whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value representing whether the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value representing whether the campaign is scheduled), ""launched"" (a boolean value representing whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign name), ""owner"" (a character varying field for the campaign owner), ""schedule_time"" (a timestamp indicating the scheduled time of the campaign), ""subject"" (a character varying field for the campaign subject), ""type"" (a character varying field for the campaign type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint with cascade delete), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field representing the status of the campaign), ""is_auto_training"" (a boolean value representing whether the campaign has automatic training, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value representing whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer field indicating the frequency of reminders), ""reminders_number"" (an integer field indicating the number of reminders), and ""timezone"" (a character varying field for the campaign timezone).
The ""training_hub"" table represents a training hub and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value representing whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Get the campaign owner names for campaigns with custom templates.,SELECT owner FROM public.campaign WHERE has_custom_template = true;
"The ""campaign"" table represents information related to campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value representing whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value representing whether the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value representing whether the campaign is scheduled), ""launched"" (a boolean value representing whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign name), ""owner"" (a character varying field for the campaign owner), ""schedule_time"" (a timestamp indicating the scheduled time of the campaign), ""subject"" (a character varying field for the campaign subject), ""type"" (a character varying field for the campaign type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint with cascade delete), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field representing the status of the campaign), ""is_auto_training"" (a boolean value representing whether the campaign has automatic training, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value representing whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer field indicating the frequency of reminders), ""reminders_number"" (an integer field indicating the number of reminders), and ""timezone"" (a character varying field for the campaign timezone).
The ""training_hub"" table represents a training hub and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value representing whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Retrieve campaigns that are not scheduled.,SELECT * FROM public.campaign WHERE is_scheduled = false;
"The ""campaign"" table represents information related to campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value representing whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value representing whether the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value representing whether the campaign is scheduled), ""launched"" (a boolean value representing whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign name), ""owner"" (a character varying field for the campaign owner), ""schedule_time"" (a timestamp indicating the scheduled time of the campaign), ""subject"" (a character varying field for the campaign subject), ""type"" (a character varying field for the campaign type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint with cascade delete), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field representing the status of the campaign), ""is_auto_training"" (a boolean value representing whether the campaign has automatic training, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value representing whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer field indicating the frequency of reminders), ""reminders_number"" (an integer field indicating the number of reminders), and ""timezone"" (a character varying field for the campaign timezone).
The ""training_hub"" table represents a training hub and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value representing whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",List all campaigns associated with a specific project ID and type.,SELECT * FROM public.campaign WHERE project_id = 456 AND type = 'Promotion';
"The ""campaign"" table represents information related to campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value representing whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value representing whether the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value representing whether the campaign is scheduled), ""launched"" (a boolean value representing whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign name), ""owner"" (a character varying field for the campaign owner), ""schedule_time"" (a timestamp indicating the scheduled time of the campaign), ""subject"" (a character varying field for the campaign subject), ""type"" (a character varying field for the campaign type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint with cascade delete), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field representing the status of the campaign), ""is_auto_training"" (a boolean value representing whether the campaign has automatic training, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value representing whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer field indicating the frequency of reminders), ""reminders_number"" (an integer field indicating the number of reminders), and ""timezone"" (a character varying field for the campaign timezone).
The ""training_hub"" table represents a training hub and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value representing whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Find campaigns executed within a specific timeframe.,SELECT * FROM public.campaign WHERE executed = true AND executed_at BETWEEN '2023-05-01' AND '2023-06-30';
"The ""campaign"" table represents information related to campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value representing whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value representing whether the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value representing whether the campaign is scheduled), ""launched"" (a boolean value representing whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign name), ""owner"" (a character varying field for the campaign owner), ""schedule_time"" (a timestamp indicating the scheduled time of the campaign), ""subject"" (a character varying field for the campaign subject), ""type"" (a character varying field for the campaign type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint with cascade delete), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field representing the status of the campaign), ""is_auto_training"" (a boolean value representing whether the campaign has automatic training, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value representing whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer field indicating the frequency of reminders), ""reminders_number"" (an integer field indicating the number of reminders), and ""timezone"" (a character varying field for the campaign timezone).
The ""training_hub"" table represents a training hub and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value representing whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Get the campaign names associated with specific email profiles.,"SELECT name FROM public.campaign WHERE email_profile_id IN (101, 102, 103);"
"The ""campaign"" table represents information related to campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value representing whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value representing whether the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value representing whether the campaign is scheduled), ""launched"" (a boolean value representing whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign name), ""owner"" (a character varying field for the campaign owner), ""schedule_time"" (a timestamp indicating the scheduled time of the campaign), ""subject"" (a character varying field for the campaign subject), ""type"" (a character varying field for the campaign type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint with cascade delete), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field representing the status of the campaign), ""is_auto_training"" (a boolean value representing whether the campaign has automatic training, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value representing whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer field indicating the frequency of reminders), ""reminders_number"" (an integer field indicating the number of reminders), and ""timezone"" (a character varying field for the campaign timezone).
The ""training_hub"" table represents a training hub and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value representing whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Show all campaigns with automatic training and no reminders.,SELECT * FROM public.campaign WHERE is_auto_training = true AND has_reminders = false;
"The ""campaign"" table represents information related to campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value representing whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value representing whether the campaign has a custom template, with a default value of false), ""is_scheduled"" (a boolean value representing whether the campaign is scheduled), ""launched"" (a boolean value representing whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign name), ""owner"" (a character varying field for the campaign owner), ""schedule_time"" (a timestamp indicating the scheduled time of the campaign), ""subject"" (a character varying field for the campaign subject), ""type"" (a character varying field for the campaign type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint with cascade delete), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer field representing the status of the campaign), ""is_auto_training"" (a boolean value representing whether the campaign has automatic training, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value representing whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer field indicating the frequency of reminders), ""reminders_number"" (an integer field indicating the number of reminders), and ""timezone"" (a character varying field for the campaign timezone).
The ""training_hub"" table represents a training hub and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value representing whether the training hub is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training hub was last updated), ""has_training_templates"" (a boolean value representing whether the training hub has training templates), and ""video_id"" (a reference to the ""training_videos"" table through a foreign key constraint).",Retrieve the campaign IDs associated with a specific project ID and type.,SELECT id FROM public.campaign WHERE project_id = 789 AND type = 'Marketing';
"The ""users_in_campaigns"" table represents information about users in campaigns and has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean value representing whether the user was caught, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean value representing whether the user opened a campaign, with a default value of false), ""sent"" (a boolean value representing whether a campaign was sent to the user, with a default value of false), ""trained"" (a boolean value representing whether the user is trained, with a default value of false), ""trained_at"" (a timestamp indicating when the user was trained), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean value representing whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean value representing whether training is in progress, with a default value of false).
The ""users"" table represents information about users and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email address), ""firstname"" (a character varying field for the user's first name), ""lastname"" (a character varying field for the user's last name), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).",Find all users who were caught in a campaign.,SELECT * FROM public.users_in_campaigns WHERE caught = true;
"The ""users_in_campaigns"" table represents information about users in campaigns and has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean value representing whether the user was caught, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean value representing whether the user opened a campaign, with a default value of false), ""sent"" (a boolean value representing whether a campaign was sent to the user, with a default value of false), ""trained"" (a boolean value representing whether the user is trained, with a default value of false), ""trained_at"" (a timestamp indicating when the user was trained), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean value representing whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean value representing whether training is in progress, with a default value of false).
The ""users"" table represents information about users and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email address), ""firstname"" (a character varying field for the user's first name), ""lastname"" (a character varying field for the user's last name), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).",Retrieve the user IDs who were trained.,SELECT user_id FROM public.users_in_campaigns WHERE trained = true;
"The ""users_in_campaigns"" table represents information about users in campaigns and has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean value representing whether the user was caught, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean value representing whether the user opened a campaign, with a default value of false), ""sent"" (a boolean value representing whether a campaign was sent to the user, with a default value of false), ""trained"" (a boolean value representing whether the user is trained, with a default value of false), ""trained_at"" (a timestamp indicating when the user was trained), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean value representing whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean value representing whether training is in progress, with a default value of false).
The ""users"" table represents information about users and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email address), ""firstname"" (a character varying field for the user's first name), ""lastname"" (a character varying field for the user's last name), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).",Show all users who have not been compromised.,SELECT * FROM public.users WHERE compromised = false;
"The ""users_in_campaigns"" table represents information about users in campaigns and has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean value representing whether the user was caught, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean value representing whether the user opened a campaign, with a default value of false), ""sent"" (a boolean value representing whether a campaign was sent to the user, with a default value of false), ""trained"" (a boolean value representing whether the user is trained, with a default value of false), ""trained_at"" (a timestamp indicating when the user was trained), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean value representing whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean value representing whether training is in progress, with a default value of false).
The ""users"" table represents information about users and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email address), ""firstname"" (a character varying field for the user's first name), ""lastname"" (a character varying field for the user's last name), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).",Get the user email addresses that were sent a campaign.,SELECT u.email FROM public.users_in_campaigns AS uc INNER JOIN public.users AS u ON uc.user_id = u.id WHERE sent = true;
"The ""users_in_campaigns"" table represents information about users in campaigns and has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean value representing whether the user was caught, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean value representing whether the user opened a campaign, with a default value of false), ""sent"" (a boolean value representing whether a campaign was sent to the user, with a default value of false), ""trained"" (a boolean value representing whether the user is trained, with a default value of false), ""trained_at"" (a timestamp indicating when the user was trained), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean value representing whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean value representing whether training is in progress, with a default value of false).
The ""users"" table represents information about users and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email address), ""firstname"" (a character varying field for the user's first name), ""lastname"" (a character varying field for the user's last name), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).",List users who have been simulated.,SELECT * FROM public.users WHERE simulated = true;
"The ""users_in_campaigns"" table represents information about users in campaigns and has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean value representing whether the user was caught, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean value representing whether the user opened a campaign, with a default value of false), ""sent"" (a boolean value representing whether a campaign was sent to the user, with a default value of false), ""trained"" (a boolean value representing whether the user is trained, with a default value of false), ""trained_at"" (a timestamp indicating when the user was trained), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean value representing whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean value representing whether training is in progress, with a default value of false).
The ""users"" table represents information about users and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email address), ""firstname"" (a character varying field for the user's first name), ""lastname"" (a character varying field for the user's last name), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).",Find users who opened a campaign and were caught.,SELECT * FROM public.users_in_campaigns WHERE opened = true AND caught = true;
"The ""users_in_campaigns"" table represents information about users in campaigns and has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean value representing whether the user was caught, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean value representing whether the user opened a campaign, with a default value of false), ""sent"" (a boolean value representing whether a campaign was sent to the user, with a default value of false), ""trained"" (a boolean value representing whether the user is trained, with a default value of false), ""trained_at"" (a timestamp indicating when the user was trained), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean value representing whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean value representing whether training is in progress, with a default value of false).
The ""users"" table represents information about users and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email address), ""firstname"" (a character varying field for the user's first name), ""lastname"" (a character varying field for the user's last name), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).",Retrieve the user IDs who have not been trained.,SELECT user_id FROM public.users_in_campaigns WHERE trained = false;
"The ""users_in_campaigns"" table represents information about users in campaigns and has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean value representing whether the user was caught, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean value representing whether the user opened a campaign, with a default value of false), ""sent"" (a boolean value representing whether a campaign was sent to the user, with a default value of false), ""trained"" (a boolean value representing whether the user is trained, with a default value of false), ""trained_at"" (a timestamp indicating when the user was trained), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean value representing whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean value representing whether training is in progress, with a default value of false).
The ""users"" table represents information about users and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email address), ""firstname"" (a character varying field for the user's first name), ""lastname"" (a character varying field for the user's last name), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).",Get the user details for those who have been offended.,SELECT * FROM public.users WHERE offended = true;
"The ""users_in_campaigns"" table represents information about users in campaigns and has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean value representing whether the user was caught, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean value representing whether the user opened a campaign, with a default value of false), ""sent"" (a boolean value representing whether a campaign was sent to the user, with a default value of false), ""trained"" (a boolean value representing whether the user is trained, with a default value of false), ""trained_at"" (a timestamp indicating when the user was trained), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean value representing whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean value representing whether training is in progress, with a default value of false).
The ""users"" table represents information about users and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email address), ""firstname"" (a character varying field for the user's first name), ""lastname"" (a character varying field for the user's last name), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).",Show users who have not been sent a campaign.,SELECT * FROM public.users_in_campaigns WHERE sent = false;
"The ""users_in_campaigns"" table represents information about users in campaigns and has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean value representing whether the user was caught, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean value representing whether the user opened a campaign, with a default value of false), ""sent"" (a boolean value representing whether a campaign was sent to the user, with a default value of false), ""trained"" (a boolean value representing whether the user is trained, with a default value of false), ""trained_at"" (a timestamp indicating when the user was trained), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean value representing whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean value representing whether training is in progress, with a default value of false).
The ""users"" table represents information about users and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email address), ""firstname"" (a character varying field for the user's first name), ""lastname"" (a character varying field for the user's last name), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).",List all users who are associated with a specific project ID.,SELECT * FROM public.users WHERE project_id = 123;
"The ""users_in_campaigns"" table represents information about users in campaigns and has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean value representing whether the user was caught, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean value representing whether the user opened a campaign, with a default value of false), ""sent"" (a boolean value representing whether a campaign was sent to the user, with a default value of false), ""trained"" (a boolean value representing whether the user is trained, with a default value of false), ""trained_at"" (a timestamp indicating when the user was trained), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean value representing whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean value representing whether training is in progress, with a default value of false).
The ""users"" table represents information about users and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email address), ""firstname"" (a character varying field for the user's first name), ""lastname"" (a character varying field for the user's last name), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).",Find users who are not compromised and have not been trained.,SELECT * FROM public.users WHERE compromised = false AND id NOT IN (SELECT user_id FROM public.users_in_campaigns WHERE trained = true);
"The ""users_in_campaigns"" table represents information about users in campaigns and has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean value representing whether the user was caught, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean value representing whether the user opened a campaign, with a default value of false), ""sent"" (a boolean value representing whether a campaign was sent to the user, with a default value of false), ""trained"" (a boolean value representing whether the user is trained, with a default value of false), ""trained_at"" (a timestamp indicating when the user was trained), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean value representing whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean value representing whether training is in progress, with a default value of false).
The ""users"" table represents information about users and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email address), ""firstname"" (a character varying field for the user's first name), ""lastname"" (a character varying field for the user's last name), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).",Retrieve the user IDs who have not been caught.,SELECT user_id FROM public.users_in_campaigns WHERE caught = false;
"The ""users_in_campaigns"" table represents information about users in campaigns and has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean value representing whether the user was caught, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean value representing whether the user opened a campaign, with a default value of false), ""sent"" (a boolean value representing whether a campaign was sent to the user, with a default value of false), ""trained"" (a boolean value representing whether the user is trained, with a default value of false), ""trained_at"" (a timestamp indicating when the user was trained), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean value representing whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean value representing whether training is in progress, with a default value of false).
The ""users"" table represents information about users and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email address), ""firstname"" (a character varying field for the user's first name), ""lastname"" (a character varying field for the user's last name), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).",Get the user email addresses for those who have been sent training.,SELECT u.email FROM public.users_in_campaigns AS uc INNER JOIN public.users AS u ON uc.user_id = u.id WHERE training_sent = true;
"The ""users_in_campaigns"" table represents information about users in campaigns and has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean value representing whether the user was caught, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean value representing whether the user opened a campaign, with a default value of false), ""sent"" (a boolean value representing whether a campaign was sent to the user, with a default value of false), ""trained"" (a boolean value representing whether the user is trained, with a default value of false), ""trained_at"" (a timestamp indicating when the user was trained), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean value representing whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean value representing whether training is in progress, with a default value of false).
The ""users"" table represents information about users and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email address), ""firstname"" (a character varying field for the user's first name), ""lastname"" (a character varying field for the user's last name), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).",Show users who have been trained and are currently in training.,SELECT * FROM public.users_in_campaigns WHERE trained = true AND training_in_progress = true;
"The ""users_in_campaigns"" table represents information about users in campaigns and has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean value representing whether the user was caught, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean value representing whether the user opened a campaign, with a default value of false), ""sent"" (a boolean value representing whether a campaign was sent to the user, with a default value of false), ""trained"" (a boolean value representing whether the user is trained, with a default value of false), ""trained_at"" (a timestamp indicating when the user was trained), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean value representing whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean value representing whether training is in progress, with a default value of false).
The ""users"" table represents information about users and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email address), ""firstname"" (a character varying field for the user's first name), ""lastname"" (a character varying field for the user's last name), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).",List all users associated with a specific company ID.,SELECT * FROM public.users WHERE company_id = 456;
"The ""users_in_campaigns"" table represents information about users in campaigns and has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean value representing whether the user was caught, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean value representing whether the user opened a campaign, with a default value of false), ""sent"" (a boolean value representing whether a campaign was sent to the user, with a default value of false), ""trained"" (a boolean value representing whether the user is trained, with a default value of false), ""trained_at"" (a timestamp indicating when the user was trained), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean value representing whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean value representing whether training is in progress, with a default value of false).
The ""users"" table represents information about users and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email address), ""firstname"" (a character varying field for the user's first name), ""lastname"" (a character varying field for the user's last name), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).",Find users who have been compromised and are offended.,SELECT * FROM public.users WHERE compromised = true AND offended = true;
"The ""users_in_campaigns"" table represents information about users in campaigns and has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean value representing whether the user was caught, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean value representing whether the user opened a campaign, with a default value of false), ""sent"" (a boolean value representing whether a campaign was sent to the user, with a default value of false), ""trained"" (a boolean value representing whether the user is trained, with a default value of false), ""trained_at"" (a timestamp indicating when the user was trained), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean value representing whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean value representing whether training is in progress, with a default value of false).
The ""users"" table represents information about users and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email address), ""firstname"" (a character varying field for the user's first name), ""lastname"" (a character varying field for the user's last name), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).",Retrieve the user IDs for those who have been simulated and offended.,SELECT id FROM public.users WHERE simulated = true AND offended = true;
"The ""users_in_campaigns"" table represents information about users in campaigns and has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean value representing whether the user was caught, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean value representing whether the user opened a campaign, with a default value of false), ""sent"" (a boolean value representing whether a campaign was sent to the user, with a default value of false), ""trained"" (a boolean value representing whether the user is trained, with a default value of false), ""trained_at"" (a timestamp indicating when the user was trained), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean value representing whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean value representing whether training is in progress, with a default value of false).
The ""users"" table represents information about users and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email address), ""firstname"" (a character varying field for the user's first name), ""lastname"" (a character varying field for the user's last name), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).",Get the user details for users who have been trained but not caught.,SELECT * FROM public.users WHERE id IN (SELECT user_id FROM public.users_in_campaigns WHERE trained = true) AND id NOT IN (SELECT user_id FROM public.users_in_campaigns WHERE caught = true);
"The ""users_in_campaigns"" table represents information about users in campaigns and has several columns, including ""campaign_id"" (a reference to the ""campaign"" table through a foreign key constraint), ""user_id"" (a reference to the ""users"" table through a foreign key constraint), ""caught"" (a boolean value representing whether the user was caught, with a default value of false), ""caught_at"" (a timestamp indicating when the user was caught), ""opened"" (a boolean value representing whether the user opened a campaign, with a default value of false), ""sent"" (a boolean value representing whether a campaign was sent to the user, with a default value of false), ""trained"" (a boolean value representing whether the user is trained, with a default value of false), ""trained_at"" (a timestamp indicating when the user was trained), ""training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""training_sent"" (a boolean value representing whether training was sent to the user, with a default value of false), and ""training_in_progress"" (a boolean value representing whether training is in progress, with a default value of false).
The ""users"" table represents information about users and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value representing whether the user is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the user was last updated), ""email"" (a character varying field for the user's email address), ""firstname"" (a character varying field for the user's first name), ""lastname"" (a character varying field for the user's last name), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""role_id"" (a reference to the ""roles"" table through a foreign key constraint), ""offended"" (a boolean value representing whether the user is offended, with a default value of false), ""compromised"" (a boolean value representing whether the user is compromised, with a default value of false), and ""simulated"" (a boolean value representing whether the user is simulated, with a default value of false).",Show users who have been compromised and are associated with a project.,SELECT * FROM public.users WHERE compromised = true AND project_id IS NOT NULL;
"The ""campaign"" table contains information about campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating whether the campaign uses a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating whether the campaign is scheduled), ""launched"" (a boolean value indicating whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign's name), ""owner"" (a character varying field for the campaign's owner), ""schedule_time"" (a timestamp indicating the campaign's scheduled time), ""subject"" (a character varying field for the campaign's subject), ""type"" (a character varying field for the campaign's type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer representing the campaign's status), ""is_auto_training"" (a boolean value indicating whether auto-training is enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer representing the reminders' frequency), ""reminders_number"" (an integer representing the number of reminders), and ""timezone"" (a character varying field for the campaign's timezone).
The ""attack_techniques"" table contains information about attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a character varying field describing the attack technique), ""icon"" (a character varying field for the attack technique's icon), and ""name"" (a unique character varying field representing the attack technique's name).",Find all campaign names and their owners.,"SELECT name, owner FROM public.campaign;"
"The ""campaign"" table contains information about campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating whether the campaign uses a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating whether the campaign is scheduled), ""launched"" (a boolean value indicating whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign's name), ""owner"" (a character varying field for the campaign's owner), ""schedule_time"" (a timestamp indicating the campaign's scheduled time), ""subject"" (a character varying field for the campaign's subject), ""type"" (a character varying field for the campaign's type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer representing the campaign's status), ""is_auto_training"" (a boolean value indicating whether auto-training is enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer representing the reminders' frequency), ""reminders_number"" (an integer representing the number of reminders), and ""timezone"" (a character varying field for the campaign's timezone).
The ""attack_techniques"" table contains information about attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a character varying field describing the attack technique), ""icon"" (a character varying field for the attack technique's icon), and ""name"" (a unique character varying field representing the attack technique's name).",Retrieve the campaign IDs with scheduled reminders.,SELECT id FROM public.campaign WHERE has_reminders = true AND is_scheduled = true;
"The ""campaign"" table contains information about campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating whether the campaign uses a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating whether the campaign is scheduled), ""launched"" (a boolean value indicating whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign's name), ""owner"" (a character varying field for the campaign's owner), ""schedule_time"" (a timestamp indicating the campaign's scheduled time), ""subject"" (a character varying field for the campaign's subject), ""type"" (a character varying field for the campaign's type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer representing the campaign's status), ""is_auto_training"" (a boolean value indicating whether auto-training is enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer representing the reminders' frequency), ""reminders_number"" (an integer representing the number of reminders), and ""timezone"" (a character varying field for the campaign's timezone).
The ""attack_techniques"" table contains information about attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a character varying field describing the attack technique), ""icon"" (a character varying field for the attack technique's icon), and ""name"" (a unique character varying field representing the attack technique's name).",Show the names of campaigns executed after a certain timestamp.,SELECT name FROM public.campaign WHERE executed = true AND executed_at > '2023-01-01';
"The ""campaign"" table contains information about campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating whether the campaign uses a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating whether the campaign is scheduled), ""launched"" (a boolean value indicating whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign's name), ""owner"" (a character varying field for the campaign's owner), ""schedule_time"" (a timestamp indicating the campaign's scheduled time), ""subject"" (a character varying field for the campaign's subject), ""type"" (a character varying field for the campaign's type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer representing the campaign's status), ""is_auto_training"" (a boolean value indicating whether auto-training is enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer representing the reminders' frequency), ""reminders_number"" (an integer representing the number of reminders), and ""timezone"" (a character varying field for the campaign's timezone).
The ""attack_techniques"" table contains information about attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a character varying field describing the attack technique), ""icon"" (a character varying field for the attack technique's icon), and ""name"" (a unique character varying field representing the attack technique's name).",Get the campaign subjects and their associated attack techniques.,"SELECT subject, (SELECT name FROM public.attack_techniques WHERE id = technique_id) FROM public.campaign;"
"The ""campaign"" table contains information about campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating whether the campaign uses a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating whether the campaign is scheduled), ""launched"" (a boolean value indicating whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign's name), ""owner"" (a character varying field for the campaign's owner), ""schedule_time"" (a timestamp indicating the campaign's scheduled time), ""subject"" (a character varying field for the campaign's subject), ""type"" (a character varying field for the campaign's type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer representing the campaign's status), ""is_auto_training"" (a boolean value indicating whether auto-training is enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer representing the reminders' frequency), ""reminders_number"" (an integer representing the number of reminders), and ""timezone"" (a character varying field for the campaign's timezone).
The ""attack_techniques"" table contains information about attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a character varying field describing the attack technique), ""icon"" (a character varying field for the attack technique's icon), and ""name"" (a unique character varying field representing the attack technique's name).",List campaigns that are not enabled.,SELECT * FROM public.campaign WHERE is_enabled = false;
"The ""campaign"" table contains information about campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating whether the campaign uses a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating whether the campaign is scheduled), ""launched"" (a boolean value indicating whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign's name), ""owner"" (a character varying field for the campaign's owner), ""schedule_time"" (a timestamp indicating the campaign's scheduled time), ""subject"" (a character varying field for the campaign's subject), ""type"" (a character varying field for the campaign's type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer representing the campaign's status), ""is_auto_training"" (a boolean value indicating whether auto-training is enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer representing the reminders' frequency), ""reminders_number"" (an integer representing the number of reminders), and ""timezone"" (a character varying field for the campaign's timezone).
The ""attack_techniques"" table contains information about attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a character varying field describing the attack technique), ""icon"" (a character varying field for the attack technique's icon), and ""name"" (a unique character varying field representing the attack technique's name).",Find campaigns that have custom templates and are scheduled.,SELECT * FROM public.campaign WHERE has_custom_template = true AND is_scheduled = true;
"The ""campaign"" table contains information about campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating whether the campaign uses a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating whether the campaign is scheduled), ""launched"" (a boolean value indicating whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign's name), ""owner"" (a character varying field for the campaign's owner), ""schedule_time"" (a timestamp indicating the campaign's scheduled time), ""subject"" (a character varying field for the campaign's subject), ""type"" (a character varying field for the campaign's type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer representing the campaign's status), ""is_auto_training"" (a boolean value indicating whether auto-training is enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer representing the reminders' frequency), ""reminders_number"" (an integer representing the number of reminders), and ""timezone"" (a character varying field for the campaign's timezone).
The ""attack_techniques"" table contains information about attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a character varying field describing the attack technique), ""icon"" (a character varying field for the attack technique's icon), and ""name"" (a unique character varying field representing the attack technique's name).",Retrieve the campaign IDs with auto-training enabled.,SELECT id FROM public.campaign WHERE is_auto_training = true;
"The ""campaign"" table contains information about campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating whether the campaign uses a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating whether the campaign is scheduled), ""launched"" (a boolean value indicating whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign's name), ""owner"" (a character varying field for the campaign's owner), ""schedule_time"" (a timestamp indicating the campaign's scheduled time), ""subject"" (a character varying field for the campaign's subject), ""type"" (a character varying field for the campaign's type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer representing the campaign's status), ""is_auto_training"" (a boolean value indicating whether auto-training is enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer representing the reminders' frequency), ""reminders_number"" (an integer representing the number of reminders), and ""timezone"" (a character varying field for the campaign's timezone).
The ""attack_techniques"" table contains information about attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a character varying field describing the attack technique), ""icon"" (a character varying field for the attack technique's icon), and ""name"" (a unique character varying field representing the attack technique's name).",Show the names of campaigns with a specific status.,SELECT name FROM public.campaign WHERE status = 2;
"The ""campaign"" table contains information about campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating whether the campaign uses a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating whether the campaign is scheduled), ""launched"" (a boolean value indicating whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign's name), ""owner"" (a character varying field for the campaign's owner), ""schedule_time"" (a timestamp indicating the campaign's scheduled time), ""subject"" (a character varying field for the campaign's subject), ""type"" (a character varying field for the campaign's type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer representing the campaign's status), ""is_auto_training"" (a boolean value indicating whether auto-training is enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer representing the reminders' frequency), ""reminders_number"" (an integer representing the number of reminders), and ""timezone"" (a character varying field for the campaign's timezone).
The ""attack_techniques"" table contains information about attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a character varying field describing the attack technique), ""icon"" (a character varying field for the attack technique's icon), and ""name"" (a unique character varying field representing the attack technique's name).",Get campaign IDs and their corresponding project IDs.,"SELECT id, project_id FROM public.campaign;"
"The ""campaign"" table contains information about campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating whether the campaign uses a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating whether the campaign is scheduled), ""launched"" (a boolean value indicating whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign's name), ""owner"" (a character varying field for the campaign's owner), ""schedule_time"" (a timestamp indicating the campaign's scheduled time), ""subject"" (a character varying field for the campaign's subject), ""type"" (a character varying field for the campaign's type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer representing the campaign's status), ""is_auto_training"" (a boolean value indicating whether auto-training is enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer representing the reminders' frequency), ""reminders_number"" (an integer representing the number of reminders), and ""timezone"" (a character varying field for the campaign's timezone).
The ""attack_techniques"" table contains information about attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a character varying field describing the attack technique), ""icon"" (a character varying field for the attack technique's icon), and ""name"" (a unique character varying field representing the attack technique's name).",List campaigns that have not been launched.,SELECT * FROM public.campaign WHERE launched = false;
"The ""campaign"" table contains information about campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating whether the campaign uses a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating whether the campaign is scheduled), ""launched"" (a boolean value indicating whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign's name), ""owner"" (a character varying field for the campaign's owner), ""schedule_time"" (a timestamp indicating the campaign's scheduled time), ""subject"" (a character varying field for the campaign's subject), ""type"" (a character varying field for the campaign's type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer representing the campaign's status), ""is_auto_training"" (a boolean value indicating whether auto-training is enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer representing the reminders' frequency), ""reminders_number"" (an integer representing the number of reminders), and ""timezone"" (a character varying field for the campaign's timezone).
The ""attack_techniques"" table contains information about attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a character varying field describing the attack technique), ""icon"" (a character varying field for the attack technique's icon), and ""name"" (a unique character varying field representing the attack technique's name).",Find campaigns that belong to a specific project.,SELECT * FROM public.campaign WHERE project_id = 123;
"The ""campaign"" table contains information about campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating whether the campaign uses a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating whether the campaign is scheduled), ""launched"" (a boolean value indicating whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign's name), ""owner"" (a character varying field for the campaign's owner), ""schedule_time"" (a timestamp indicating the campaign's scheduled time), ""subject"" (a character varying field for the campaign's subject), ""type"" (a character varying field for the campaign's type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer representing the campaign's status), ""is_auto_training"" (a boolean value indicating whether auto-training is enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer representing the reminders' frequency), ""reminders_number"" (an integer representing the number of reminders), and ""timezone"" (a character varying field for the campaign's timezone).
The ""attack_techniques"" table contains information about attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a character varying field describing the attack technique), ""icon"" (a character varying field for the attack technique's icon), and ""name"" (a unique character varying field representing the attack technique's name).",Retrieve the campaign names that use a custom template.,SELECT name FROM public.campaign WHERE has_custom_template = true;
"The ""campaign"" table contains information about campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating whether the campaign uses a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating whether the campaign is scheduled), ""launched"" (a boolean value indicating whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign's name), ""owner"" (a character varying field for the campaign's owner), ""schedule_time"" (a timestamp indicating the campaign's scheduled time), ""subject"" (a character varying field for the campaign's subject), ""type"" (a character varying field for the campaign's type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer representing the campaign's status), ""is_auto_training"" (a boolean value indicating whether auto-training is enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer representing the reminders' frequency), ""reminders_number"" (an integer representing the number of reminders), and ""timezone"" (a character varying field for the campaign's timezone).
The ""attack_techniques"" table contains information about attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a character varying field describing the attack technique), ""icon"" (a character varying field for the attack technique's icon), and ""name"" (a unique character varying field representing the attack technique's name).",Show campaigns executed within a certain timezone.,SELECT name FROM public.campaign WHERE timezone = 'UTC';
"The ""campaign"" table contains information about campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating whether the campaign uses a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating whether the campaign is scheduled), ""launched"" (a boolean value indicating whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign's name), ""owner"" (a character varying field for the campaign's owner), ""schedule_time"" (a timestamp indicating the campaign's scheduled time), ""subject"" (a character varying field for the campaign's subject), ""type"" (a character varying field for the campaign's type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer representing the campaign's status), ""is_auto_training"" (a boolean value indicating whether auto-training is enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer representing the reminders' frequency), ""reminders_number"" (an integer representing the number of reminders), and ""timezone"" (a character varying field for the campaign's timezone).
The ""attack_techniques"" table contains information about attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a character varying field describing the attack technique), ""icon"" (a character varying field for the attack technique's icon), and ""name"" (a unique character varying field representing the attack technique's name).",Get campaign names that are not associated with attack techniques.,SELECT name FROM public.campaign WHERE technique_id IS NULL;
"The ""campaign"" table contains information about campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating whether the campaign uses a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating whether the campaign is scheduled), ""launched"" (a boolean value indicating whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign's name), ""owner"" (a character varying field for the campaign's owner), ""schedule_time"" (a timestamp indicating the campaign's scheduled time), ""subject"" (a character varying field for the campaign's subject), ""type"" (a character varying field for the campaign's type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer representing the campaign's status), ""is_auto_training"" (a boolean value indicating whether auto-training is enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer representing the reminders' frequency), ""reminders_number"" (an integer representing the number of reminders), and ""timezone"" (a character varying field for the campaign's timezone).
The ""attack_techniques"" table contains information about attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a character varying field describing the attack technique), ""icon"" (a character varying field for the attack technique's icon), and ""name"" (a unique character varying field representing the attack technique's name).",Find campaigns that have reminders with a specific frequency.,SELECT * FROM public.campaign WHERE reminders_frequency = 3;
"The ""campaign"" table contains information about campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating whether the campaign uses a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating whether the campaign is scheduled), ""launched"" (a boolean value indicating whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign's name), ""owner"" (a character varying field for the campaign's owner), ""schedule_time"" (a timestamp indicating the campaign's scheduled time), ""subject"" (a character varying field for the campaign's subject), ""type"" (a character varying field for the campaign's type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer representing the campaign's status), ""is_auto_training"" (a boolean value indicating whether auto-training is enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer representing the reminders' frequency), ""reminders_number"" (an integer representing the number of reminders), and ""timezone"" (a character varying field for the campaign's timezone).
The ""attack_techniques"" table contains information about attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a character varying field describing the attack technique), ""icon"" (a character varying field for the attack technique's icon), and ""name"" (a unique character varying field representing the attack technique's name).",Retrieve the campaign IDs that were last updated.,SELECT id FROM public.campaign ORDER BY updated_at DESC;
"The ""campaign"" table contains information about campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating whether the campaign uses a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating whether the campaign is scheduled), ""launched"" (a boolean value indicating whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign's name), ""owner"" (a character varying field for the campaign's owner), ""schedule_time"" (a timestamp indicating the campaign's scheduled time), ""subject"" (a character varying field for the campaign's subject), ""type"" (a character varying field for the campaign's type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer representing the campaign's status), ""is_auto_training"" (a boolean value indicating whether auto-training is enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer representing the reminders' frequency), ""reminders_number"" (an integer representing the number of reminders), and ""timezone"" (a character varying field for the campaign's timezone).
The ""attack_techniques"" table contains information about attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a character varying field describing the attack technique), ""icon"" (a character varying field for the attack technique's icon), and ""name"" (a unique character varying field representing the attack technique's name).",Show the names of campaigns with owners whose names start with 'A'.,SELECT name FROM public.campaign WHERE owner LIKE 'A%';
"The ""campaign"" table contains information about campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating whether the campaign uses a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating whether the campaign is scheduled), ""launched"" (a boolean value indicating whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign's name), ""owner"" (a character varying field for the campaign's owner), ""schedule_time"" (a timestamp indicating the campaign's scheduled time), ""subject"" (a character varying field for the campaign's subject), ""type"" (a character varying field for the campaign's type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer representing the campaign's status), ""is_auto_training"" (a boolean value indicating whether auto-training is enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer representing the reminders' frequency), ""reminders_number"" (an integer representing the number of reminders), and ""timezone"" (a character varying field for the campaign's timezone).
The ""attack_techniques"" table contains information about attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a character varying field describing the attack technique), ""icon"" (a character varying field for the attack technique's icon), and ""name"" (a unique character varying field representing the attack technique's name).",Get campaign IDs that do not have associated email profiles.,SELECT id FROM public.campaign WHERE email_profile_id IS NULL;
"The ""campaign"" table contains information about campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating whether the campaign uses a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating whether the campaign is scheduled), ""launched"" (a boolean value indicating whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign's name), ""owner"" (a character varying field for the campaign's owner), ""schedule_time"" (a timestamp indicating the campaign's scheduled time), ""subject"" (a character varying field for the campaign's subject), ""type"" (a character varying field for the campaign's type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer representing the campaign's status), ""is_auto_training"" (a boolean value indicating whether auto-training is enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer representing the reminders' frequency), ""reminders_number"" (an integer representing the number of reminders), and ""timezone"" (a character varying field for the campaign's timezone).
The ""attack_techniques"" table contains information about attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a character varying field describing the attack technique), ""icon"" (a character varying field for the attack technique's icon), and ""name"" (a unique character varying field representing the attack technique's name).",List campaigns executed before a certain timestamp.,SELECT * FROM public.campaign WHERE executed = true AND executed_at < '2023-01-01';
"The ""campaign"" table contains information about campaigns and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value representing whether the campaign is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the campaign was last updated), ""executed"" (a boolean value indicating whether the campaign has been executed, with a default value of false), ""executed_at"" (a timestamp indicating when the campaign was executed), ""has_custom_template"" (a boolean value indicating whether the campaign uses a custom template, with a default value of false), ""is_scheduled"" (a boolean value indicating whether the campaign is scheduled), ""launched"" (a boolean value indicating whether the campaign has been launched, with a default value of false), ""name"" (a character varying field for the campaign's name), ""owner"" (a character varying field for the campaign's owner), ""schedule_time"" (a timestamp indicating the campaign's scheduled time), ""subject"" (a character varying field for the campaign's subject), ""type"" (a character varying field for the campaign's type), ""email_profile_id"" (a reference to the ""email_profile"" table through a foreign key constraint), ""project_id"" (a reference to the ""projects"" table through a foreign key constraint), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""status"" (an integer representing the campaign's status), ""is_auto_training"" (a boolean value indicating whether auto-training is enabled, with a default value of false), ""auto_training_id"" (a reference to the ""training_hub"" table through a foreign key constraint), ""has_reminders"" (a boolean value indicating whether the campaign has reminders, with a default value of false), ""reminders_frequency"" (an integer representing the reminders' frequency), ""reminders_number"" (an integer representing the number of reminders), and ""timezone"" (a character varying field for the campaign's timezone).
The ""attack_techniques"" table contains information about attack techniques and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the attack technique was created), ""is_enabled"" (a boolean value representing whether the attack technique is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the attack technique was last updated), ""description"" (a character varying field describing the attack technique), ""icon"" (a character varying field for the attack technique's icon), and ""name"" (a unique character varying field representing the attack technique's name).",Find campaigns that are scheduled but not launched.,SELECT * FROM public.campaign WHERE is_scheduled = true AND launched = false;
"The ""training_videos"" table contains information about training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a character varying field describing the training video), ""name"" (a unique character varying field representing the training video's name), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Find all training video names and their descriptions.,"SELECT name, description FROM public.training_videos;"
"The ""training_videos"" table contains information about training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a character varying field describing the training video), ""name"" (a unique character varying field representing the training video's name), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Retrieve the IDs of training videos with a specific poster.,SELECT id FROM public.training_videos WHERE poster_id = 123;
"The ""training_videos"" table contains information about training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a character varying field describing the training video), ""name"" (a unique character varying field representing the training video's name), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Show the names of training videos with a certain file extension.,SELECT name FROM public.training_videos WHERE name LIKE '%.mp4';
"The ""training_videos"" table contains information about training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a character varying field describing the training video), ""name"" (a unique character varying field representing the training video's name), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Get the names of training videos with a duration greater than 60.,SELECT name FROM public.training_videos tv JOIN public.documents d ON tv.path_id = d.id WHERE d.duration > 60;
"The ""training_videos"" table contains information about training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a character varying field describing the training video), ""name"" (a unique character varying field representing the training video's name), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",List training videos that are not enabled.,SELECT * FROM public.training_videos WHERE is_enabled = false;
"The ""training_videos"" table contains information about training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a character varying field describing the training video), ""name"" (a unique character varying field representing the training video's name), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Find training videos with a specific MIME type.,SELECT * FROM public.training_videos tv JOIN public.documents d ON tv.path_id = d.id WHERE d.mime_type = 'video/mp4';
"The ""training_videos"" table contains information about training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a character varying field describing the training video), ""name"" (a unique character varying field representing the training video's name), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Retrieve training video IDs with unique names.,SELECT id FROM public.training_videos WHERE name IN (SELECT name FROM public.training_videos GROUP BY name HAVING COUNT(name) = 1);
"The ""training_videos"" table contains information about training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a character varying field describing the training video), ""name"" (a unique character varying field representing the training video's name), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Show the descriptions of training videos with certain file sizes.,SELECT description FROM public.training_videos tv JOIN public.documents d ON tv.path_id = d.id WHERE d.size > 1000000;
"The ""training_videos"" table contains information about training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a character varying field describing the training video), ""name"" (a unique character varying field representing the training video's name), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Get training video IDs that were last updated.,SELECT id FROM public.training_videos ORDER BY updated_at DESC;
"The ""training_videos"" table contains information about training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a character varying field describing the training video), ""name"" (a unique character varying field representing the training video's name), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Find training videos with specific file paths.,SELECT * FROM public.training_videos tv JOIN public.documents d ON tv.path_id = d.id WHERE d.path LIKE '/videos/%';
"The ""training_videos"" table contains information about training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a character varying field describing the training video), ""name"" (a unique character varying field representing the training video's name), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",List training videos with no associated documents.,SELECT * FROM public.training_videos WHERE path_id IS NULL;
"The ""training_videos"" table contains information about training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a character varying field describing the training video), ""name"" (a unique character varying field representing the training video's name), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Retrieve training video names that are not enabled.,SELECT name FROM public.training_videos WHERE is_enabled = false;
"The ""training_videos"" table contains information about training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a character varying field describing the training video), ""name"" (a unique character varying field representing the training video's name), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Show the names of training videos that are not unique.,SELECT name FROM public.training_videos GROUP BY name HAVING COUNT(name) > 1;
"The ""training_videos"" table contains information about training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a character varying field describing the training video), ""name"" (a unique character varying field representing the training video's name), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Get training video IDs with descriptions containing 'tutorial'.,SELECT id FROM public.training_videos WHERE description LIKE '%tutorial%';
"The ""training_videos"" table contains information about training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a character varying field describing the training video), ""name"" (a unique character varying field representing the training video's name), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Find training videos created after a specific timestamp.,SELECT * FROM public.training_videos WHERE created_at > '2023-01-01';
"The ""training_videos"" table contains information about training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a character varying field describing the training video), ""name"" (a unique character varying field representing the training video's name), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Retrieve training video names with certain poster IDs.,"SELECT name FROM public.training_videos WHERE poster_id IN (123, 456);"
"The ""training_videos"" table contains information about training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a character varying field describing the training video), ""name"" (a unique character varying field representing the training video's name), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Get training video IDs with descriptions containing 'demo'.,SELECT id FROM public.training_videos WHERE description LIKE '%demo%';
"The ""training_videos"" table contains information about training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a character varying field describing the training video), ""name"" (a unique character varying field representing the training video's name), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Show the names of training videos with a certain file extension.,SELECT name FROM public.training_videos WHERE name LIKE '%.avi';
"The ""training_videos"" table contains information about training videos and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the training video was created), ""is_enabled"" (a boolean value representing whether the training video is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the training video was last updated), ""description"" (a character varying field describing the training video), ""name"" (a unique character varying field representing the training video's name), ""poster_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""path_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Find training videos that are associated with documents.,SELECT * FROM public.training_videos WHERE path_id IS NOT NULL;
"The ""email_template"" table contains information about email templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a character varying field describing the email template), ""file_path"" (a character varying field indicating the file path of the email template), ""title"" (a character varying field representing the email template's title), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a character varying field indicating the brand associated with the email template), ""industry"" (a character varying field indicating the industry associated with the email template), ""source"" (a character varying field indicating the source of the email template), ""subject"" (a character varying field representing the email template's subject), ""theme"" (a character varying field indicating the theme of the email template), ""compromise_rate"" (a double precision field indicating the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Find all email templates with their titles and subjects.,"SELECT title, subject FROM public.email_template;"
"The ""email_template"" table contains information about email templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a character varying field describing the email template), ""file_path"" (a character varying field indicating the file path of the email template), ""title"" (a character varying field representing the email template's title), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a character varying field indicating the brand associated with the email template), ""industry"" (a character varying field indicating the industry associated with the email template), ""source"" (a character varying field indicating the source of the email template), ""subject"" (a character varying field representing the email template's subject), ""theme"" (a character varying field indicating the theme of the email template), ""compromise_rate"" (a double precision field indicating the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Retrieve the IDs of email templates with a specific technique.,SELECT id FROM public.email_template WHERE technique_id = 123;
"The ""email_template"" table contains information about email templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a character varying field describing the email template), ""file_path"" (a character varying field indicating the file path of the email template), ""title"" (a character varying field representing the email template's title), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a character varying field indicating the brand associated with the email template), ""industry"" (a character varying field indicating the industry associated with the email template), ""source"" (a character varying field indicating the source of the email template), ""subject"" (a character varying field representing the email template's subject), ""theme"" (a character varying field indicating the theme of the email template), ""compromise_rate"" (a double precision field indicating the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Show the titles of email templates with a certain compromise rate.,SELECT title FROM public.email_template WHERE compromise_rate > 0.5;
"The ""email_template"" table contains information about email templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a character varying field describing the email template), ""file_path"" (a character varying field indicating the file path of the email template), ""title"" (a character varying field representing the email template's title), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a character varying field indicating the brand associated with the email template), ""industry"" (a character varying field indicating the industry associated with the email template), ""source"" (a character varying field indicating the source of the email template), ""subject"" (a character varying field representing the email template's subject), ""theme"" (a character varying field indicating the theme of the email template), ""compromise_rate"" (a double precision field indicating the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Get the descriptions of email templates with specific file paths.,SELECT description FROM public.email_template et JOIN public.documents d ON et.file_id = d.id WHERE d.path LIKE '/templates/%';
"The ""email_template"" table contains information about email templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a character varying field describing the email template), ""file_path"" (a character varying field indicating the file path of the email template), ""title"" (a character varying field representing the email template's title), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a character varying field indicating the brand associated with the email template), ""industry"" (a character varying field indicating the industry associated with the email template), ""source"" (a character varying field indicating the source of the email template), ""subject"" (a character varying field representing the email template's subject), ""theme"" (a character varying field indicating the theme of the email template), ""compromise_rate"" (a double precision field indicating the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",List email templates that are not enabled.,SELECT * FROM public.email_template WHERE is_enabled = false;
"The ""email_template"" table contains information about email templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a character varying field describing the email template), ""file_path"" (a character varying field indicating the file path of the email template), ""title"" (a character varying field representing the email template's title), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a character varying field indicating the brand associated with the email template), ""industry"" (a character varying field indicating the industry associated with the email template), ""source"" (a character varying field indicating the source of the email template), ""subject"" (a character varying field representing the email template's subject), ""theme"" (a character varying field indicating the theme of the email template), ""compromise_rate"" (a double precision field indicating the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Find email templates with a specific MIME type.,SELECT * FROM public.email_template et JOIN public.documents d ON et.file_id = d.id WHERE d.mime_type = 'text/html';
"The ""email_template"" table contains information about email templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a character varying field describing the email template), ""file_path"" (a character varying field indicating the file path of the email template), ""title"" (a character varying field representing the email template's title), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a character varying field indicating the brand associated with the email template), ""industry"" (a character varying field indicating the industry associated with the email template), ""source"" (a character varying field indicating the source of the email template), ""subject"" (a character varying field representing the email template's subject), ""theme"" (a character varying field indicating the theme of the email template), ""compromise_rate"" (a double precision field indicating the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Retrieve email template IDs with unique subjects.,SELECT id FROM public.email_template WHERE subject IN (SELECT subject FROM public.email_template GROUP BY subject HAVING COUNT(subject) = 1);
"The ""email_template"" table contains information about email templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a character varying field describing the email template), ""file_path"" (a character varying field indicating the file path of the email template), ""title"" (a character varying field representing the email template's title), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a character varying field indicating the brand associated with the email template), ""industry"" (a character varying field indicating the industry associated with the email template), ""source"" (a character varying field indicating the source of the email template), ""subject"" (a character varying field representing the email template's subject), ""theme"" (a character varying field indicating the theme of the email template), ""compromise_rate"" (a double precision field indicating the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Show the descriptions of email templates with a certain brand.,SELECT description FROM public.email_template WHERE brand = 'ExampleBrand';
"The ""email_template"" table contains information about email templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a character varying field describing the email template), ""file_path"" (a character varying field indicating the file path of the email template), ""title"" (a character varying field representing the email template's title), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a character varying field indicating the brand associated with the email template), ""industry"" (a character varying field indicating the industry associated with the email template), ""source"" (a character varying field indicating the source of the email template), ""subject"" (a character varying field representing the email template's subject), ""theme"" (a character varying field indicating the theme of the email template), ""compromise_rate"" (a double precision field indicating the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Get email template IDs that were last updated.,SELECT id FROM public.email_template ORDER BY updated_at DESC;
"The ""email_template"" table contains information about email templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a character varying field describing the email template), ""file_path"" (a character varying field indicating the file path of the email template), ""title"" (a character varying field representing the email template's title), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a character varying field indicating the brand associated with the email template), ""industry"" (a character varying field indicating the industry associated with the email template), ""source"" (a character varying field indicating the source of the email template), ""subject"" (a character varying field representing the email template's subject), ""theme"" (a character varying field indicating the theme of the email template), ""compromise_rate"" (a double precision field indicating the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",List email templates with no associated documents.,SELECT * FROM public.email_template WHERE file_id IS NULL;
"The ""email_template"" table contains information about email templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a character varying field describing the email template), ""file_path"" (a character varying field indicating the file path of the email template), ""title"" (a character varying field representing the email template's title), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a character varying field indicating the brand associated with the email template), ""industry"" (a character varying field indicating the industry associated with the email template), ""source"" (a character varying field indicating the source of the email template), ""subject"" (a character varying field representing the email template's subject), ""theme"" (a character varying field indicating the theme of the email template), ""compromise_rate"" (a double precision field indicating the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Retrieve email template titles that are not enabled.,SELECT title FROM public.email_template WHERE is_enabled = false;
"The ""email_template"" table contains information about email templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a character varying field describing the email template), ""file_path"" (a character varying field indicating the file path of the email template), ""title"" (a character varying field representing the email template's title), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a character varying field indicating the brand associated with the email template), ""industry"" (a character varying field indicating the industry associated with the email template), ""source"" (a character varying field indicating the source of the email template), ""subject"" (a character varying field representing the email template's subject), ""theme"" (a character varying field indicating the theme of the email template), ""compromise_rate"" (a double precision field indicating the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Show the titles of email templates that are not unique.,SELECT title FROM public.email_template GROUP BY title HAVING COUNT(title) > 1;
"The ""email_template"" table contains information about email templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a character varying field describing the email template), ""file_path"" (a character varying field indicating the file path of the email template), ""title"" (a character varying field representing the email template's title), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a character varying field indicating the brand associated with the email template), ""industry"" (a character varying field indicating the industry associated with the email template), ""source"" (a character varying field indicating the source of the email template), ""subject"" (a character varying field representing the email template's subject), ""theme"" (a character varying field indicating the theme of the email template), ""compromise_rate"" (a double precision field indicating the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Get email template IDs with descriptions containing 'tutorial'.,SELECT id FROM public.email_template WHERE description LIKE '%tutorial%';
"The ""email_template"" table contains information about email templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a character varying field describing the email template), ""file_path"" (a character varying field indicating the file path of the email template), ""title"" (a character varying field representing the email template's title), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a character varying field indicating the brand associated with the email template), ""industry"" (a character varying field indicating the industry associated with the email template), ""source"" (a character varying field indicating the source of the email template), ""subject"" (a character varying field representing the email template's subject), ""theme"" (a character varying field indicating the theme of the email template), ""compromise_rate"" (a double precision field indicating the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Find email templates created after a specific timestamp.,SELECT * FROM public.email_template WHERE created_at > '2023-01-01';
"The ""email_template"" table contains information about email templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a character varying field describing the email template), ""file_path"" (a character varying field indicating the file path of the email template), ""title"" (a character varying field representing the email template's title), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a character varying field indicating the brand associated with the email template), ""industry"" (a character varying field indicating the industry associated with the email template), ""source"" (a character varying field indicating the source of the email template), ""subject"" (a character varying field representing the email template's subject), ""theme"" (a character varying field indicating the theme of the email template), ""compromise_rate"" (a double precision field indicating the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Retrieve email template titles with certain brands.,"SELECT title FROM public.email_template WHERE brand IN ('Brand1', 'Brand2');"
"The ""email_template"" table contains information about email templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a character varying field describing the email template), ""file_path"" (a character varying field indicating the file path of the email template), ""title"" (a character varying field representing the email template's title), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a character varying field indicating the brand associated with the email template), ""industry"" (a character varying field indicating the industry associated with the email template), ""source"" (a character varying field indicating the source of the email template), ""subject"" (a character varying field representing the email template's subject), ""theme"" (a character varying field indicating the theme of the email template), ""compromise_rate"" (a double precision field indicating the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Get email template IDs with descriptions containing 'demo'.,SELECT id FROM public.email_template WHERE description LIKE '%demo%';
"The ""email_template"" table contains information about email templates and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value representing whether the email template is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the email template was last updated), ""description"" (a character varying field describing the email template), ""file_path"" (a character varying field indicating the file path of the email template), ""title"" (a character varying field representing the email template's title), ""technique_id"" (a reference to the ""attack_techniques"" table through a foreign key constraint), ""brand"" (a character varying field indicating the brand associated with the email template), ""industry"" (a character varying field indicating the industry associated with the email template), ""source"" (a character varying field indicating the source of the email template), ""subject"" (a character varying field representing the email template's subject), ""theme"" (a character varying field indicating the theme of the email template), ""compromise_rate"" (a double precision field indicating the compromise rate associated with the email template), ""file_id"" (a reference to the ""documents"" table through a foreign key constraint), and ""thumbnail_id"" (a reference to the ""documents"" table through a foreign key constraint).
The ""documents"" table contains information about documents and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the document was created), ""is_enabled"" (a boolean value representing whether the document is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the document was last updated), ""ext"" (a character varying field indicating the document's file extension), ""mime_type"" (a character varying field indicating the document's MIME type), ""node_ref"" (a character varying field that is not null and unique, representing a node reference), ""original_name"" (a character varying field indicating the document's original name), ""path"" (a character varying field indicating the document's path), ""size"" (a bigint representing the document's size), and ""duration"" (an integer indicating the document's duration).",Find email templates that are associated with documents.,SELECT * FROM public.email_template WHERE file_id IS NOT NULL;
"The ""verif_token"" table contains information about verification tokens and has several columns, including ""id"" (a unique identifier), ""expiration"" (a timestamp indicating when the token expires), ""type"" (an integer representing the token type), ""value"" (a character varying field containing the token value), and ""user_id"" (a reference to the ""admins"" table through a foreign key constraint).
The ""admins"" table contains information about administrators and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator was created), ""is_enabled"" (a boolean value representing whether the administrator is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator was last updated), ""activated"" (a boolean value representing whether the administrator is activated), ""email"" (a character varying field containing the administrator's email, which is unique and cannot be null), ""firstname"" (a character varying field representing the administrator's first name), ""image"" (a character varying field containing the administrator's image), ""job_role"" (a character varying field indicating the administrator's job role), ""lastname"" (a character varying field representing the administrator's last name), ""password"" (a character varying field containing the administrator's password), ""phone"" (a character varying field containing the administrator's phone number), ""super_admin"" (a boolean value with a default value of false, indicating whether the administrator is a super admin), ""username"" (a character varying field representing the administrator's username, which is unique and cannot be null), ""verify_time"" (a timestamp without a time zone), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).",Retrieve all verification tokens with their values and expiration.,"SELECT value, expiration FROM public.verif_token;"
"The ""verif_token"" table contains information about verification tokens and has several columns, including ""id"" (a unique identifier), ""expiration"" (a timestamp indicating when the token expires), ""type"" (an integer representing the token type), ""value"" (a character varying field containing the token value), and ""user_id"" (a reference to the ""admins"" table through a foreign key constraint).
The ""admins"" table contains information about administrators and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator was created), ""is_enabled"" (a boolean value representing whether the administrator is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator was last updated), ""activated"" (a boolean value representing whether the administrator is activated), ""email"" (a character varying field containing the administrator's email, which is unique and cannot be null), ""firstname"" (a character varying field representing the administrator's first name), ""image"" (a character varying field containing the administrator's image), ""job_role"" (a character varying field indicating the administrator's job role), ""lastname"" (a character varying field representing the administrator's last name), ""password"" (a character varying field containing the administrator's password), ""phone"" (a character varying field containing the administrator's phone number), ""super_admin"" (a boolean value with a default value of false, indicating whether the administrator is a super admin), ""username"" (a character varying field representing the administrator's username, which is unique and cannot be null), ""verify_time"" (a timestamp without a time zone), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).",Get the IDs of verification tokens with a specific user ID.,SELECT id FROM public.verif_token WHERE user_id = 123;
"The ""verif_token"" table contains information about verification tokens and has several columns, including ""id"" (a unique identifier), ""expiration"" (a timestamp indicating when the token expires), ""type"" (an integer representing the token type), ""value"" (a character varying field containing the token value), and ""user_id"" (a reference to the ""admins"" table through a foreign key constraint).
The ""admins"" table contains information about administrators and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator was created), ""is_enabled"" (a boolean value representing whether the administrator is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator was last updated), ""activated"" (a boolean value representing whether the administrator is activated), ""email"" (a character varying field containing the administrator's email, which is unique and cannot be null), ""firstname"" (a character varying field representing the administrator's first name), ""image"" (a character varying field containing the administrator's image), ""job_role"" (a character varying field indicating the administrator's job role), ""lastname"" (a character varying field representing the administrator's last name), ""password"" (a character varying field containing the administrator's password), ""phone"" (a character varying field containing the administrator's phone number), ""super_admin"" (a boolean value with a default value of false, indicating whether the administrator is a super admin), ""username"" (a character varying field representing the administrator's username, which is unique and cannot be null), ""verify_time"" (a timestamp without a time zone), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).",Show the types of verification tokens that are expired.,SELECT DISTINCT type FROM public.verif_token WHERE expiration < NOW();
"The ""verif_token"" table contains information about verification tokens and has several columns, including ""id"" (a unique identifier), ""expiration"" (a timestamp indicating when the token expires), ""type"" (an integer representing the token type), ""value"" (a character varying field containing the token value), and ""user_id"" (a reference to the ""admins"" table through a foreign key constraint).
The ""admins"" table contains information about administrators and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator was created), ""is_enabled"" (a boolean value representing whether the administrator is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator was last updated), ""activated"" (a boolean value representing whether the administrator is activated), ""email"" (a character varying field containing the administrator's email, which is unique and cannot be null), ""firstname"" (a character varying field representing the administrator's first name), ""image"" (a character varying field containing the administrator's image), ""job_role"" (a character varying field indicating the administrator's job role), ""lastname"" (a character varying field representing the administrator's last name), ""password"" (a character varying field containing the administrator's password), ""phone"" (a character varying field containing the administrator's phone number), ""super_admin"" (a boolean value with a default value of false, indicating whether the administrator is a super admin), ""username"" (a character varying field representing the administrator's username, which is unique and cannot be null), ""verify_time"" (a timestamp without a time zone), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).",Find verification tokens with a specific type and user ID.,SELECT * FROM public.verif_token WHERE type = 1 AND user_id = 456;
"The ""verif_token"" table contains information about verification tokens and has several columns, including ""id"" (a unique identifier), ""expiration"" (a timestamp indicating when the token expires), ""type"" (an integer representing the token type), ""value"" (a character varying field containing the token value), and ""user_id"" (a reference to the ""admins"" table through a foreign key constraint).
The ""admins"" table contains information about administrators and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator was created), ""is_enabled"" (a boolean value representing whether the administrator is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator was last updated), ""activated"" (a boolean value representing whether the administrator is activated), ""email"" (a character varying field containing the administrator's email, which is unique and cannot be null), ""firstname"" (a character varying field representing the administrator's first name), ""image"" (a character varying field containing the administrator's image), ""job_role"" (a character varying field indicating the administrator's job role), ""lastname"" (a character varying field representing the administrator's last name), ""password"" (a character varying field containing the administrator's password), ""phone"" (a character varying field containing the administrator's phone number), ""super_admin"" (a boolean value with a default value of false, indicating whether the administrator is a super admin), ""username"" (a character varying field representing the administrator's username, which is unique and cannot be null), ""verify_time"" (a timestamp without a time zone), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).",List verification tokens that are not expired.,SELECT * FROM public.verif_token WHERE expiration >= NOW();
"The ""verif_token"" table contains information about verification tokens and has several columns, including ""id"" (a unique identifier), ""expiration"" (a timestamp indicating when the token expires), ""type"" (an integer representing the token type), ""value"" (a character varying field containing the token value), and ""user_id"" (a reference to the ""admins"" table through a foreign key constraint).
The ""admins"" table contains information about administrators and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator was created), ""is_enabled"" (a boolean value representing whether the administrator is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator was last updated), ""activated"" (a boolean value representing whether the administrator is activated), ""email"" (a character varying field containing the administrator's email, which is unique and cannot be null), ""firstname"" (a character varying field representing the administrator's first name), ""image"" (a character varying field containing the administrator's image), ""job_role"" (a character varying field indicating the administrator's job role), ""lastname"" (a character varying field representing the administrator's last name), ""password"" (a character varying field containing the administrator's password), ""phone"" (a character varying field containing the administrator's phone number), ""super_admin"" (a boolean value with a default value of false, indicating whether the administrator is a super admin), ""username"" (a character varying field representing the administrator's username, which is unique and cannot be null), ""verify_time"" (a timestamp without a time zone), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).",Get the values of verification tokens with a specific type.,SELECT value FROM public.verif_token WHERE type = 2;
"The ""verif_token"" table contains information about verification tokens and has several columns, including ""id"" (a unique identifier), ""expiration"" (a timestamp indicating when the token expires), ""type"" (an integer representing the token type), ""value"" (a character varying field containing the token value), and ""user_id"" (a reference to the ""admins"" table through a foreign key constraint).
The ""admins"" table contains information about administrators and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator was created), ""is_enabled"" (a boolean value representing whether the administrator is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator was last updated), ""activated"" (a boolean value representing whether the administrator is activated), ""email"" (a character varying field containing the administrator's email, which is unique and cannot be null), ""firstname"" (a character varying field representing the administrator's first name), ""image"" (a character varying field containing the administrator's image), ""job_role"" (a character varying field indicating the administrator's job role), ""lastname"" (a character varying field representing the administrator's last name), ""password"" (a character varying field containing the administrator's password), ""phone"" (a character varying field containing the administrator's phone number), ""super_admin"" (a boolean value with a default value of false, indicating whether the administrator is a super admin), ""username"" (a character varying field representing the administrator's username, which is unique and cannot be null), ""verify_time"" (a timestamp without a time zone), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).",Retrieve verification token IDs for a specific user.,SELECT id FROM public.verif_token WHERE user_id = 789;
"The ""verif_token"" table contains information about verification tokens and has several columns, including ""id"" (a unique identifier), ""expiration"" (a timestamp indicating when the token expires), ""type"" (an integer representing the token type), ""value"" (a character varying field containing the token value), and ""user_id"" (a reference to the ""admins"" table through a foreign key constraint).
The ""admins"" table contains information about administrators and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator was created), ""is_enabled"" (a boolean value representing whether the administrator is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator was last updated), ""activated"" (a boolean value representing whether the administrator is activated), ""email"" (a character varying field containing the administrator's email, which is unique and cannot be null), ""firstname"" (a character varying field representing the administrator's first name), ""image"" (a character varying field containing the administrator's image), ""job_role"" (a character varying field indicating the administrator's job role), ""lastname"" (a character varying field representing the administrator's last name), ""password"" (a character varying field containing the administrator's password), ""phone"" (a character varying field containing the administrator's phone number), ""super_admin"" (a boolean value with a default value of false, indicating whether the administrator is a super admin), ""username"" (a character varying field representing the administrator's username, which is unique and cannot be null), ""verify_time"" (a timestamp without a time zone), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).",Show the types of verification tokens that are not expired.,SELECT DISTINCT type FROM public.verif_token WHERE expiration >= NOW();
"The ""verif_token"" table contains information about verification tokens and has several columns, including ""id"" (a unique identifier), ""expiration"" (a timestamp indicating when the token expires), ""type"" (an integer representing the token type), ""value"" (a character varying field containing the token value), and ""user_id"" (a reference to the ""admins"" table through a foreign key constraint).
The ""admins"" table contains information about administrators and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator was created), ""is_enabled"" (a boolean value representing whether the administrator is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator was last updated), ""activated"" (a boolean value representing whether the administrator is activated), ""email"" (a character varying field containing the administrator's email, which is unique and cannot be null), ""firstname"" (a character varying field representing the administrator's first name), ""image"" (a character varying field containing the administrator's image), ""job_role"" (a character varying field indicating the administrator's job role), ""lastname"" (a character varying field representing the administrator's last name), ""password"" (a character varying field containing the administrator's password), ""phone"" (a character varying field containing the administrator's phone number), ""super_admin"" (a boolean value with a default value of false, indicating whether the administrator is a super admin), ""username"" (a character varying field representing the administrator's username, which is unique and cannot be null), ""verify_time"" (a timestamp without a time zone), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).",Get verification tokens with specific values.,"SELECT * FROM public.verif_token WHERE value IN ('token1', 'token2');"
"The ""verif_token"" table contains information about verification tokens and has several columns, including ""id"" (a unique identifier), ""expiration"" (a timestamp indicating when the token expires), ""type"" (an integer representing the token type), ""value"" (a character varying field containing the token value), and ""user_id"" (a reference to the ""admins"" table through a foreign key constraint).
The ""admins"" table contains information about administrators and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator was created), ""is_enabled"" (a boolean value representing whether the administrator is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator was last updated), ""activated"" (a boolean value representing whether the administrator is activated), ""email"" (a character varying field containing the administrator's email, which is unique and cannot be null), ""firstname"" (a character varying field representing the administrator's first name), ""image"" (a character varying field containing the administrator's image), ""job_role"" (a character varying field indicating the administrator's job role), ""lastname"" (a character varying field representing the administrator's last name), ""password"" (a character varying field containing the administrator's password), ""phone"" (a character varying field containing the administrator's phone number), ""super_admin"" (a boolean value with a default value of false, indicating whether the administrator is a super admin), ""username"" (a character varying field representing the administrator's username, which is unique and cannot be null), ""verify_time"" (a timestamp without a time zone), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).",Find verification tokens that are associated with a user.,SELECT * FROM public.verif_token WHERE user_id IS NOT NULL;
"The ""verif_token"" table contains information about verification tokens and has several columns, including ""id"" (a unique identifier), ""expiration"" (a timestamp indicating when the token expires), ""type"" (an integer representing the token type), ""value"" (a character varying field containing the token value), and ""user_id"" (a reference to the ""admins"" table through a foreign key constraint).
The ""admins"" table contains information about administrators and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator was created), ""is_enabled"" (a boolean value representing whether the administrator is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator was last updated), ""activated"" (a boolean value representing whether the administrator is activated), ""email"" (a character varying field containing the administrator's email, which is unique and cannot be null), ""firstname"" (a character varying field representing the administrator's first name), ""image"" (a character varying field containing the administrator's image), ""job_role"" (a character varying field indicating the administrator's job role), ""lastname"" (a character varying field representing the administrator's last name), ""password"" (a character varying field containing the administrator's password), ""phone"" (a character varying field containing the administrator's phone number), ""super_admin"" (a boolean value with a default value of false, indicating whether the administrator is a super admin), ""username"" (a character varying field representing the administrator's username, which is unique and cannot be null), ""verify_time"" (a timestamp without a time zone), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).",List verification tokens with unique types.,SELECT DISTINCT type FROM public.verif_token;
"The ""verif_token"" table contains information about verification tokens and has several columns, including ""id"" (a unique identifier), ""expiration"" (a timestamp indicating when the token expires), ""type"" (an integer representing the token type), ""value"" (a character varying field containing the token value), and ""user_id"" (a reference to the ""admins"" table through a foreign key constraint).
The ""admins"" table contains information about administrators and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator was created), ""is_enabled"" (a boolean value representing whether the administrator is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator was last updated), ""activated"" (a boolean value representing whether the administrator is activated), ""email"" (a character varying field containing the administrator's email, which is unique and cannot be null), ""firstname"" (a character varying field representing the administrator's first name), ""image"" (a character varying field containing the administrator's image), ""job_role"" (a character varying field indicating the administrator's job role), ""lastname"" (a character varying field representing the administrator's last name), ""password"" (a character varying field containing the administrator's password), ""phone"" (a character varying field containing the administrator's phone number), ""super_admin"" (a boolean value with a default value of false, indicating whether the administrator is a super admin), ""username"" (a character varying field representing the administrator's username, which is unique and cannot be null), ""verify_time"" (a timestamp without a time zone), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).",Retrieve verification tokens with specific types and values.,SELECT * FROM public.verif_token WHERE type = 3 AND value LIKE '%abc%';
"The ""verif_token"" table contains information about verification tokens and has several columns, including ""id"" (a unique identifier), ""expiration"" (a timestamp indicating when the token expires), ""type"" (an integer representing the token type), ""value"" (a character varying field containing the token value), and ""user_id"" (a reference to the ""admins"" table through a foreign key constraint).
The ""admins"" table contains information about administrators and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator was created), ""is_enabled"" (a boolean value representing whether the administrator is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator was last updated), ""activated"" (a boolean value representing whether the administrator is activated), ""email"" (a character varying field containing the administrator's email, which is unique and cannot be null), ""firstname"" (a character varying field representing the administrator's first name), ""image"" (a character varying field containing the administrator's image), ""job_role"" (a character varying field indicating the administrator's job role), ""lastname"" (a character varying field representing the administrator's last name), ""password"" (a character varying field containing the administrator's password), ""phone"" (a character varying field containing the administrator's phone number), ""super_admin"" (a boolean value with a default value of false, indicating whether the administrator is a super admin), ""username"" (a character varying field representing the administrator's username, which is unique and cannot be null), ""verify_time"" (a timestamp without a time zone), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).",Find verification tokens with values containing 'xyz'.,SELECT * FROM public.verif_token WHERE value LIKE '%xyz%';
"The ""verif_token"" table contains information about verification tokens and has several columns, including ""id"" (a unique identifier), ""expiration"" (a timestamp indicating when the token expires), ""type"" (an integer representing the token type), ""value"" (a character varying field containing the token value), and ""user_id"" (a reference to the ""admins"" table through a foreign key constraint).
The ""admins"" table contains information about administrators and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator was created), ""is_enabled"" (a boolean value representing whether the administrator is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator was last updated), ""activated"" (a boolean value representing whether the administrator is activated), ""email"" (a character varying field containing the administrator's email, which is unique and cannot be null), ""firstname"" (a character varying field representing the administrator's first name), ""image"" (a character varying field containing the administrator's image), ""job_role"" (a character varying field indicating the administrator's job role), ""lastname"" (a character varying field representing the administrator's last name), ""password"" (a character varying field containing the administrator's password), ""phone"" (a character varying field containing the administrator's phone number), ""super_admin"" (a boolean value with a default value of false, indicating whether the administrator is a super admin), ""username"" (a character varying field representing the administrator's username, which is unique and cannot be null), ""verify_time"" (a timestamp without a time zone), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).",Show the types of verification tokens associated with a user.,SELECT DISTINCT type FROM public.verif_token WHERE user_id IS NOT NULL;
"The ""verif_token"" table contains information about verification tokens and has several columns, including ""id"" (a unique identifier), ""expiration"" (a timestamp indicating when the token expires), ""type"" (an integer representing the token type), ""value"" (a character varying field containing the token value), and ""user_id"" (a reference to the ""admins"" table through a foreign key constraint).
The ""admins"" table contains information about administrators and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator was created), ""is_enabled"" (a boolean value representing whether the administrator is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator was last updated), ""activated"" (a boolean value representing whether the administrator is activated), ""email"" (a character varying field containing the administrator's email, which is unique and cannot be null), ""firstname"" (a character varying field representing the administrator's first name), ""image"" (a character varying field containing the administrator's image), ""job_role"" (a character varying field indicating the administrator's job role), ""lastname"" (a character varying field representing the administrator's last name), ""password"" (a character varying field containing the administrator's password), ""phone"" (a character varying field containing the administrator's phone number), ""super_admin"" (a boolean value with a default value of false, indicating whether the administrator is a super admin), ""username"" (a character varying field representing the administrator's username, which is unique and cannot be null), ""verify_time"" (a timestamp without a time zone), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).",Get verification token IDs that are not associated with users.,SELECT id FROM public.verif_token WHERE user_id IS NULL;
"The ""verif_token"" table contains information about verification tokens and has several columns, including ""id"" (a unique identifier), ""expiration"" (a timestamp indicating when the token expires), ""type"" (an integer representing the token type), ""value"" (a character varying field containing the token value), and ""user_id"" (a reference to the ""admins"" table through a foreign key constraint).
The ""admins"" table contains information about administrators and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator was created), ""is_enabled"" (a boolean value representing whether the administrator is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator was last updated), ""activated"" (a boolean value representing whether the administrator is activated), ""email"" (a character varying field containing the administrator's email, which is unique and cannot be null), ""firstname"" (a character varying field representing the administrator's first name), ""image"" (a character varying field containing the administrator's image), ""job_role"" (a character varying field indicating the administrator's job role), ""lastname"" (a character varying field representing the administrator's last name), ""password"" (a character varying field containing the administrator's password), ""phone"" (a character varying field containing the administrator's phone number), ""super_admin"" (a boolean value with a default value of false, indicating whether the administrator is a super admin), ""username"" (a character varying field representing the administrator's username, which is unique and cannot be null), ""verify_time"" (a timestamp without a time zone), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).",Retrieve verification token values for a specific user.,SELECT value FROM public.verif_token WHERE user_id = 123;
"The ""verif_token"" table contains information about verification tokens and has several columns, including ""id"" (a unique identifier), ""expiration"" (a timestamp indicating when the token expires), ""type"" (an integer representing the token type), ""value"" (a character varying field containing the token value), and ""user_id"" (a reference to the ""admins"" table through a foreign key constraint).
The ""admins"" table contains information about administrators and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator was created), ""is_enabled"" (a boolean value representing whether the administrator is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator was last updated), ""activated"" (a boolean value representing whether the administrator is activated), ""email"" (a character varying field containing the administrator's email, which is unique and cannot be null), ""firstname"" (a character varying field representing the administrator's first name), ""image"" (a character varying field containing the administrator's image), ""job_role"" (a character varying field indicating the administrator's job role), ""lastname"" (a character varying field representing the administrator's last name), ""password"" (a character varying field containing the administrator's password), ""phone"" (a character varying field containing the administrator's phone number), ""super_admin"" (a boolean value with a default value of false, indicating whether the administrator is a super admin), ""username"" (a character varying field representing the administrator's username, which is unique and cannot be null), ""verify_time"" (a timestamp without a time zone), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).",List verification tokens associated with administrators.,SELECT * FROM public.verif_token vt JOIN public.admins a ON vt.user_id = a.id;
"The ""verif_token"" table contains information about verification tokens and has several columns, including ""id"" (a unique identifier), ""expiration"" (a timestamp indicating when the token expires), ""type"" (an integer representing the token type), ""value"" (a character varying field containing the token value), and ""user_id"" (a reference to the ""admins"" table through a foreign key constraint).
The ""admins"" table contains information about administrators and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator was created), ""is_enabled"" (a boolean value representing whether the administrator is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator was last updated), ""activated"" (a boolean value representing whether the administrator is activated), ""email"" (a character varying field containing the administrator's email, which is unique and cannot be null), ""firstname"" (a character varying field representing the administrator's first name), ""image"" (a character varying field containing the administrator's image), ""job_role"" (a character varying field indicating the administrator's job role), ""lastname"" (a character varying field representing the administrator's last name), ""password"" (a character varying field containing the administrator's password), ""phone"" (a character varying field containing the administrator's phone number), ""super_admin"" (a boolean value with a default value of false, indicating whether the administrator is a super admin), ""username"" (a character varying field representing the administrator's username, which is unique and cannot be null), ""verify_time"" (a timestamp without a time zone), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).",Get verification token IDs with types not equal to 4.,SELECT id FROM public.verif_token WHERE type <> 4;
"The ""verif_token"" table contains information about verification tokens and has several columns, including ""id"" (a unique identifier), ""expiration"" (a timestamp indicating when the token expires), ""type"" (an integer representing the token type), ""value"" (a character varying field containing the token value), and ""user_id"" (a reference to the ""admins"" table through a foreign key constraint).
The ""admins"" table contains information about administrators and has several columns, including ""id"" (a unique identifier), ""created_at"" (a timestamp indicating when the administrator was created), ""is_enabled"" (a boolean value representing whether the administrator is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the administrator was last updated), ""activated"" (a boolean value representing whether the administrator is activated), ""email"" (a character varying field containing the administrator's email, which is unique and cannot be null), ""firstname"" (a character varying field representing the administrator's first name), ""image"" (a character varying field containing the administrator's image), ""job_role"" (a character varying field indicating the administrator's job role), ""lastname"" (a character varying field representing the administrator's last name), ""password"" (a character varying field containing the administrator's password), ""phone"" (a character varying field containing the administrator's phone number), ""super_admin"" (a boolean value with a default value of false, indicating whether the administrator is a super admin), ""username"" (a character varying field representing the administrator's username, which is unique and cannot be null), ""verify_time"" (a timestamp without a time zone), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""role_id"" (a reference to the ""roles"" table through a foreign key constraint).",Show the types of verification tokens associated with administrators.,SELECT DISTINCT type FROM public.verif_token vt JOIN public.admins a ON vt.user_id = a.id;
"The ""projects"" table contains information about projects and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field containing the project's avatar), ""description"" (a character varying field describing the project), ""name"" (a character varying field representing the project's name), ""type"" (a character varying field indicating the project's type), ""url"" (a character varying field containing the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""project_lead_id"" (a reference to another project lead).
The ""company"" table contains information about companies and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a character varying field representing the company's country), ""industry"" (a character varying field indicating the company's industry), ""name"" (a character varying field representing the company's name), ""size"" (a bigint field indicating the company's size), ""state"" (a character varying field representing the company's state), and ""zipcode"" (a bigint field indicating the company's ZIP code).",Retrieve the names of all projects.,SELECT name FROM public.projects;
"The ""projects"" table contains information about projects and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field containing the project's avatar), ""description"" (a character varying field describing the project), ""name"" (a character varying field representing the project's name), ""type"" (a character varying field indicating the project's type), ""url"" (a character varying field containing the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""project_lead_id"" (a reference to another project lead).
The ""company"" table contains information about companies and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a character varying field representing the company's country), ""industry"" (a character varying field indicating the company's industry), ""name"" (a character varying field representing the company's name), ""size"" (a bigint field indicating the company's size), ""state"" (a character varying field representing the company's state), and ""zipcode"" (a bigint field indicating the company's ZIP code).",Find the project description for a specific project.,SELECT description FROM public.projects WHERE name = 'Project X';
"The ""projects"" table contains information about projects and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field containing the project's avatar), ""description"" (a character varying field describing the project), ""name"" (a character varying field representing the project's name), ""type"" (a character varying field indicating the project's type), ""url"" (a character varying field containing the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""project_lead_id"" (a reference to another project lead).
The ""company"" table contains information about companies and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a character varying field representing the company's country), ""industry"" (a character varying field indicating the company's industry), ""name"" (a character varying field representing the company's name), ""size"" (a bigint field indicating the company's size), ""state"" (a character varying field representing the company's state), and ""zipcode"" (a bigint field indicating the company's ZIP code).",Show the types of projects available.,SELECT DISTINCT type FROM public.projects;
"The ""projects"" table contains information about projects and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field containing the project's avatar), ""description"" (a character varying field describing the project), ""name"" (a character varying field representing the project's name), ""type"" (a character varying field indicating the project's type), ""url"" (a character varying field containing the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""project_lead_id"" (a reference to another project lead).
The ""company"" table contains information about companies and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a character varying field representing the company's country), ""industry"" (a character varying field indicating the company's industry), ""name"" (a character varying field representing the company's name), ""size"" (a bigint field indicating the company's size), ""state"" (a character varying field representing the company's state), and ""zipcode"" (a bigint field indicating the company's ZIP code).",List all projects with their avatars.,"SELECT name, avatar FROM public.projects;"
"The ""projects"" table contains information about projects and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field containing the project's avatar), ""description"" (a character varying field describing the project), ""name"" (a character varying field representing the project's name), ""type"" (a character varying field indicating the project's type), ""url"" (a character varying field containing the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""project_lead_id"" (a reference to another project lead).
The ""company"" table contains information about companies and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a character varying field representing the company's country), ""industry"" (a character varying field indicating the company's industry), ""name"" (a character varying field representing the company's name), ""size"" (a bigint field indicating the company's size), ""state"" (a character varying field representing the company's state), and ""zipcode"" (a bigint field indicating the company's ZIP code).",Get the project lead IDs for each project.,"SELECT id, project_lead_id FROM public.projects;"
"The ""projects"" table contains information about projects and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field containing the project's avatar), ""description"" (a character varying field describing the project), ""name"" (a character varying field representing the project's name), ""type"" (a character varying field indicating the project's type), ""url"" (a character varying field containing the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""project_lead_id"" (a reference to another project lead).
The ""company"" table contains information about companies and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a character varying field representing the company's country), ""industry"" (a character varying field indicating the company's industry), ""name"" (a character varying field representing the company's name), ""size"" (a bigint field indicating the company's size), ""state"" (a character varying field representing the company's state), and ""zipcode"" (a bigint field indicating the company's ZIP code).",Find projects with a specific project lead ID.,SELECT name FROM public.projects WHERE project_lead_id = 123;
"The ""projects"" table contains information about projects and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field containing the project's avatar), ""description"" (a character varying field describing the project), ""name"" (a character varying field representing the project's name), ""type"" (a character varying field indicating the project's type), ""url"" (a character varying field containing the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""project_lead_id"" (a reference to another project lead).
The ""company"" table contains information about companies and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a character varying field representing the company's country), ""industry"" (a character varying field indicating the company's industry), ""name"" (a character varying field representing the company's name), ""size"" (a bigint field indicating the company's size), ""state"" (a character varying field representing the company's state), and ""zipcode"" (a bigint field indicating the company's ZIP code).",List projects ordered by their creation date.,SELECT name FROM public.projects ORDER BY created_at;
"The ""projects"" table contains information about projects and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field containing the project's avatar), ""description"" (a character varying field describing the project), ""name"" (a character varying field representing the project's name), ""type"" (a character varying field indicating the project's type), ""url"" (a character varying field containing the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""project_lead_id"" (a reference to another project lead).
The ""company"" table contains information about companies and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a character varying field representing the company's country), ""industry"" (a character varying field indicating the company's industry), ""name"" (a character varying field representing the company's name), ""size"" (a bigint field indicating the company's size), ""state"" (a character varying field representing the company's state), and ""zipcode"" (a bigint field indicating the company's ZIP code).",Get the project names that are enabled.,SELECT name FROM public.projects WHERE is_enabled = true;
"The ""projects"" table contains information about projects and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field containing the project's avatar), ""description"" (a character varying field describing the project), ""name"" (a character varying field representing the project's name), ""type"" (a character varying field indicating the project's type), ""url"" (a character varying field containing the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""project_lead_id"" (a reference to another project lead).
The ""company"" table contains information about companies and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a character varying field representing the company's country), ""industry"" (a character varying field indicating the company's industry), ""name"" (a character varying field representing the company's name), ""size"" (a bigint field indicating the company's size), ""state"" (a character varying field representing the company's state), and ""zipcode"" (a bigint field indicating the company's ZIP code).",Find projects with descriptions containing the word 'research.',SELECT name FROM public.projects WHERE description LIKE '%research%';
"The ""projects"" table contains information about projects and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field containing the project's avatar), ""description"" (a character varying field describing the project), ""name"" (a character varying field representing the project's name), ""type"" (a character varying field indicating the project's type), ""url"" (a character varying field containing the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""project_lead_id"" (a reference to another project lead).
The ""company"" table contains information about companies and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a character varying field representing the company's country), ""industry"" (a character varying field indicating the company's industry), ""name"" (a character varying field representing the company's name), ""size"" (a bigint field indicating the company's size), ""state"" (a character varying field representing the company's state), and ""zipcode"" (a bigint field indicating the company's ZIP code).",Retrieve the project types for a specific company.,SELECT DISTINCT type FROM public.projects WHERE company_id = 456;
"The ""projects"" table contains information about projects and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field containing the project's avatar), ""description"" (a character varying field describing the project), ""name"" (a character varying field representing the project's name), ""type"" (a character varying field indicating the project's type), ""url"" (a character varying field containing the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""project_lead_id"" (a reference to another project lead).
The ""company"" table contains information about companies and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a character varying field representing the company's country), ""industry"" (a character varying field indicating the company's industry), ""name"" (a character varying field representing the company's name), ""size"" (a bigint field indicating the company's size), ""state"" (a character varying field representing the company's state), and ""zipcode"" (a bigint field indicating the company's ZIP code).",List projects with unique company IDs.,SELECT DISTINCT company_id FROM public.projects;
"The ""projects"" table contains information about projects and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field containing the project's avatar), ""description"" (a character varying field describing the project), ""name"" (a character varying field representing the project's name), ""type"" (a character varying field indicating the project's type), ""url"" (a character varying field containing the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""project_lead_id"" (a reference to another project lead).
The ""company"" table contains information about companies and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a character varying field representing the company's country), ""industry"" (a character varying field indicating the company's industry), ""name"" (a character varying field representing the company's name), ""size"" (a bigint field indicating the company's size), ""state"" (a character varying field representing the company's state), and ""zipcode"" (a bigint field indicating the company's ZIP code).",Show the countries where companies are based for each project.,"SELECT p.name, c.country FROM public.projects p JOIN public.company c ON p.company_id = c.id;"
"The ""projects"" table contains information about projects and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field containing the project's avatar), ""description"" (a character varying field describing the project), ""name"" (a character varying field representing the project's name), ""type"" (a character varying field indicating the project's type), ""url"" (a character varying field containing the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""project_lead_id"" (a reference to another project lead).
The ""company"" table contains information about companies and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a character varying field representing the company's country), ""industry"" (a character varying field indicating the company's industry), ""name"" (a character varying field representing the company's name), ""size"" (a bigint field indicating the company's size), ""state"" (a character varying field representing the company's state), and ""zipcode"" (a bigint field indicating the company's ZIP code).",Get the project names with unique ZIP codes.,"SELECT DISTINCT p.name, c.zipcode FROM public.projects p JOIN public.company c ON p.company_id = c.id;"
"The ""projects"" table contains information about projects and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field containing the project's avatar), ""description"" (a character varying field describing the project), ""name"" (a character varying field representing the project's name), ""type"" (a character varying field indicating the project's type), ""url"" (a character varying field containing the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""project_lead_id"" (a reference to another project lead).
The ""company"" table contains information about companies and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a character varying field representing the company's country), ""industry"" (a character varying field indicating the company's industry), ""name"" (a character varying field representing the company's name), ""size"" (a bigint field indicating the company's size), ""state"" (a character varying field representing the company's state), and ""zipcode"" (a bigint field indicating the company's ZIP code).",Find projects that have a project lead assigned.,SELECT name FROM public.projects WHERE project_lead_id IS NOT NULL;
"The ""projects"" table contains information about projects and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field containing the project's avatar), ""description"" (a character varying field describing the project), ""name"" (a character varying field representing the project's name), ""type"" (a character varying field indicating the project's type), ""url"" (a character varying field containing the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""project_lead_id"" (a reference to another project lead).
The ""company"" table contains information about companies and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a character varying field representing the company's country), ""industry"" (a character varying field indicating the company's industry), ""name"" (a character varying field representing the company's name), ""size"" (a bigint field indicating the company's size), ""state"" (a character varying field representing the company's state), and ""zipcode"" (a bigint field indicating the company's ZIP code).",Retrieve projects with specific names and types.,"SELECT name, type FROM public.projects WHERE name IN ('Project A', 'Project B') AND type = 'Research';"
"The ""projects"" table contains information about projects and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field containing the project's avatar), ""description"" (a character varying field describing the project), ""name"" (a character varying field representing the project's name), ""type"" (a character varying field indicating the project's type), ""url"" (a character varying field containing the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""project_lead_id"" (a reference to another project lead).
The ""company"" table contains information about companies and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a character varying field representing the company's country), ""industry"" (a character varying field indicating the company's industry), ""name"" (a character varying field representing the company's name), ""size"" (a bigint field indicating the company's size), ""state"" (a character varying field representing the company's state), and ""zipcode"" (a bigint field indicating the company's ZIP code).",Show the project lead IDs for projects in a specific state.,SELECT project_lead_id FROM public.projects p JOIN public.company c ON p.company_id = c.id WHERE c.state = 'CA';
"The ""projects"" table contains information about projects and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field containing the project's avatar), ""description"" (a character varying field describing the project), ""name"" (a character varying field representing the project's name), ""type"" (a character varying field indicating the project's type), ""url"" (a character varying field containing the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""project_lead_id"" (a reference to another project lead).
The ""company"" table contains information about companies and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a character varying field representing the company's country), ""industry"" (a character varying field indicating the company's industry), ""name"" (a character varying field representing the company's name), ""size"" (a bigint field indicating the company's size), ""state"" (a character varying field representing the company's state), and ""zipcode"" (a bigint field indicating the company's ZIP code).",Get the project names for projects with a specific company ID.,SELECT name FROM public.projects WHERE company_id = 789;
"The ""projects"" table contains information about projects and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field containing the project's avatar), ""description"" (a character varying field describing the project), ""name"" (a character varying field representing the project's name), ""type"" (a character varying field indicating the project's type), ""url"" (a character varying field containing the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""project_lead_id"" (a reference to another project lead).
The ""company"" table contains information about companies and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a character varying field representing the company's country), ""industry"" (a character varying field indicating the company's industry), ""name"" (a character varying field representing the company's name), ""size"" (a bigint field indicating the company's size), ""state"" (a character varying field representing the company's state), and ""zipcode"" (a bigint field indicating the company's ZIP code).",Find projects that were last updated.,SELECT name FROM public.projects ORDER BY updated_at DESC;
"The ""projects"" table contains information about projects and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value representing whether the project is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the project was last updated), ""avatar"" (a character varying field containing the project's avatar), ""description"" (a character varying field describing the project), ""name"" (a character varying field representing the project's name), ""type"" (a character varying field indicating the project's type), ""url"" (a character varying field containing the project's URL), ""company_id"" (a reference to the ""company"" table through a foreign key constraint), and ""project_lead_id"" (a reference to another project lead).
The ""company"" table contains information about companies and has several columns, including ""id"" (a unique identifier and primary key), ""created_at"" (a timestamp indicating when the company was created), ""is_enabled"" (a boolean value representing whether the company is enabled, with a default value of true), ""updated_at"" (a timestamp indicating when the company was last updated), ""country"" (a character varying field representing the company's country), ""industry"" (a character varying field indicating the company's industry), ""name"" (a character varying field representing the company's name), ""size"" (a bigint field indicating the company's size), ""state"" (a character varying field representing the company's state), and ""zipcode"" (a bigint field indicating the company's ZIP code).",List projects with their descriptions and avatars for enabled projects.,"SELECT name, description, avatar FROM public.projects WHERE is_enabled = true;"
"The ""campaign"" table contains information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, determining whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and several other columns specifying campaign details. These details include whether the campaign has custom templates, is scheduled, has been launched, the campaign's name, owner, subject, and type. It also includes foreign key references to other tables, such as ""attack_techniques,"" ""email_profile,"" and ""training_hub,"" linking various aspects of the campaign.
The ""projects"" table contains information about various projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, determining whether the project is enabled), ""updated_at"" (a timestamp for the last update of the project), and several other columns specifying project details. These details include the project's avatar, description, name, type, URL, company ID, and project lead ID. The ""company_id"" column is a unique identifier for the company associated with the project, and it references the ""company"" table.",Retrieve the names of all campaigns.,SELECT name FROM public.campaign;
"The ""campaign"" table contains information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, determining whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and several other columns specifying campaign details. These details include whether the campaign has custom templates, is scheduled, has been launched, the campaign's name, owner, subject, and type. It also includes foreign key references to other tables, such as ""attack_techniques,"" ""email_profile,"" and ""training_hub,"" linking various aspects of the campaign.
The ""projects"" table contains information about various projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, determining whether the project is enabled), ""updated_at"" (a timestamp for the last update of the project), and several other columns specifying project details. These details include the project's avatar, description, name, type, URL, company ID, and project lead ID. The ""company_id"" column is a unique identifier for the company associated with the project, and it references the ""company"" table.",Find the campaign type for a specific campaign.,SELECT type FROM public.campaign WHERE name = 'Campaign X';
"The ""campaign"" table contains information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, determining whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and several other columns specifying campaign details. These details include whether the campaign has custom templates, is scheduled, has been launched, the campaign's name, owner, subject, and type. It also includes foreign key references to other tables, such as ""attack_techniques,"" ""email_profile,"" and ""training_hub,"" linking various aspects of the campaign.
The ""projects"" table contains information about various projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, determining whether the project is enabled), ""updated_at"" (a timestamp for the last update of the project), and several other columns specifying project details. These details include the project's avatar, description, name, type, URL, company ID, and project lead ID. The ""company_id"" column is a unique identifier for the company associated with the project, and it references the ""company"" table.",Show the campaign owners for all campaigns.,SELECT DISTINCT owner FROM public.campaign;
"The ""campaign"" table contains information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, determining whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and several other columns specifying campaign details. These details include whether the campaign has custom templates, is scheduled, has been launched, the campaign's name, owner, subject, and type. It also includes foreign key references to other tables, such as ""attack_techniques,"" ""email_profile,"" and ""training_hub,"" linking various aspects of the campaign.
The ""projects"" table contains information about various projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, determining whether the project is enabled), ""updated_at"" (a timestamp for the last update of the project), and several other columns specifying project details. These details include the project's avatar, description, name, type, URL, company ID, and project lead ID. The ""company_id"" column is a unique identifier for the company associated with the project, and it references the ""company"" table.",List all projects with their names and types.,"SELECT name, type FROM public.projects;"
"The ""campaign"" table contains information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, determining whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and several other columns specifying campaign details. These details include whether the campaign has custom templates, is scheduled, has been launched, the campaign's name, owner, subject, and type. It also includes foreign key references to other tables, such as ""attack_techniques,"" ""email_profile,"" and ""training_hub,"" linking various aspects of the campaign.
The ""projects"" table contains information about various projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, determining whether the project is enabled), ""updated_at"" (a timestamp for the last update of the project), and several other columns specifying project details. These details include the project's avatar, description, name, type, URL, company ID, and project lead ID. The ""company_id"" column is a unique identifier for the company associated with the project, and it references the ""company"" table.",Get the campaign IDs that are scheduled.,SELECT id FROM public.campaign WHERE is_scheduled = true;
"The ""campaign"" table contains information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, determining whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and several other columns specifying campaign details. These details include whether the campaign has custom templates, is scheduled, has been launched, the campaign's name, owner, subject, and type. It also includes foreign key references to other tables, such as ""attack_techniques,"" ""email_profile,"" and ""training_hub,"" linking various aspects of the campaign.
The ""projects"" table contains information about various projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, determining whether the project is enabled), ""updated_at"" (a timestamp for the last update of the project), and several other columns specifying project details. These details include the project's avatar, description, name, type, URL, company ID, and project lead ID. The ""company_id"" column is a unique identifier for the company associated with the project, and it references the ""company"" table.",Find campaigns with a specific project ID.,SELECT name FROM public.campaign WHERE project_id = 123;
"The ""campaign"" table contains information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, determining whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and several other columns specifying campaign details. These details include whether the campaign has custom templates, is scheduled, has been launched, the campaign's name, owner, subject, and type. It also includes foreign key references to other tables, such as ""attack_techniques,"" ""email_profile,"" and ""training_hub,"" linking various aspects of the campaign.
The ""projects"" table contains information about various projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, determining whether the project is enabled), ""updated_at"" (a timestamp for the last update of the project), and several other columns specifying project details. These details include the project's avatar, description, name, type, URL, company ID, and project lead ID. The ""company_id"" column is a unique identifier for the company associated with the project, and it references the ""company"" table.",Retrieve campaigns in a specific timezone.,SELECT name FROM public.campaign WHERE timezone = 'GMT';
"The ""campaign"" table contains information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, determining whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and several other columns specifying campaign details. These details include whether the campaign has custom templates, is scheduled, has been launched, the campaign's name, owner, subject, and type. It also includes foreign key references to other tables, such as ""attack_techniques,"" ""email_profile,"" and ""training_hub,"" linking various aspects of the campaign.
The ""projects"" table contains information about various projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, determining whether the project is enabled), ""updated_at"" (a timestamp for the last update of the project), and several other columns specifying project details. These details include the project's avatar, description, name, type, URL, company ID, and project lead ID. The ""company_id"" column is a unique identifier for the company associated with the project, and it references the ""company"" table.",List campaigns ordered by their creation date.,SELECT name FROM public.campaign ORDER BY created_at;
"The ""campaign"" table contains information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, determining whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and several other columns specifying campaign details. These details include whether the campaign has custom templates, is scheduled, has been launched, the campaign's name, owner, subject, and type. It also includes foreign key references to other tables, such as ""attack_techniques,"" ""email_profile,"" and ""training_hub,"" linking various aspects of the campaign.
The ""projects"" table contains information about various projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, determining whether the project is enabled), ""updated_at"" (a timestamp for the last update of the project), and several other columns specifying project details. These details include the project's avatar, description, name, type, URL, company ID, and project lead ID. The ""company_id"" column is a unique identifier for the company associated with the project, and it references the ""company"" table.",Show the campaign subjects for campaigns with custom templates.,SELECT subject FROM public.campaign WHERE has_custom_template = true;
"The ""campaign"" table contains information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, determining whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and several other columns specifying campaign details. These details include whether the campaign has custom templates, is scheduled, has been launched, the campaign's name, owner, subject, and type. It also includes foreign key references to other tables, such as ""attack_techniques,"" ""email_profile,"" and ""training_hub,"" linking various aspects of the campaign.
The ""projects"" table contains information about various projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, determining whether the project is enabled), ""updated_at"" (a timestamp for the last update of the project), and several other columns specifying project details. These details include the project's avatar, description, name, type, URL, company ID, and project lead ID. The ""company_id"" column is a unique identifier for the company associated with the project, and it references the ""company"" table.",Get the project lead IDs for each project.,"SELECT id, project_lead_id FROM public.projects;"
"The ""campaign"" table contains information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, determining whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and several other columns specifying campaign details. These details include whether the campaign has custom templates, is scheduled, has been launched, the campaign's name, owner, subject, and type. It also includes foreign key references to other tables, such as ""attack_techniques,"" ""email_profile,"" and ""training_hub,"" linking various aspects of the campaign.
The ""projects"" table contains information about various projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, determining whether the project is enabled), ""updated_at"" (a timestamp for the last update of the project), and several other columns specifying project details. These details include the project's avatar, description, name, type, URL, company ID, and project lead ID. The ""company_id"" column is a unique identifier for the company associated with the project, and it references the ""company"" table.",Find campaigns with a specific technique ID.,SELECT name FROM public.campaign WHERE technique_id = 456;
"The ""campaign"" table contains information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, determining whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and several other columns specifying campaign details. These details include whether the campaign has custom templates, is scheduled, has been launched, the campaign's name, owner, subject, and type. It also includes foreign key references to other tables, such as ""attack_techniques,"" ""email_profile,"" and ""training_hub,"" linking various aspects of the campaign.
The ""projects"" table contains information about various projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, determining whether the project is enabled), ""updated_at"" (a timestamp for the last update of the project), and several other columns specifying project details. These details include the project's avatar, description, name, type, URL, company ID, and project lead ID. The ""company_id"" column is a unique identifier for the company associated with the project, and it references the ""company"" table.",Retrieve campaigns with specific reminder settings.,SELECT name FROM public.campaign WHERE has_reminders = true AND reminders_frequency = 3;
"The ""campaign"" table contains information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, determining whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and several other columns specifying campaign details. These details include whether the campaign has custom templates, is scheduled, has been launched, the campaign's name, owner, subject, and type. It also includes foreign key references to other tables, such as ""attack_techniques,"" ""email_profile,"" and ""training_hub,"" linking various aspects of the campaign.
The ""projects"" table contains information about various projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, determining whether the project is enabled), ""updated_at"" (a timestamp for the last update of the project), and several other columns specifying project details. These details include the project's avatar, description, name, type, URL, company ID, and project lead ID. The ""company_id"" column is a unique identifier for the company associated with the project, and it references the ""company"" table.",List campaigns that are not auto-training.,SELECT name FROM public.campaign WHERE is_auto_training = false;
"The ""campaign"" table contains information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, determining whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and several other columns specifying campaign details. These details include whether the campaign has custom templates, is scheduled, has been launched, the campaign's name, owner, subject, and type. It also includes foreign key references to other tables, such as ""attack_techniques,"" ""email_profile,"" and ""training_hub,"" linking various aspects of the campaign.
The ""projects"" table contains information about various projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, determining whether the project is enabled), ""updated_at"" (a timestamp for the last update of the project), and several other columns specifying project details. These details include the project's avatar, description, name, type, URL, company ID, and project lead ID. The ""company_id"" column is a unique identifier for the company associated with the project, and it references the ""company"" table.",Show the campaign names with a particular owner.,SELECT name FROM public.campaign WHERE owner = 'John Doe';
"The ""campaign"" table contains information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, determining whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and several other columns specifying campaign details. These details include whether the campaign has custom templates, is scheduled, has been launched, the campaign's name, owner, subject, and type. It also includes foreign key references to other tables, such as ""attack_techniques,"" ""email_profile,"" and ""training_hub,"" linking various aspects of the campaign.
The ""projects"" table contains information about various projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, determining whether the project is enabled), ""updated_at"" (a timestamp for the last update of the project), and several other columns specifying project details. These details include the project's avatar, description, name, type, URL, company ID, and project lead ID. The ""company_id"" column is a unique identifier for the company associated with the project, and it references the ""company"" table.",Get the campaign names that were last updated.,SELECT name FROM public.campaign ORDER BY updated_at DESC;
"The ""campaign"" table contains information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, determining whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and several other columns specifying campaign details. These details include whether the campaign has custom templates, is scheduled, has been launched, the campaign's name, owner, subject, and type. It also includes foreign key references to other tables, such as ""attack_techniques,"" ""email_profile,"" and ""training_hub,"" linking various aspects of the campaign.
The ""projects"" table contains information about various projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, determining whether the project is enabled), ""updated_at"" (a timestamp for the last update of the project), and several other columns specifying project details. These details include the project's avatar, description, name, type, URL, company ID, and project lead ID. The ""company_id"" column is a unique identifier for the company associated with the project, and it references the ""company"" table.",Find campaigns with a specific email profile ID.,SELECT name FROM public.campaign WHERE email_profile_id = 789;
"The ""campaign"" table contains information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, determining whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and several other columns specifying campaign details. These details include whether the campaign has custom templates, is scheduled, has been launched, the campaign's name, owner, subject, and type. It also includes foreign key references to other tables, such as ""attack_techniques,"" ""email_profile,"" and ""training_hub,"" linking various aspects of the campaign.
The ""projects"" table contains information about various projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, determining whether the project is enabled), ""updated_at"" (a timestamp for the last update of the project), and several other columns specifying project details. These details include the project's avatar, description, name, type, URL, company ID, and project lead ID. The ""company_id"" column is a unique identifier for the company associated with the project, and it references the ""company"" table.",Retrieve campaigns with a certain status.,SELECT name FROM public.campaign WHERE status = 2;
"The ""campaign"" table contains information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, determining whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and several other columns specifying campaign details. These details include whether the campaign has custom templates, is scheduled, has been launched, the campaign's name, owner, subject, and type. It also includes foreign key references to other tables, such as ""attack_techniques,"" ""email_profile,"" and ""training_hub,"" linking various aspects of the campaign.
The ""projects"" table contains information about various projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, determining whether the project is enabled), ""updated_at"" (a timestamp for the last update of the project), and several other columns specifying project details. These details include the project's avatar, description, name, type, URL, company ID, and project lead ID. The ""company_id"" column is a unique identifier for the company associated with the project, and it references the ""company"" table.",List campaigns launched after a specific date.,SELECT name FROM public.campaign WHERE launched = true AND executed_at > '2023-01-01';
"The ""campaign"" table contains information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, determining whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and several other columns specifying campaign details. These details include whether the campaign has custom templates, is scheduled, has been launched, the campaign's name, owner, subject, and type. It also includes foreign key references to other tables, such as ""attack_techniques,"" ""email_profile,"" and ""training_hub,"" linking various aspects of the campaign.
The ""projects"" table contains information about various projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, determining whether the project is enabled), ""updated_at"" (a timestamp for the last update of the project), and several other columns specifying project details. These details include the project's avatar, description, name, type, URL, company ID, and project lead ID. The ""company_id"" column is a unique identifier for the company associated with the project, and it references the ""company"" table.",Get the campaign names with unique project IDs.,"SELECT DISTINCT name, project_id FROM public.campaign;"
"The ""users"" table stores information about users within the system. It includes columns such as ""id"" (a unique identifier and primary key for each user), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the user is enabled), ""updated_at"" (a timestamp for the last update of the user), and various columns for user details. These details include the user's email, first name, last name, company ID, project ID, and role ID. Additionally, there are columns that track whether the user is offended, compromised, or part of a simulated scenario. The ""company_id"" and ""project_id"" columns are foreign keys that reference the ""company"" and ""projects"" tables, respectively.
The ""roles"" table defines the roles available within the system. It includes columns such as ""id"" (a unique identifier and primary key for each role) and ""name"" (a unique name for each role).",Retrieve the names of all users.,"SELECT firstname, lastname FROM public.users;"
"The ""users"" table stores information about users within the system. It includes columns such as ""id"" (a unique identifier and primary key for each user), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the user is enabled), ""updated_at"" (a timestamp for the last update of the user), and various columns for user details. These details include the user's email, first name, last name, company ID, project ID, and role ID. Additionally, there are columns that track whether the user is offended, compromised, or part of a simulated scenario. The ""company_id"" and ""project_id"" columns are foreign keys that reference the ""company"" and ""projects"" tables, respectively.
The ""roles"" table defines the roles available within the system. It includes columns such as ""id"" (a unique identifier and primary key for each role) and ""name"" (a unique name for each role).",Find the role names for all roles.,SELECT name FROM public.roles;
"The ""users"" table stores information about users within the system. It includes columns such as ""id"" (a unique identifier and primary key for each user), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the user is enabled), ""updated_at"" (a timestamp for the last update of the user), and various columns for user details. These details include the user's email, first name, last name, company ID, project ID, and role ID. Additionally, there are columns that track whether the user is offended, compromised, or part of a simulated scenario. The ""company_id"" and ""project_id"" columns are foreign keys that reference the ""company"" and ""projects"" tables, respectively.
The ""roles"" table defines the roles available within the system. It includes columns such as ""id"" (a unique identifier and primary key for each role) and ""name"" (a unique name for each role).",List all users along with their email addresses.,"SELECT firstname, lastname, email FROM public.users;"
"The ""users"" table stores information about users within the system. It includes columns such as ""id"" (a unique identifier and primary key for each user), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the user is enabled), ""updated_at"" (a timestamp for the last update of the user), and various columns for user details. These details include the user's email, first name, last name, company ID, project ID, and role ID. Additionally, there are columns that track whether the user is offended, compromised, or part of a simulated scenario. The ""company_id"" and ""project_id"" columns are foreign keys that reference the ""company"" and ""projects"" tables, respectively.
The ""roles"" table defines the roles available within the system. It includes columns such as ""id"" (a unique identifier and primary key for each role) and ""name"" (a unique name for each role).",Get the user IDs that are currently enabled.,SELECT id FROM public.users WHERE is_enabled = true;
"The ""users"" table stores information about users within the system. It includes columns such as ""id"" (a unique identifier and primary key for each user), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the user is enabled), ""updated_at"" (a timestamp for the last update of the user), and various columns for user details. These details include the user's email, first name, last name, company ID, project ID, and role ID. Additionally, there are columns that track whether the user is offended, compromised, or part of a simulated scenario. The ""company_id"" and ""project_id"" columns are foreign keys that reference the ""company"" and ""projects"" tables, respectively.
The ""roles"" table defines the roles available within the system. It includes columns such as ""id"" (a unique identifier and primary key for each role) and ""name"" (a unique name for each role).",Find users with specific role IDs.,"SELECT firstname, lastname FROM public.users WHERE role_id = 123;"
"The ""users"" table stores information about users within the system. It includes columns such as ""id"" (a unique identifier and primary key for each user), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the user is enabled), ""updated_at"" (a timestamp for the last update of the user), and various columns for user details. These details include the user's email, first name, last name, company ID, project ID, and role ID. Additionally, there are columns that track whether the user is offended, compromised, or part of a simulated scenario. The ""company_id"" and ""project_id"" columns are foreign keys that reference the ""company"" and ""projects"" tables, respectively.
The ""roles"" table defines the roles available within the system. It includes columns such as ""id"" (a unique identifier and primary key for each role) and ""name"" (a unique name for each role).",Retrieve users with a specific project ID.,"SELECT firstname, lastname FROM public.users WHERE project_id = 456;"
"The ""users"" table stores information about users within the system. It includes columns such as ""id"" (a unique identifier and primary key for each user), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the user is enabled), ""updated_at"" (a timestamp for the last update of the user), and various columns for user details. These details include the user's email, first name, last name, company ID, project ID, and role ID. Additionally, there are columns that track whether the user is offended, compromised, or part of a simulated scenario. The ""company_id"" and ""project_id"" columns are foreign keys that reference the ""company"" and ""projects"" tables, respectively.
The ""roles"" table defines the roles available within the system. It includes columns such as ""id"" (a unique identifier and primary key for each role) and ""name"" (a unique name for each role).",Show users who are part of a simulated scenario.,"SELECT firstname, lastname FROM public.users WHERE simulated = true;"
"The ""users"" table stores information about users within the system. It includes columns such as ""id"" (a unique identifier and primary key for each user), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the user is enabled), ""updated_at"" (a timestamp for the last update of the user), and various columns for user details. These details include the user's email, first name, last name, company ID, project ID, and role ID. Additionally, there are columns that track whether the user is offended, compromised, or part of a simulated scenario. The ""company_id"" and ""project_id"" columns are foreign keys that reference the ""company"" and ""projects"" tables, respectively.
The ""roles"" table defines the roles available within the system. It includes columns such as ""id"" (a unique identifier and primary key for each role) and ""name"" (a unique name for each role).",Get the email addresses of users in a specific project.,SELECT email FROM public.users WHERE project_id = 789;
"The ""users"" table stores information about users within the system. It includes columns such as ""id"" (a unique identifier and primary key for each user), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the user is enabled), ""updated_at"" (a timestamp for the last update of the user), and various columns for user details. These details include the user's email, first name, last name, company ID, project ID, and role ID. Additionally, there are columns that track whether the user is offended, compromised, or part of a simulated scenario. The ""company_id"" and ""project_id"" columns are foreign keys that reference the ""company"" and ""projects"" tables, respectively.
The ""roles"" table defines the roles available within the system. It includes columns such as ""id"" (a unique identifier and primary key for each role) and ""name"" (a unique name for each role).",List users ordered by their creation date.,"SELECT firstname, lastname FROM public.users ORDER BY created_at;"
"The ""users"" table stores information about users within the system. It includes columns such as ""id"" (a unique identifier and primary key for each user), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the user is enabled), ""updated_at"" (a timestamp for the last update of the user), and various columns for user details. These details include the user's email, first name, last name, company ID, project ID, and role ID. Additionally, there are columns that track whether the user is offended, compromised, or part of a simulated scenario. The ""company_id"" and ""project_id"" columns are foreign keys that reference the ""company"" and ""projects"" tables, respectively.
The ""roles"" table defines the roles available within the system. It includes columns such as ""id"" (a unique identifier and primary key for each role) and ""name"" (a unique name for each role).",Find users who have not been compromised.,"SELECT firstname, lastname FROM public.users WHERE compromised = false;"
"The ""users"" table stores information about users within the system. It includes columns such as ""id"" (a unique identifier and primary key for each user), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the user is enabled), ""updated_at"" (a timestamp for the last update of the user), and various columns for user details. These details include the user's email, first name, last name, company ID, project ID, and role ID. Additionally, there are columns that track whether the user is offended, compromised, or part of a simulated scenario. The ""company_id"" and ""project_id"" columns are foreign keys that reference the ""company"" and ""projects"" tables, respectively.
The ""roles"" table defines the roles available within the system. It includes columns such as ""id"" (a unique identifier and primary key for each role) and ""name"" (a unique name for each role).",Retrieve users who are offended.,"SELECT firstname, lastname FROM public.users WHERE offended = true;"
"The ""users"" table stores information about users within the system. It includes columns such as ""id"" (a unique identifier and primary key for each user), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the user is enabled), ""updated_at"" (a timestamp for the last update of the user), and various columns for user details. These details include the user's email, first name, last name, company ID, project ID, and role ID. Additionally, there are columns that track whether the user is offended, compromised, or part of a simulated scenario. The ""company_id"" and ""project_id"" columns are foreign keys that reference the ""company"" and ""projects"" tables, respectively.
The ""roles"" table defines the roles available within the system. It includes columns such as ""id"" (a unique identifier and primary key for each role) and ""name"" (a unique name for each role).",Show users with a specific role name.,"SELECT firstname, lastname FROM public.users u JOIN public.roles r ON u.role_id = r.id WHERE r.name = 'Admin';"
"The ""users"" table stores information about users within the system. It includes columns such as ""id"" (a unique identifier and primary key for each user), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the user is enabled), ""updated_at"" (a timestamp for the last update of the user), and various columns for user details. These details include the user's email, first name, last name, company ID, project ID, and role ID. Additionally, there are columns that track whether the user is offended, compromised, or part of a simulated scenario. The ""company_id"" and ""project_id"" columns are foreign keys that reference the ""company"" and ""projects"" tables, respectively.
The ""roles"" table defines the roles available within the system. It includes columns such as ""id"" (a unique identifier and primary key for each role) and ""name"" (a unique name for each role).",Get the user IDs for users who have been compromised.,SELECT id FROM public.users WHERE compromised = true;
"The ""users"" table stores information about users within the system. It includes columns such as ""id"" (a unique identifier and primary key for each user), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the user is enabled), ""updated_at"" (a timestamp for the last update of the user), and various columns for user details. These details include the user's email, first name, last name, company ID, project ID, and role ID. Additionally, there are columns that track whether the user is offended, compromised, or part of a simulated scenario. The ""company_id"" and ""project_id"" columns are foreign keys that reference the ""company"" and ""projects"" tables, respectively.
The ""roles"" table defines the roles available within the system. It includes columns such as ""id"" (a unique identifier and primary key for each role) and ""name"" (a unique name for each role).",Find users belonging to a specific company.,"SELECT firstname, lastname FROM public.users WHERE company_id = 123;"
"The ""users"" table stores information about users within the system. It includes columns such as ""id"" (a unique identifier and primary key for each user), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the user is enabled), ""updated_at"" (a timestamp for the last update of the user), and various columns for user details. These details include the user's email, first name, last name, company ID, project ID, and role ID. Additionally, there are columns that track whether the user is offended, compromised, or part of a simulated scenario. The ""company_id"" and ""project_id"" columns are foreign keys that reference the ""company"" and ""projects"" tables, respectively.
The ""roles"" table defines the roles available within the system. It includes columns such as ""id"" (a unique identifier and primary key for each role) and ""name"" (a unique name for each role).",List users based on their last update timestamp.,"SELECT firstname, lastname FROM public.users ORDER BY updated_at;"
"The ""users"" table stores information about users within the system. It includes columns such as ""id"" (a unique identifier and primary key for each user), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the user is enabled), ""updated_at"" (a timestamp for the last update of the user), and various columns for user details. These details include the user's email, first name, last name, company ID, project ID, and role ID. Additionally, there are columns that track whether the user is offended, compromised, or part of a simulated scenario. The ""company_id"" and ""project_id"" columns are foreign keys that reference the ""company"" and ""projects"" tables, respectively.
The ""roles"" table defines the roles available within the system. It includes columns such as ""id"" (a unique identifier and primary key for each role) and ""name"" (a unique name for each role).",Show users with a specific email address.,"SELECT firstname, lastname FROM public.users WHERE email = 'user@example.com';"
"The ""users"" table stores information about users within the system. It includes columns such as ""id"" (a unique identifier and primary key for each user), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the user is enabled), ""updated_at"" (a timestamp for the last update of the user), and various columns for user details. These details include the user's email, first name, last name, company ID, project ID, and role ID. Additionally, there are columns that track whether the user is offended, compromised, or part of a simulated scenario. The ""company_id"" and ""project_id"" columns are foreign keys that reference the ""company"" and ""projects"" tables, respectively.
The ""roles"" table defines the roles available within the system. It includes columns such as ""id"" (a unique identifier and primary key for each role) and ""name"" (a unique name for each role).",Get the number of users with each unique role.,"SELECT r.name, COUNT(*) FROM public.users u JOIN public.roles r ON u.role_id = r.id GROUP BY r.name;"
"The ""users"" table stores information about users within the system. It includes columns such as ""id"" (a unique identifier and primary key for each user), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the user is enabled), ""updated_at"" (a timestamp for the last update of the user), and various columns for user details. These details include the user's email, first name, last name, company ID, project ID, and role ID. Additionally, there are columns that track whether the user is offended, compromised, or part of a simulated scenario. The ""company_id"" and ""project_id"" columns are foreign keys that reference the ""company"" and ""projects"" tables, respectively.
The ""roles"" table defines the roles available within the system. It includes columns such as ""id"" (a unique identifier and primary key for each role) and ""name"" (a unique name for each role).",Find users who are both enabled and not part of a simulated scenario.,"SELECT firstname, lastname FROM public.users WHERE is_enabled = true AND simulated = false;"
"The ""users"" table stores information about users within the system. It includes columns such as ""id"" (a unique identifier and primary key for each user), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the user is enabled), ""updated_at"" (a timestamp for the last update of the user), and various columns for user details. These details include the user's email, first name, last name, company ID, project ID, and role ID. Additionally, there are columns that track whether the user is offended, compromised, or part of a simulated scenario. The ""company_id"" and ""project_id"" columns are foreign keys that reference the ""company"" and ""projects"" tables, respectively.
The ""roles"" table defines the roles available within the system. It includes columns such as ""id"" (a unique identifier and primary key for each role) and ""name"" (a unique name for each role).",Retrieve users associated with a particular company and project.,"SELECT firstname, lastname FROM public.users WHERE company_id = 456 AND project_id = 789;"
"The ""users"" table stores information about users within the system. It includes columns such as ""id"" (a unique identifier and primary key for each user), ""created_at"" (a timestamp indicating when the user was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the user is enabled), ""updated_at"" (a timestamp for the last update of the user), and various columns for user details. These details include the user's email, first name, last name, company ID, project ID, and role ID. Additionally, there are columns that track whether the user is offended, compromised, or part of a simulated scenario. The ""company_id"" and ""project_id"" columns are foreign keys that reference the ""company"" and ""projects"" tables, respectively.
The ""roles"" table defines the roles available within the system. It includes columns such as ""id"" (a unique identifier and primary key for each role) and ""name"" (a unique name for each role).",List users with their role names.,"SELECT u.firstname, u.lastname, r.name FROM public.users u JOIN public.roles r ON u.role_id = r.id;"
"The ""users_in_campaigns"" table is used to track users' participation in campaigns. It includes columns such as ""campaign_id"" (a foreign key referencing the ""campaigns"" table), ""user_id"" (a foreign key referencing the ""users"" table), and several boolean columns that indicate various user actions and statuses within a campaign, such as ""caught,"" ""opened,"" ""sent,"" ""trained,"" ""training_sent,"" and ""training_in_progress."" There are also columns for timestamps like ""caught_at"" and ""trained_at."" The combination of ""campaign_id"" and ""user_id"" serves as the primary key.
The ""training_hub"" table is designed to manage training activities. It includes columns such as ""id"" (a unique identifier and primary key for each training hub), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the training hub is enabled), ""updated_at"" (a timestamp for the last update of the training hub), ""has_training_templates"" (a boolean indicating whether the training hub has training templates), and ""video_id"" (a foreign key referencing the ""training_videos"" table).",Retrieve a list of users who participated in a specific campaign.,"SELECT u.firstname, u.lastname FROM public.users u JOIN public.users_in_campaigns uc ON u.id = uc.user_id WHERE uc.campaign_id = 123;"
"The ""users_in_campaigns"" table is used to track users' participation in campaigns. It includes columns such as ""campaign_id"" (a foreign key referencing the ""campaigns"" table), ""user_id"" (a foreign key referencing the ""users"" table), and several boolean columns that indicate various user actions and statuses within a campaign, such as ""caught,"" ""opened,"" ""sent,"" ""trained,"" ""training_sent,"" and ""training_in_progress."" There are also columns for timestamps like ""caught_at"" and ""trained_at."" The combination of ""campaign_id"" and ""user_id"" serves as the primary key.
The ""training_hub"" table is designed to manage training activities. It includes columns such as ""id"" (a unique identifier and primary key for each training hub), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the training hub is enabled), ""updated_at"" (a timestamp for the last update of the training hub), ""has_training_templates"" (a boolean indicating whether the training hub has training templates), and ""video_id"" (a foreign key referencing the ""training_videos"" table).",Find users who have been caught in any campaign.,"SELECT u.firstname, u.lastname FROM public.users u JOIN public.users_in_campaigns uc ON u.id = uc.user_id WHERE uc.caught = true;"
"The ""users_in_campaigns"" table is used to track users' participation in campaigns. It includes columns such as ""campaign_id"" (a foreign key referencing the ""campaigns"" table), ""user_id"" (a foreign key referencing the ""users"" table), and several boolean columns that indicate various user actions and statuses within a campaign, such as ""caught,"" ""opened,"" ""sent,"" ""trained,"" ""training_sent,"" and ""training_in_progress."" There are also columns for timestamps like ""caught_at"" and ""trained_at."" The combination of ""campaign_id"" and ""user_id"" serves as the primary key.
The ""training_hub"" table is designed to manage training activities. It includes columns such as ""id"" (a unique identifier and primary key for each training hub), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the training hub is enabled), ""updated_at"" (a timestamp for the last update of the training hub), ""has_training_templates"" (a boolean indicating whether the training hub has training templates), and ""video_id"" (a foreign key referencing the ""training_videos"" table).",List campaigns in which a particular user participated.,SELECT c.name FROM public.campaign c JOIN public.users_in_campaigns uc ON c.id = uc.campaign_id WHERE uc.user_id = 456;
"The ""users_in_campaigns"" table is used to track users' participation in campaigns. It includes columns such as ""campaign_id"" (a foreign key referencing the ""campaigns"" table), ""user_id"" (a foreign key referencing the ""users"" table), and several boolean columns that indicate various user actions and statuses within a campaign, such as ""caught,"" ""opened,"" ""sent,"" ""trained,"" ""training_sent,"" and ""training_in_progress."" There are also columns for timestamps like ""caught_at"" and ""trained_at."" The combination of ""campaign_id"" and ""user_id"" serves as the primary key.
The ""training_hub"" table is designed to manage training activities. It includes columns such as ""id"" (a unique identifier and primary key for each training hub), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the training hub is enabled), ""updated_at"" (a timestamp for the last update of the training hub), ""has_training_templates"" (a boolean indicating whether the training hub has training templates), and ""video_id"" (a foreign key referencing the ""training_videos"" table).",Get a count of users who have opened campaign emails.,SELECT COUNT(*) FROM public.users_in_campaigns WHERE opened = true;
"The ""users_in_campaigns"" table is used to track users' participation in campaigns. It includes columns such as ""campaign_id"" (a foreign key referencing the ""campaigns"" table), ""user_id"" (a foreign key referencing the ""users"" table), and several boolean columns that indicate various user actions and statuses within a campaign, such as ""caught,"" ""opened,"" ""sent,"" ""trained,"" ""training_sent,"" and ""training_in_progress."" There are also columns for timestamps like ""caught_at"" and ""trained_at."" The combination of ""campaign_id"" and ""user_id"" serves as the primary key.
The ""training_hub"" table is designed to manage training activities. It includes columns such as ""id"" (a unique identifier and primary key for each training hub), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the training hub is enabled), ""updated_at"" (a timestamp for the last update of the training hub), ""has_training_templates"" (a boolean indicating whether the training hub has training templates), and ""video_id"" (a foreign key referencing the ""training_videos"" table).",Show users who have not been trained in any campaign.,"SELECT u.firstname, u.lastname FROM public.users u WHERE u.id NOT IN (SELECT user_id FROM public.users_in_campaigns WHERE trained = true);"
"The ""users_in_campaigns"" table is used to track users' participation in campaigns. It includes columns such as ""campaign_id"" (a foreign key referencing the ""campaigns"" table), ""user_id"" (a foreign key referencing the ""users"" table), and several boolean columns that indicate various user actions and statuses within a campaign, such as ""caught,"" ""opened,"" ""sent,"" ""trained,"" ""training_sent,"" and ""training_in_progress."" There are also columns for timestamps like ""caught_at"" and ""trained_at."" The combination of ""campaign_id"" and ""user_id"" serves as the primary key.
The ""training_hub"" table is designed to manage training activities. It includes columns such as ""id"" (a unique identifier and primary key for each training hub), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the training hub is enabled), ""updated_at"" (a timestamp for the last update of the training hub), ""has_training_templates"" (a boolean indicating whether the training hub has training templates), and ""video_id"" (a foreign key referencing the ""training_videos"" table).",Retrieve a list of users who are currently undergoing training.,"SELECT u.firstname, u.lastname FROM public.users u JOIN public.users_in_campaigns uc ON u.id = uc.user_id WHERE uc.training_in_progress = true;"
"The ""users_in_campaigns"" table is used to track users' participation in campaigns. It includes columns such as ""campaign_id"" (a foreign key referencing the ""campaigns"" table), ""user_id"" (a foreign key referencing the ""users"" table), and several boolean columns that indicate various user actions and statuses within a campaign, such as ""caught,"" ""opened,"" ""sent,"" ""trained,"" ""training_sent,"" and ""training_in_progress."" There are also columns for timestamps like ""caught_at"" and ""trained_at."" The combination of ""campaign_id"" and ""user_id"" serves as the primary key.
The ""training_hub"" table is designed to manage training activities. It includes columns such as ""id"" (a unique identifier and primary key for each training hub), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the training hub is enabled), ""updated_at"" (a timestamp for the last update of the training hub), ""has_training_templates"" (a boolean indicating whether the training hub has training templates), and ""video_id"" (a foreign key referencing the ""training_videos"" table).",Find users who have completed their training.,"SELECT u.firstname, u.lastname FROM public.users u WHERE u.id IN (SELECT user_id FROM public.users_in_campaigns WHERE trained = true);"
"The ""users_in_campaigns"" table is used to track users' participation in campaigns. It includes columns such as ""campaign_id"" (a foreign key referencing the ""campaigns"" table), ""user_id"" (a foreign key referencing the ""users"" table), and several boolean columns that indicate various user actions and statuses within a campaign, such as ""caught,"" ""opened,"" ""sent,"" ""trained,"" ""training_sent,"" and ""training_in_progress."" There are also columns for timestamps like ""caught_at"" and ""trained_at."" The combination of ""campaign_id"" and ""user_id"" serves as the primary key.
The ""training_hub"" table is designed to manage training activities. It includes columns such as ""id"" (a unique identifier and primary key for each training hub), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the training hub is enabled), ""updated_at"" (a timestamp for the last update of the training hub), ""has_training_templates"" (a boolean indicating whether the training hub has training templates), and ""video_id"" (a foreign key referencing the ""training_videos"" table).",Get the campaign IDs for campaigns where a particular user is caught.,SELECT campaign_id FROM public.users_in_campaigns WHERE user_id = 789 AND caught = true;
"The ""users_in_campaigns"" table is used to track users' participation in campaigns. It includes columns such as ""campaign_id"" (a foreign key referencing the ""campaigns"" table), ""user_id"" (a foreign key referencing the ""users"" table), and several boolean columns that indicate various user actions and statuses within a campaign, such as ""caught,"" ""opened,"" ""sent,"" ""trained,"" ""training_sent,"" and ""training_in_progress."" There are also columns for timestamps like ""caught_at"" and ""trained_at."" The combination of ""campaign_id"" and ""user_id"" serves as the primary key.
The ""training_hub"" table is designed to manage training activities. It includes columns such as ""id"" (a unique identifier and primary key for each training hub), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the training hub is enabled), ""updated_at"" (a timestamp for the last update of the training hub), ""has_training_templates"" (a boolean indicating whether the training hub has training templates), and ""video_id"" (a foreign key referencing the ""training_videos"" table).",List campaigns that have custom training templates.,SELECT c.name FROM public.campaign c WHERE c.id IN (SELECT campaign_id FROM public.users_in_campaigns WHERE training_id IS NOT NULL);
"The ""users_in_campaigns"" table is used to track users' participation in campaigns. It includes columns such as ""campaign_id"" (a foreign key referencing the ""campaigns"" table), ""user_id"" (a foreign key referencing the ""users"" table), and several boolean columns that indicate various user actions and statuses within a campaign, such as ""caught,"" ""opened,"" ""sent,"" ""trained,"" ""training_sent,"" and ""training_in_progress."" There are also columns for timestamps like ""caught_at"" and ""trained_at."" The combination of ""campaign_id"" and ""user_id"" serves as the primary key.
The ""training_hub"" table is designed to manage training activities. It includes columns such as ""id"" (a unique identifier and primary key for each training hub), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the training hub is enabled), ""updated_at"" (a timestamp for the last update of the training hub), ""has_training_templates"" (a boolean indicating whether the training hub has training templates), and ""video_id"" (a foreign key referencing the ""training_videos"" table).",Show users who have been sent campaign emails.,"SELECT u.firstname, u.lastname FROM public.users u JOIN public.users_in_campaigns uc ON u.id = uc.user_id WHERE uc.sent = true;"
"The ""users_in_campaigns"" table is used to track users' participation in campaigns. It includes columns such as ""campaign_id"" (a foreign key referencing the ""campaigns"" table), ""user_id"" (a foreign key referencing the ""users"" table), and several boolean columns that indicate various user actions and statuses within a campaign, such as ""caught,"" ""opened,"" ""sent,"" ""trained,"" ""training_sent,"" and ""training_in_progress."" There are also columns for timestamps like ""caught_at"" and ""trained_at."" The combination of ""campaign_id"" and ""user_id"" serves as the primary key.
The ""training_hub"" table is designed to manage training activities. It includes columns such as ""id"" (a unique identifier and primary key for each training hub), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the training hub is enabled), ""updated_at"" (a timestamp for the last update of the training hub), ""has_training_templates"" (a boolean indicating whether the training hub has training templates), and ""video_id"" (a foreign key referencing the ""training_videos"" table).",Retrieve a list of users who have participated in multiple campaigns.,"SELECT u.firstname, u.lastname FROM public.users u JOIN public.users_in_campaigns uc ON u.id = uc.user_id GROUP BY u.firstname, u.lastname HAVING COUNT(DISTINCT uc.campaign_id) > 1;"
"The ""users_in_campaigns"" table is used to track users' participation in campaigns. It includes columns such as ""campaign_id"" (a foreign key referencing the ""campaigns"" table), ""user_id"" (a foreign key referencing the ""users"" table), and several boolean columns that indicate various user actions and statuses within a campaign, such as ""caught,"" ""opened,"" ""sent,"" ""trained,"" ""training_sent,"" and ""training_in_progress."" There are also columns for timestamps like ""caught_at"" and ""trained_at."" The combination of ""campaign_id"" and ""user_id"" serves as the primary key.
The ""training_hub"" table is designed to manage training activities. It includes columns such as ""id"" (a unique identifier and primary key for each training hub), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the training hub is enabled), ""updated_at"" (a timestamp for the last update of the training hub), ""has_training_templates"" (a boolean indicating whether the training hub has training templates), and ""video_id"" (a foreign key referencing the ""training_videos"" table).",Find campaigns that do not have custom training templates.,SELECT c.name FROM public.campaign c WHERE c.id NOT IN (SELECT campaign_id FROM public.users_in_campaigns WHERE training_id IS NOT NULL);
"The ""users_in_campaigns"" table is used to track users' participation in campaigns. It includes columns such as ""campaign_id"" (a foreign key referencing the ""campaigns"" table), ""user_id"" (a foreign key referencing the ""users"" table), and several boolean columns that indicate various user actions and statuses within a campaign, such as ""caught,"" ""opened,"" ""sent,"" ""trained,"" ""training_sent,"" and ""training_in_progress."" There are also columns for timestamps like ""caught_at"" and ""trained_at."" The combination of ""campaign_id"" and ""user_id"" serves as the primary key.
The ""training_hub"" table is designed to manage training activities. It includes columns such as ""id"" (a unique identifier and primary key for each training hub), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the training hub is enabled), ""updated_at"" (a timestamp for the last update of the training hub), ""has_training_templates"" (a boolean indicating whether the training hub has training templates), and ""video_id"" (a foreign key referencing the ""training_videos"" table).",Get users who have not been caught or opened campaign emails.,"SELECT u.firstname, u.lastname FROM public.users u WHERE u.id NOT IN (SELECT user_id FROM public.users_in_campaigns WHERE caught = true OR opened = true);"
"The ""users_in_campaigns"" table is used to track users' participation in campaigns. It includes columns such as ""campaign_id"" (a foreign key referencing the ""campaigns"" table), ""user_id"" (a foreign key referencing the ""users"" table), and several boolean columns that indicate various user actions and statuses within a campaign, such as ""caught,"" ""opened,"" ""sent,"" ""trained,"" ""training_sent,"" and ""training_in_progress."" There are also columns for timestamps like ""caught_at"" and ""trained_at."" The combination of ""campaign_id"" and ""user_id"" serves as the primary key.
The ""training_hub"" table is designed to manage training activities. It includes columns such as ""id"" (a unique identifier and primary key for each training hub), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the training hub is enabled), ""updated_at"" (a timestamp for the last update of the training hub), ""has_training_templates"" (a boolean indicating whether the training hub has training templates), and ""video_id"" (a foreign key referencing the ""training_videos"" table).",List campaigns in which a particular user is undergoing training.,SELECT c.name FROM public.campaign c JOIN public.users_in_campaigns uc ON c.id = uc.campaign_id WHERE uc.user_id = 123 AND uc.training_in_progress = true;
"The ""users_in_campaigns"" table is used to track users' participation in campaigns. It includes columns such as ""campaign_id"" (a foreign key referencing the ""campaigns"" table), ""user_id"" (a foreign key referencing the ""users"" table), and several boolean columns that indicate various user actions and statuses within a campaign, such as ""caught,"" ""opened,"" ""sent,"" ""trained,"" ""training_sent,"" and ""training_in_progress."" There are also columns for timestamps like ""caught_at"" and ""trained_at."" The combination of ""campaign_id"" and ""user_id"" serves as the primary key.
The ""training_hub"" table is designed to manage training activities. It includes columns such as ""id"" (a unique identifier and primary key for each training hub), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the training hub is enabled), ""updated_at"" (a timestamp for the last update of the training hub), ""has_training_templates"" (a boolean indicating whether the training hub has training templates), and ""video_id"" (a foreign key referencing the ""training_videos"" table).",Show users who have been caught and trained in any campaign.,"SELECT u.firstname, u.lastname FROM public.users u WHERE u.id IN (SELECT user_id FROM public.users_in_campaigns WHERE caught = true AND trained = true);"
"The ""users_in_campaigns"" table is used to track users' participation in campaigns. It includes columns such as ""campaign_id"" (a foreign key referencing the ""campaigns"" table), ""user_id"" (a foreign key referencing the ""users"" table), and several boolean columns that indicate various user actions and statuses within a campaign, such as ""caught,"" ""opened,"" ""sent,"" ""trained,"" ""training_sent,"" and ""training_in_progress."" There are also columns for timestamps like ""caught_at"" and ""trained_at."" The combination of ""campaign_id"" and ""user_id"" serves as the primary key.
The ""training_hub"" table is designed to manage training activities. It includes columns such as ""id"" (a unique identifier and primary key for each training hub), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the training hub is enabled), ""updated_at"" (a timestamp for the last update of the training hub), ""has_training_templates"" (a boolean indicating whether the training hub has training templates), and ""video_id"" (a foreign key referencing the ""training_videos"" table).",Retrieve a list of users who have participated in campaigns with reminders.,"SELECT u.firstname, u.lastname FROM public.users u JOIN public.users_in_campaigns uc ON u.id = uc.user_id JOIN public.campaign c ON uc.campaign_id = c.id WHERE c.has_reminders = true;"
"The ""users_in_campaigns"" table is used to track users' participation in campaigns. It includes columns such as ""campaign_id"" (a foreign key referencing the ""campaigns"" table), ""user_id"" (a foreign key referencing the ""users"" table), and several boolean columns that indicate various user actions and statuses within a campaign, such as ""caught,"" ""opened,"" ""sent,"" ""trained,"" ""training_sent,"" and ""training_in_progress."" There are also columns for timestamps like ""caught_at"" and ""trained_at."" The combination of ""campaign_id"" and ""user_id"" serves as the primary key.
The ""training_hub"" table is designed to manage training activities. It includes columns such as ""id"" (a unique identifier and primary key for each training hub), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the training hub is enabled), ""updated_at"" (a timestamp for the last update of the training hub), ""has_training_templates"" (a boolean indicating whether the training hub has training templates), and ""video_id"" (a foreign key referencing the ""training_videos"" table).",Find campaigns that have no users undergoing training.,SELECT c.name FROM public.campaign c WHERE c.id NOT IN (SELECT campaign_id FROM public.users_in_campaigns WHERE training_in_progress = true);
"The ""users_in_campaigns"" table is used to track users' participation in campaigns. It includes columns such as ""campaign_id"" (a foreign key referencing the ""campaigns"" table), ""user_id"" (a foreign key referencing the ""users"" table), and several boolean columns that indicate various user actions and statuses within a campaign, such as ""caught,"" ""opened,"" ""sent,"" ""trained,"" ""training_sent,"" and ""training_in_progress."" There are also columns for timestamps like ""caught_at"" and ""trained_at."" The combination of ""campaign_id"" and ""user_id"" serves as the primary key.
The ""training_hub"" table is designed to manage training activities. It includes columns such as ""id"" (a unique identifier and primary key for each training hub), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the training hub is enabled), ""updated_at"" (a timestamp for the last update of the training hub), ""has_training_templates"" (a boolean indicating whether the training hub has training templates), and ""video_id"" (a foreign key referencing the ""training_videos"" table).",Get users who have not been sent campaign emails.,"SELECT u.firstname, u.lastname FROM public.users u WHERE u.id NOT IN (SELECT user_id FROM public.users_in_campaigns WHERE sent = true);"
"The ""users_in_campaigns"" table is used to track users' participation in campaigns. It includes columns such as ""campaign_id"" (a foreign key referencing the ""campaigns"" table), ""user_id"" (a foreign key referencing the ""users"" table), and several boolean columns that indicate various user actions and statuses within a campaign, such as ""caught,"" ""opened,"" ""sent,"" ""trained,"" ""training_sent,"" and ""training_in_progress."" There are also columns for timestamps like ""caught_at"" and ""trained_at."" The combination of ""campaign_id"" and ""user_id"" serves as the primary key.
The ""training_hub"" table is designed to manage training activities. It includes columns such as ""id"" (a unique identifier and primary key for each training hub), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the training hub is enabled), ""updated_at"" (a timestamp for the last update of the training hub), ""has_training_templates"" (a boolean indicating whether the training hub has training templates), and ""video_id"" (a foreign key referencing the ""training_videos"" table).",List campaigns in which a particular user has been caught.,SELECT c.name FROM public.campaign c JOIN public.users_in_campaigns uc ON c.id = uc.campaign_id WHERE uc.user_id = 456 AND uc.caught = true;
"The ""users_in_campaigns"" table is used to track users' participation in campaigns. It includes columns such as ""campaign_id"" (a foreign key referencing the ""campaigns"" table), ""user_id"" (a foreign key referencing the ""users"" table), and several boolean columns that indicate various user actions and statuses within a campaign, such as ""caught,"" ""opened,"" ""sent,"" ""trained,"" ""training_sent,"" and ""training_in_progress."" There are also columns for timestamps like ""caught_at"" and ""trained_at."" The combination of ""campaign_id"" and ""user_id"" serves as the primary key.
The ""training_hub"" table is designed to manage training activities. It includes columns such as ""id"" (a unique identifier and primary key for each training hub), ""created_at"" (a timestamp indicating when the training hub was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the training hub is enabled), ""updated_at"" (a timestamp for the last update of the training hub), ""has_training_templates"" (a boolean indicating whether the training hub has training templates), and ""video_id"" (a foreign key referencing the ""training_videos"" table).",Show users who have not participated in any campaign.,"SELECT firstname, lastname FROM public.users WHERE id NOT IN (SELECT user_id FROM public.users_in_campaigns);"
"The ""campaign_email_template"" table is designed to manage email templates associated with specific campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each email template), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email template is enabled), ""updated_at"" (a timestamp for the last update of the email template), ""custom_template"" (a character varying field for custom templates), ""campaign_id"" (a foreign key referencing the ""campaign"" table), and ""email_template_id"" (a foreign key referencing the ""email_template"" table).
The ""campaign"" table is used to manage information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and various other columns such as ""name,"" ""owner,"" ""schedule_time,"" ""subject,"" ""type,"" ""email_profile_id,"" ""project_id,"" ""technique_id,"" ""status,"" ""is_auto_training,"" ""auto_training_id,"" ""has_reminders,"" ""reminders_frequency,"" ""reminders_number,"" and ""timezone."" It also includes foreign keys to reference other tables such as ""attack_techniques,"" ""email_profile,"" and ""training_hub.""",Retrieve email templates associated with a specific campaign.,"SELECT ce.id, ce.custom_template FROM public.campaign_email_template ce WHERE ce.campaign_id = 123;"
"The ""campaign_email_template"" table is designed to manage email templates associated with specific campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each email template), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email template is enabled), ""updated_at"" (a timestamp for the last update of the email template), ""custom_template"" (a character varying field for custom templates), ""campaign_id"" (a foreign key referencing the ""campaign"" table), and ""email_template_id"" (a foreign key referencing the ""email_template"" table).
The ""campaign"" table is used to manage information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and various other columns such as ""name,"" ""owner,"" ""schedule_time,"" ""subject,"" ""type,"" ""email_profile_id,"" ""project_id,"" ""technique_id,"" ""status,"" ""is_auto_training,"" ""auto_training_id,"" ""has_reminders,"" ""reminders_frequency,"" ""reminders_number,"" and ""timezone."" It also includes foreign keys to reference other tables such as ""attack_techniques,"" ""email_profile,"" and ""training_hub.""",Find campaigns that have custom email templates.,SELECT c.name FROM public.campaign c WHERE c.id IN (SELECT campaign_id FROM public.campaign_email_template WHERE custom_template IS NOT NULL);
"The ""campaign_email_template"" table is designed to manage email templates associated with specific campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each email template), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email template is enabled), ""updated_at"" (a timestamp for the last update of the email template), ""custom_template"" (a character varying field for custom templates), ""campaign_id"" (a foreign key referencing the ""campaign"" table), and ""email_template_id"" (a foreign key referencing the ""email_template"" table).
The ""campaign"" table is used to manage information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and various other columns such as ""name,"" ""owner,"" ""schedule_time,"" ""subject,"" ""type,"" ""email_profile_id,"" ""project_id,"" ""technique_id,"" ""status,"" ""is_auto_training,"" ""auto_training_id,"" ""has_reminders,"" ""reminders_frequency,"" ""reminders_number,"" and ""timezone."" It also includes foreign keys to reference other tables such as ""attack_techniques,"" ""email_profile,"" and ""training_hub.""",List campaigns that are currently scheduled.,"SELECT name, schedule_time FROM public.campaign WHERE is_scheduled = true;"
"The ""campaign_email_template"" table is designed to manage email templates associated with specific campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each email template), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email template is enabled), ""updated_at"" (a timestamp for the last update of the email template), ""custom_template"" (a character varying field for custom templates), ""campaign_id"" (a foreign key referencing the ""campaign"" table), and ""email_template_id"" (a foreign key referencing the ""email_template"" table).
The ""campaign"" table is used to manage information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and various other columns such as ""name,"" ""owner,"" ""schedule_time,"" ""subject,"" ""type,"" ""email_profile_id,"" ""project_id,"" ""technique_id,"" ""status,"" ""is_auto_training,"" ""auto_training_id,"" ""has_reminders,"" ""reminders_frequency,"" ""reminders_number,"" and ""timezone."" It also includes foreign keys to reference other tables such as ""attack_techniques,"" ""email_profile,"" and ""training_hub.""",Get email templates associated with a particular campaign.,"SELECT et.title, et.description FROM public.email_template et JOIN public.campaign_email_template ce ON et.id = ce.email_template_id WHERE ce.campaign_id = 456;"
"The ""campaign_email_template"" table is designed to manage email templates associated with specific campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each email template), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email template is enabled), ""updated_at"" (a timestamp for the last update of the email template), ""custom_template"" (a character varying field for custom templates), ""campaign_id"" (a foreign key referencing the ""campaign"" table), and ""email_template_id"" (a foreign key referencing the ""email_template"" table).
The ""campaign"" table is used to manage information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and various other columns such as ""name,"" ""owner,"" ""schedule_time,"" ""subject,"" ""type,"" ""email_profile_id,"" ""project_id,"" ""technique_id,"" ""status,"" ""is_auto_training,"" ""auto_training_id,"" ""has_reminders,"" ""reminders_frequency,"" ""reminders_number,"" and ""timezone."" It also includes foreign keys to reference other tables such as ""attack_techniques,"" ""email_profile,"" and ""training_hub.""",Show campaigns that have been executed.,SELECT name FROM public.campaign WHERE executed = true;
"The ""campaign_email_template"" table is designed to manage email templates associated with specific campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each email template), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email template is enabled), ""updated_at"" (a timestamp for the last update of the email template), ""custom_template"" (a character varying field for custom templates), ""campaign_id"" (a foreign key referencing the ""campaign"" table), and ""email_template_id"" (a foreign key referencing the ""email_template"" table).
The ""campaign"" table is used to manage information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and various other columns such as ""name,"" ""owner,"" ""schedule_time,"" ""subject,"" ""type,"" ""email_profile_id,"" ""project_id,"" ""technique_id,"" ""status,"" ""is_auto_training,"" ""auto_training_id,"" ""has_reminders,"" ""reminders_frequency,"" ""reminders_number,"" and ""timezone."" It also includes foreign keys to reference other tables such as ""attack_techniques,"" ""email_profile,"" and ""training_hub.""",Retrieve the email template ID used in a specific campaign.,SELECT email_template_id FROM public.campaign_email_template WHERE campaign_id = 789;
"The ""campaign_email_template"" table is designed to manage email templates associated with specific campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each email template), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email template is enabled), ""updated_at"" (a timestamp for the last update of the email template), ""custom_template"" (a character varying field for custom templates), ""campaign_id"" (a foreign key referencing the ""campaign"" table), and ""email_template_id"" (a foreign key referencing the ""email_template"" table).
The ""campaign"" table is used to manage information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and various other columns such as ""name,"" ""owner,"" ""schedule_time,"" ""subject,"" ""type,"" ""email_profile_id,"" ""project_id,"" ""technique_id,"" ""status,"" ""is_auto_training,"" ""auto_training_id,"" ""has_reminders,"" ""reminders_frequency,"" ""reminders_number,"" and ""timezone."" It also includes foreign keys to reference other tables such as ""attack_techniques,"" ""email_profile,"" and ""training_hub.""",List campaigns that are not scheduled.,SELECT name FROM public.campaign WHERE is_scheduled = false;
"The ""campaign_email_template"" table is designed to manage email templates associated with specific campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each email template), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email template is enabled), ""updated_at"" (a timestamp for the last update of the email template), ""custom_template"" (a character varying field for custom templates), ""campaign_id"" (a foreign key referencing the ""campaign"" table), and ""email_template_id"" (a foreign key referencing the ""email_template"" table).
The ""campaign"" table is used to manage information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and various other columns such as ""name,"" ""owner,"" ""schedule_time,"" ""subject,"" ""type,"" ""email_profile_id,"" ""project_id,"" ""technique_id,"" ""status,"" ""is_auto_training,"" ""auto_training_id,"" ""has_reminders,"" ""reminders_frequency,"" ""reminders_number,"" and ""timezone."" It also includes foreign keys to reference other tables such as ""attack_techniques,"" ""email_profile,"" and ""training_hub.""",Find email templates that are custom and enabled.,SELECT id FROM public.email_template WHERE id IN (SELECT email_template_id FROM public.campaign_email_template WHERE custom_template IS NOT NULL) AND is_enabled = true;
"The ""campaign_email_template"" table is designed to manage email templates associated with specific campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each email template), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email template is enabled), ""updated_at"" (a timestamp for the last update of the email template), ""custom_template"" (a character varying field for custom templates), ""campaign_id"" (a foreign key referencing the ""campaign"" table), and ""email_template_id"" (a foreign key referencing the ""email_template"" table).
The ""campaign"" table is used to manage information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and various other columns such as ""name,"" ""owner,"" ""schedule_time,"" ""subject,"" ""type,"" ""email_profile_id,"" ""project_id,"" ""technique_id,"" ""status,"" ""is_auto_training,"" ""auto_training_id,"" ""has_reminders,"" ""reminders_frequency,"" ""reminders_number,"" and ""timezone."" It also includes foreign keys to reference other tables such as ""attack_techniques,"" ""email_profile,"" and ""training_hub.""",Get the owner of a specific campaign.,SELECT owner FROM public.campaign WHERE id = 101;
"The ""campaign_email_template"" table is designed to manage email templates associated with specific campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each email template), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email template is enabled), ""updated_at"" (a timestamp for the last update of the email template), ""custom_template"" (a character varying field for custom templates), ""campaign_id"" (a foreign key referencing the ""campaign"" table), and ""email_template_id"" (a foreign key referencing the ""email_template"" table).
The ""campaign"" table is used to manage information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and various other columns such as ""name,"" ""owner,"" ""schedule_time,"" ""subject,"" ""type,"" ""email_profile_id,"" ""project_id,"" ""technique_id,"" ""status,"" ""is_auto_training,"" ""auto_training_id,"" ""has_reminders,"" ""reminders_frequency,"" ""reminders_number,"" and ""timezone."" It also includes foreign keys to reference other tables such as ""attack_techniques,"" ""email_profile,"" and ""training_hub.""",Show campaigns that have reminders enabled.,SELECT name FROM public.campaign WHERE has_reminders = true;
"The ""campaign_email_template"" table is designed to manage email templates associated with specific campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each email template), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email template is enabled), ""updated_at"" (a timestamp for the last update of the email template), ""custom_template"" (a character varying field for custom templates), ""campaign_id"" (a foreign key referencing the ""campaign"" table), and ""email_template_id"" (a foreign key referencing the ""email_template"" table).
The ""campaign"" table is used to manage information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and various other columns such as ""name,"" ""owner,"" ""schedule_time,"" ""subject,"" ""type,"" ""email_profile_id,"" ""project_id,"" ""technique_id,"" ""status,"" ""is_auto_training,"" ""auto_training_id,"" ""has_reminders,"" ""reminders_frequency,"" ""reminders_number,"" and ""timezone."" It also includes foreign keys to reference other tables such as ""attack_techniques,"" ""email_profile,"" and ""training_hub.""",Retrieve campaigns that have custom templates and are launched.,SELECT name FROM public.campaign WHERE has_custom_template = true AND launched = true;
"The ""campaign_email_template"" table is designed to manage email templates associated with specific campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each email template), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email template is enabled), ""updated_at"" (a timestamp for the last update of the email template), ""custom_template"" (a character varying field for custom templates), ""campaign_id"" (a foreign key referencing the ""campaign"" table), and ""email_template_id"" (a foreign key referencing the ""email_template"" table).
The ""campaign"" table is used to manage information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and various other columns such as ""name,"" ""owner,"" ""schedule_time,"" ""subject,"" ""type,"" ""email_profile_id,"" ""project_id,"" ""technique_id,"" ""status,"" ""is_auto_training,"" ""auto_training_id,"" ""has_reminders,"" ""reminders_frequency,"" ""reminders_number,"" and ""timezone."" It also includes foreign keys to reference other tables such as ""attack_techniques,"" ""email_profile,"" and ""training_hub.""",Find email templates associated with campaigns owned by a specific user.,SELECT et.title FROM public.email_template et JOIN public.campaign_email_template ce ON et.id = ce.email_template_id JOIN public.campaign c ON ce.campaign_id = c.id WHERE c.owner = 'John Doe';
"The ""campaign_email_template"" table is designed to manage email templates associated with specific campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each email template), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email template is enabled), ""updated_at"" (a timestamp for the last update of the email template), ""custom_template"" (a character varying field for custom templates), ""campaign_id"" (a foreign key referencing the ""campaign"" table), and ""email_template_id"" (a foreign key referencing the ""email_template"" table).
The ""campaign"" table is used to manage information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and various other columns such as ""name,"" ""owner,"" ""schedule_time,"" ""subject,"" ""type,"" ""email_profile_id,"" ""project_id,"" ""technique_id,"" ""status,"" ""is_auto_training,"" ""auto_training_id,"" ""has_reminders,"" ""reminders_frequency,"" ""reminders_number,"" and ""timezone."" It also includes foreign keys to reference other tables such as ""attack_techniques,"" ""email_profile,"" and ""training_hub.""",List campaigns that are not executed.,SELECT name FROM public.campaign WHERE executed = false;
"The ""campaign_email_template"" table is designed to manage email templates associated with specific campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each email template), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email template is enabled), ""updated_at"" (a timestamp for the last update of the email template), ""custom_template"" (a character varying field for custom templates), ""campaign_id"" (a foreign key referencing the ""campaign"" table), and ""email_template_id"" (a foreign key referencing the ""email_template"" table).
The ""campaign"" table is used to manage information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and various other columns such as ""name,"" ""owner,"" ""schedule_time,"" ""subject,"" ""type,"" ""email_profile_id,"" ""project_id,"" ""technique_id,"" ""status,"" ""is_auto_training,"" ""auto_training_id,"" ""has_reminders,"" ""reminders_frequency,"" ""reminders_number,"" and ""timezone."" It also includes foreign keys to reference other tables such as ""attack_techniques,"" ""email_profile,"" and ""training_hub.""",Get the campaign ID for a specific email template.,SELECT campaign_id FROM public.campaign_email_template WHERE email_template_id = 987;
"The ""campaign_email_template"" table is designed to manage email templates associated with specific campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each email template), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email template is enabled), ""updated_at"" (a timestamp for the last update of the email template), ""custom_template"" (a character varying field for custom templates), ""campaign_id"" (a foreign key referencing the ""campaign"" table), and ""email_template_id"" (a foreign key referencing the ""email_template"" table).
The ""campaign"" table is used to manage information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and various other columns such as ""name,"" ""owner,"" ""schedule_time,"" ""subject,"" ""type,"" ""email_profile_id,"" ""project_id,"" ""technique_id,"" ""status,"" ""is_auto_training,"" ""auto_training_id,"" ""has_reminders,"" ""reminders_frequency,"" ""reminders_number,"" and ""timezone."" It also includes foreign keys to reference other tables such as ""attack_techniques,"" ""email_profile,"" and ""training_hub.""",Show campaigns that are not enabled.,SELECT name FROM public.campaign WHERE is_enabled = false;
"The ""campaign_email_template"" table is designed to manage email templates associated with specific campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each email template), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email template is enabled), ""updated_at"" (a timestamp for the last update of the email template), ""custom_template"" (a character varying field for custom templates), ""campaign_id"" (a foreign key referencing the ""campaign"" table), and ""email_template_id"" (a foreign key referencing the ""email_template"" table).
The ""campaign"" table is used to manage information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and various other columns such as ""name,"" ""owner,"" ""schedule_time,"" ""subject,"" ""type,"" ""email_profile_id,"" ""project_id,"" ""technique_id,"" ""status,"" ""is_auto_training,"" ""auto_training_id,"" ""has_reminders,"" ""reminders_frequency,"" ""reminders_number,"" and ""timezone."" It also includes foreign keys to reference other tables such as ""attack_techniques,"" ""email_profile,"" and ""training_hub.""",Retrieve email templates that are not associated with any campaign.,SELECT title FROM public.email_template WHERE id NOT IN (SELECT email_template_id FROM public.campaign_email_template);
"The ""campaign_email_template"" table is designed to manage email templates associated with specific campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each email template), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email template is enabled), ""updated_at"" (a timestamp for the last update of the email template), ""custom_template"" (a character varying field for custom templates), ""campaign_id"" (a foreign key referencing the ""campaign"" table), and ""email_template_id"" (a foreign key referencing the ""email_template"" table).
The ""campaign"" table is used to manage information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and various other columns such as ""name,"" ""owner,"" ""schedule_time,"" ""subject,"" ""type,"" ""email_profile_id,"" ""project_id,"" ""technique_id,"" ""status,"" ""is_auto_training,"" ""auto_training_id,"" ""has_reminders,"" ""reminders_frequency,"" ""reminders_number,"" and ""timezone."" It also includes foreign keys to reference other tables such as ""attack_techniques,"" ""email_profile,"" and ""training_hub.""",Find campaigns that do not have custom templates.,SELECT name FROM public.campaign WHERE id NOT IN (SELECT campaign_id FROM public.campaign_email_template WHERE custom_template IS NOT NULL);
"The ""campaign_email_template"" table is designed to manage email templates associated with specific campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each email template), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email template is enabled), ""updated_at"" (a timestamp for the last update of the email template), ""custom_template"" (a character varying field for custom templates), ""campaign_id"" (a foreign key referencing the ""campaign"" table), and ""email_template_id"" (a foreign key referencing the ""email_template"" table).
The ""campaign"" table is used to manage information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and various other columns such as ""name,"" ""owner,"" ""schedule_time,"" ""subject,"" ""type,"" ""email_profile_id,"" ""project_id,"" ""technique_id,"" ""status,"" ""is_auto_training,"" ""auto_training_id,"" ""has_reminders,"" ""reminders_frequency,"" ""reminders_number,"" and ""timezone."" It also includes foreign keys to reference other tables such as ""attack_techniques,"" ""email_profile,"" and ""training_hub.""",Get campaigns that have custom templates and are enabled.,SELECT name FROM public.campaign WHERE has_custom_template = true AND is_enabled = true;
"The ""campaign_email_template"" table is designed to manage email templates associated with specific campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each email template), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email template is enabled), ""updated_at"" (a timestamp for the last update of the email template), ""custom_template"" (a character varying field for custom templates), ""campaign_id"" (a foreign key referencing the ""campaign"" table), and ""email_template_id"" (a foreign key referencing the ""email_template"" table).
The ""campaign"" table is used to manage information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and various other columns such as ""name,"" ""owner,"" ""schedule_time,"" ""subject,"" ""type,"" ""email_profile_id,"" ""project_id,"" ""technique_id,"" ""status,"" ""is_auto_training,"" ""auto_training_id,"" ""has_reminders,"" ""reminders_frequency,"" ""reminders_number,"" and ""timezone."" It also includes foreign keys to reference other tables such as ""attack_techniques,"" ""email_profile,"" and ""training_hub.""",List email templates associated with campaigns that have reminders.,SELECT et.title FROM public.email_template et JOIN public.campaign_email_template ce ON et.id = ce.email_template_id JOIN public.campaign c ON ce.campaign_id = c.id WHERE c.has_reminders = true;
"The ""campaign_email_template"" table is designed to manage email templates associated with specific campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each email template), ""created_at"" (a timestamp indicating when the email template was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email template is enabled), ""updated_at"" (a timestamp for the last update of the email template), ""custom_template"" (a character varying field for custom templates), ""campaign_id"" (a foreign key referencing the ""campaign"" table), and ""email_template_id"" (a foreign key referencing the ""email_template"" table).
The ""campaign"" table is used to manage information about marketing campaigns. It includes columns such as ""id"" (a unique identifier and primary key for each campaign), ""created_at"" (a timestamp indicating when the campaign was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the campaign is enabled), ""updated_at"" (a timestamp for the last update of the campaign), and various other columns such as ""name,"" ""owner,"" ""schedule_time,"" ""subject,"" ""type,"" ""email_profile_id,"" ""project_id,"" ""technique_id,"" ""status,"" ""is_auto_training,"" ""auto_training_id,"" ""has_reminders,"" ""reminders_frequency,"" ""reminders_number,"" and ""timezone."" It also includes foreign keys to reference other tables such as ""attack_techniques,"" ""email_profile,"" and ""training_hub.""",Show campaigns that are launched and have custom templates.,SELECT name FROM public.campaign WHERE launched = true AND has_custom_template = true;
"The ""email_profile"" table is designed to manage email profiles, including their settings and credentials. It includes columns such as ""id"" (a unique identifier and primary key for each email profile), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email profile is enabled), ""updated_at"" (a timestamp for the last update of the email profile), and various other columns such as ""email,"" ""name,"" ""password,"" ""port,"" ""protocol,"" ""server,"" ""username,"" and ""project_id"" (a foreign key referencing the ""projects"" table).
The ""projects"" table is used to manage information about different projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the project is enabled), and various other columns such as ""avatar,"" ""description,"" ""name,"" ""type,"" ""url,"" ""company_id"" (a unique reference to a company in the ""company"" table), and ""project_lead_id"" (a reference to the project lead).
",Retrieve the email profile for a specific project.,"SELECT ep.email, ep.name, ep.server FROM public.email_profile ep WHERE ep.project_id = 123;"
"The ""email_profile"" table is designed to manage email profiles, including their settings and credentials. It includes columns such as ""id"" (a unique identifier and primary key for each email profile), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email profile is enabled), ""updated_at"" (a timestamp for the last update of the email profile), and various other columns such as ""email,"" ""name,"" ""password,"" ""port,"" ""protocol,"" ""server,"" ""username,"" and ""project_id"" (a foreign key referencing the ""projects"" table).
The ""projects"" table is used to manage information about different projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the project is enabled), and various other columns such as ""avatar,"" ""description,"" ""name,"" ""type,"" ""url,"" ""company_id"" (a unique reference to a company in the ""company"" table), and ""project_lead_id"" (a reference to the project lead).
",Find projects that have an associated email profile.,SELECT p.name FROM public.projects p WHERE p.id IN (SELECT project_id FROM public.email_profile WHERE project_id IS NOT NULL);
"The ""email_profile"" table is designed to manage email profiles, including their settings and credentials. It includes columns such as ""id"" (a unique identifier and primary key for each email profile), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email profile is enabled), ""updated_at"" (a timestamp for the last update of the email profile), and various other columns such as ""email,"" ""name,"" ""password,"" ""port,"" ""protocol,"" ""server,"" ""username,"" and ""project_id"" (a foreign key referencing the ""projects"" table).
The ""projects"" table is used to manage information about different projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the project is enabled), and various other columns such as ""avatar,"" ""description,"" ""name,"" ""type,"" ""url,"" ""company_id"" (a unique reference to a company in the ""company"" table), and ""project_lead_id"" (a reference to the project lead).
",List email profiles that are currently enabled.,"SELECT email, protocol FROM public.email_profile WHERE is_enabled = true;"
"The ""email_profile"" table is designed to manage email profiles, including their settings and credentials. It includes columns such as ""id"" (a unique identifier and primary key for each email profile), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email profile is enabled), ""updated_at"" (a timestamp for the last update of the email profile), and various other columns such as ""email,"" ""name,"" ""password,"" ""port,"" ""protocol,"" ""server,"" ""username,"" and ""project_id"" (a foreign key referencing the ""projects"" table).
The ""projects"" table is used to manage information about different projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the project is enabled), and various other columns such as ""avatar,"" ""description,"" ""name,"" ""type,"" ""url,"" ""company_id"" (a unique reference to a company in the ""company"" table), and ""project_lead_id"" (a reference to the project lead).
",Get the email profile username for a specific project.,SELECT ep.username FROM public.email_profile ep WHERE ep.project_id = 456;
"The ""email_profile"" table is designed to manage email profiles, including their settings and credentials. It includes columns such as ""id"" (a unique identifier and primary key for each email profile), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email profile is enabled), ""updated_at"" (a timestamp for the last update of the email profile), and various other columns such as ""email,"" ""name,"" ""password,"" ""port,"" ""protocol,"" ""server,"" ""username,"" and ""project_id"" (a foreign key referencing the ""projects"" table).
The ""projects"" table is used to manage information about different projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the project is enabled), and various other columns such as ""avatar,"" ""description,"" ""name,"" ""type,"" ""url,"" ""company_id"" (a unique reference to a company in the ""company"" table), and ""project_lead_id"" (a reference to the project lead).
",Show projects that are not currently enabled.,SELECT name FROM public.projects WHERE is_enabled = false;
"The ""email_profile"" table is designed to manage email profiles, including their settings and credentials. It includes columns such as ""id"" (a unique identifier and primary key for each email profile), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email profile is enabled), ""updated_at"" (a timestamp for the last update of the email profile), and various other columns such as ""email,"" ""name,"" ""password,"" ""port,"" ""protocol,"" ""server,"" ""username,"" and ""project_id"" (a foreign key referencing the ""projects"" table).
The ""projects"" table is used to manage information about different projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the project is enabled), and various other columns such as ""avatar,"" ""description,"" ""name,"" ""type,"" ""url,"" ""company_id"" (a unique reference to a company in the ""company"" table), and ""project_lead_id"" (a reference to the project lead).
",Retrieve the email profile password for a specific project.,SELECT ep.password FROM public.email_profile ep WHERE ep.project_id = 789;
"The ""email_profile"" table is designed to manage email profiles, including their settings and credentials. It includes columns such as ""id"" (a unique identifier and primary key for each email profile), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email profile is enabled), ""updated_at"" (a timestamp for the last update of the email profile), and various other columns such as ""email,"" ""name,"" ""password,"" ""port,"" ""protocol,"" ""server,"" ""username,"" and ""project_id"" (a foreign key referencing the ""projects"" table).
The ""projects"" table is used to manage information about different projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the project is enabled), and various other columns such as ""avatar,"" ""description,"" ""name,"" ""type,"" ""url,"" ""company_id"" (a unique reference to a company in the ""company"" table), and ""project_lead_id"" (a reference to the project lead).
",List projects that do not have an associated email profile.,SELECT name FROM public.projects WHERE id NOT IN (SELECT project_id FROM public.email_profile WHERE project_id IS NOT NULL);
"The ""email_profile"" table is designed to manage email profiles, including their settings and credentials. It includes columns such as ""id"" (a unique identifier and primary key for each email profile), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email profile is enabled), ""updated_at"" (a timestamp for the last update of the email profile), and various other columns such as ""email,"" ""name,"" ""password,"" ""port,"" ""protocol,"" ""server,"" ""username,"" and ""project_id"" (a foreign key referencing the ""projects"" table).
The ""projects"" table is used to manage information about different projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the project is enabled), and various other columns such as ""avatar,"" ""description,"" ""name,"" ""type,"" ""url,"" ""company_id"" (a unique reference to a company in the ""company"" table), and ""project_lead_id"" (a reference to the project lead).
",Find email profiles that use a specific email server.,SELECT email FROM public.email_profile WHERE server = 'smtp.example.com';
"The ""email_profile"" table is designed to manage email profiles, including their settings and credentials. It includes columns such as ""id"" (a unique identifier and primary key for each email profile), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email profile is enabled), ""updated_at"" (a timestamp for the last update of the email profile), and various other columns such as ""email,"" ""name,"" ""password,"" ""port,"" ""protocol,"" ""server,"" ""username,"" and ""project_id"" (a foreign key referencing the ""projects"" table).
The ""projects"" table is used to manage information about different projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the project is enabled), and various other columns such as ""avatar,"" ""description,"" ""name,"" ""type,"" ""url,"" ""company_id"" (a unique reference to a company in the ""company"" table), and ""project_lead_id"" (a reference to the project lead).
",Get the project name associated with a particular email profile.,SELECT p.name FROM public.projects p JOIN public.email_profile ep ON p.id = ep.project_id WHERE ep.id = 101;
"The ""email_profile"" table is designed to manage email profiles, including their settings and credentials. It includes columns such as ""id"" (a unique identifier and primary key for each email profile), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email profile is enabled), ""updated_at"" (a timestamp for the last update of the email profile), and various other columns such as ""email,"" ""name,"" ""password,"" ""port,"" ""protocol,"" ""server,"" ""username,"" and ""project_id"" (a foreign key referencing the ""projects"" table).
The ""projects"" table is used to manage information about different projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the project is enabled), and various other columns such as ""avatar,"" ""description,"" ""name,"" ""type,"" ""url,"" ""company_id"" (a unique reference to a company in the ""company"" table), and ""project_lead_id"" (a reference to the project lead).
",Show projects that belong to a specific company.,SELECT name FROM public.projects WHERE company_id = 1234;
"The ""email_profile"" table is designed to manage email profiles, including their settings and credentials. It includes columns such as ""id"" (a unique identifier and primary key for each email profile), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email profile is enabled), ""updated_at"" (a timestamp for the last update of the email profile), and various other columns such as ""email,"" ""name,"" ""password,"" ""port,"" ""protocol,"" ""server,"" ""username,"" and ""project_id"" (a foreign key referencing the ""projects"" table).
The ""projects"" table is used to manage information about different projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the project is enabled), and various other columns such as ""avatar,"" ""description,"" ""name,"" ""type,"" ""url,"" ""company_id"" (a unique reference to a company in the ""company"" table), and ""project_lead_id"" (a reference to the project lead).
",Retrieve the email profile port for a specific project.,SELECT ep.port FROM public.email_profile ep WHERE ep.project_id = 567;
"The ""email_profile"" table is designed to manage email profiles, including their settings and credentials. It includes columns such as ""id"" (a unique identifier and primary key for each email profile), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email profile is enabled), ""updated_at"" (a timestamp for the last update of the email profile), and various other columns such as ""email,"" ""name,"" ""password,"" ""port,"" ""protocol,"" ""server,"" ""username,"" and ""project_id"" (a foreign key referencing the ""projects"" table).
The ""projects"" table is used to manage information about different projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the project is enabled), and various other columns such as ""avatar,"" ""description,"" ""name,"" ""type,"" ""url,"" ""company_id"" (a unique reference to a company in the ""company"" table), and ""project_lead_id"" (a reference to the project lead).
",Find projects that have a specific project lead.,SELECT name FROM public.projects WHERE project_lead_id = 12345;
"The ""email_profile"" table is designed to manage email profiles, including their settings and credentials. It includes columns such as ""id"" (a unique identifier and primary key for each email profile), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email profile is enabled), ""updated_at"" (a timestamp for the last update of the email profile), and various other columns such as ""email,"" ""name,"" ""password,"" ""port,"" ""protocol,"" ""server,"" ""username,"" and ""project_id"" (a foreign key referencing the ""projects"" table).
The ""projects"" table is used to manage information about different projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the project is enabled), and various other columns such as ""avatar,"" ""description,"" ""name,"" ""type,"" ""url,"" ""company_id"" (a unique reference to a company in the ""company"" table), and ""project_lead_id"" (a reference to the project lead).
",Get the project ID for a specific email profile.,SELECT project_id FROM public.email_profile WHERE id = 987;
"The ""email_profile"" table is designed to manage email profiles, including their settings and credentials. It includes columns such as ""id"" (a unique identifier and primary key for each email profile), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email profile is enabled), ""updated_at"" (a timestamp for the last update of the email profile), and various other columns such as ""email,"" ""name,"" ""password,"" ""port,"" ""protocol,"" ""server,"" ""username,"" and ""project_id"" (a foreign key referencing the ""projects"" table).
The ""projects"" table is used to manage information about different projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the project is enabled), and various other columns such as ""avatar,"" ""description,"" ""name,"" ""type,"" ""url,"" ""company_id"" (a unique reference to a company in the ""company"" table), and ""project_lead_id"" (a reference to the project lead).
",List email profiles that use a specific email protocol.,SELECT email FROM public.email_profile WHERE protocol = 'IMAP';
"The ""email_profile"" table is designed to manage email profiles, including their settings and credentials. It includes columns such as ""id"" (a unique identifier and primary key for each email profile), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email profile is enabled), ""updated_at"" (a timestamp for the last update of the email profile), and various other columns such as ""email,"" ""name,"" ""password,"" ""port,"" ""protocol,"" ""server,"" ""username,"" and ""project_id"" (a foreign key referencing the ""projects"" table).
The ""projects"" table is used to manage information about different projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the project is enabled), and various other columns such as ""avatar,"" ""description,"" ""name,"" ""type,"" ""url,"" ""company_id"" (a unique reference to a company in the ""company"" table), and ""project_lead_id"" (a reference to the project lead).
",Show projects that have a unique company reference.,SELECT name FROM public.projects WHERE company_id IS NOT NULL;
"The ""email_profile"" table is designed to manage email profiles, including their settings and credentials. It includes columns such as ""id"" (a unique identifier and primary key for each email profile), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email profile is enabled), ""updated_at"" (a timestamp for the last update of the email profile), and various other columns such as ""email,"" ""name,"" ""password,"" ""port,"" ""protocol,"" ""server,"" ""username,"" and ""project_id"" (a foreign key referencing the ""projects"" table).
The ""projects"" table is used to manage information about different projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the project is enabled), and various other columns such as ""avatar,"" ""description,"" ""name,"" ""type,"" ""url,"" ""company_id"" (a unique reference to a company in the ""company"" table), and ""project_lead_id"" (a reference to the project lead).
",Retrieve the project description associated with a particular email profile.,SELECT p.description FROM public.projects p JOIN public.email_profile ep ON p.id = ep.project_id WHERE ep.id = 654;
"The ""email_profile"" table is designed to manage email profiles, including their settings and credentials. It includes columns such as ""id"" (a unique identifier and primary key for each email profile), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email profile is enabled), ""updated_at"" (a timestamp for the last update of the email profile), and various other columns such as ""email,"" ""name,"" ""password,"" ""port,"" ""protocol,"" ""server,"" ""username,"" and ""project_id"" (a foreign key referencing the ""projects"" table).
The ""projects"" table is used to manage information about different projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the project is enabled), and various other columns such as ""avatar,"" ""description,"" ""name,"" ""type,"" ""url,"" ""company_id"" (a unique reference to a company in the ""company"" table), and ""project_lead_id"" (a reference to the project lead).
",Find email profiles that have a specific email address.,SELECT name FROM public.email_profile WHERE email = 'user@example.com';
"The ""email_profile"" table is designed to manage email profiles, including their settings and credentials. It includes columns such as ""id"" (a unique identifier and primary key for each email profile), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email profile is enabled), ""updated_at"" (a timestamp for the last update of the email profile), and various other columns such as ""email,"" ""name,"" ""password,"" ""port,"" ""protocol,"" ""server,"" ""username,"" and ""project_id"" (a foreign key referencing the ""projects"" table).
The ""projects"" table is used to manage information about different projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the project is enabled), and various other columns such as ""avatar,"" ""description,"" ""name,"" ""type,"" ""url,"" ""company_id"" (a unique reference to a company in the ""company"" table), and ""project_lead_id"" (a reference to the project lead).
",Get the project type for a specific project.,SELECT type FROM public.projects WHERE id = 7890;
"The ""email_profile"" table is designed to manage email profiles, including their settings and credentials. It includes columns such as ""id"" (a unique identifier and primary key for each email profile), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email profile is enabled), ""updated_at"" (a timestamp for the last update of the email profile), and various other columns such as ""email,"" ""name,"" ""password,"" ""port,"" ""protocol,"" ""server,"" ""username,"" and ""project_id"" (a foreign key referencing the ""projects"" table).
The ""projects"" table is used to manage information about different projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the project is enabled), and various other columns such as ""avatar,"" ""description,"" ""name,"" ""type,"" ""url,"" ""company_id"" (a unique reference to a company in the ""company"" table), and ""project_lead_id"" (a reference to the project lead).
",Show projects that do not have an associated company.,SELECT name FROM public.projects WHERE company_id IS NULL;
"The ""email_profile"" table is designed to manage email profiles, including their settings and credentials. It includes columns such as ""id"" (a unique identifier and primary key for each email profile), ""created_at"" (a timestamp indicating when the email profile was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the email profile is enabled), ""updated_at"" (a timestamp for the last update of the email profile), and various other columns such as ""email,"" ""name,"" ""password,"" ""port,"" ""protocol,"" ""server,"" ""username,"" and ""project_id"" (a foreign key referencing the ""projects"" table).
The ""projects"" table is used to manage information about different projects. It includes columns such as ""id"" (a unique identifier and primary key for each project), ""created_at"" (a timestamp indicating when the project was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the project is enabled), and various other columns such as ""avatar,"" ""description,"" ""name,"" ""type,"" ""url,"" ""company_id"" (a unique reference to a company in the ""company"" table), and ""project_lead_id"" (a reference to the project lead).
",Retrieve the email profile name for a specific project.,SELECT ep.name FROM public.email_profile ep WHERE ep.project_id = 345;
"The ""admins_groups"" table is designed to manage the relationship between administrators (admins) and groups. It includes columns for ""admin_id"" (a reference to the admin's ID), ""group_id"" (a reference to the group's ID), and a primary key constraint on the combination of both columns. These columns establish foreign key relationships with the ""admins"" and ""groups"" tables.
The ""admins_projects"" table serves a similar purpose but manages the relationship between administrators and projects. It includes columns for ""admin_id"" (a reference to the admin's ID) and ""project_id"" (a reference to the project's ID), with a primary key constraint on both columns. These columns also establish foreign key relationships with the ""admins"" and ""projects"" tables.
The ""admins"" table is used to store information about administrators. It includes columns such as ""id"" (a unique identifier and primary key for each admin), ""created_at"" (a timestamp indicating when the admin account was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the admin account is enabled), and various other columns like ""email,"" ""firstname,"" ""lastname,"" ""password,"" ""phone,"" ""super_admin,"" ""username,"" and ""verify_time."" Additionally, it contains references to other tables, including ""company"" and ""roles,"" via the ""company_id"" and ""role_id"" columns.",List all administrators who are super admins.,SELECT * FROM public.admins WHERE super_admin = true;
"The ""admins_groups"" table is designed to manage the relationship between administrators (admins) and groups. It includes columns for ""admin_id"" (a reference to the admin's ID), ""group_id"" (a reference to the group's ID), and a primary key constraint on the combination of both columns. These columns establish foreign key relationships with the ""admins"" and ""groups"" tables.
The ""admins_projects"" table serves a similar purpose but manages the relationship between administrators and projects. It includes columns for ""admin_id"" (a reference to the admin's ID) and ""project_id"" (a reference to the project's ID), with a primary key constraint on both columns. These columns also establish foreign key relationships with the ""admins"" and ""projects"" tables.
The ""admins"" table is used to store information about administrators. It includes columns such as ""id"" (a unique identifier and primary key for each admin), ""created_at"" (a timestamp indicating when the admin account was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the admin account is enabled), and various other columns like ""email,"" ""firstname,"" ""lastname,"" ""password,"" ""phone,"" ""super_admin,"" ""username,"" and ""verify_time."" Additionally, it contains references to other tables, including ""company"" and ""roles,"" via the ""company_id"" and ""role_id"" columns.",Find all administrators who are not currently enabled.,SELECT * FROM public.admins WHERE is_enabled = false;
"The ""admins_groups"" table is designed to manage the relationship between administrators (admins) and groups. It includes columns for ""admin_id"" (a reference to the admin's ID), ""group_id"" (a reference to the group's ID), and a primary key constraint on the combination of both columns. These columns establish foreign key relationships with the ""admins"" and ""groups"" tables.
The ""admins_projects"" table serves a similar purpose but manages the relationship between administrators and projects. It includes columns for ""admin_id"" (a reference to the admin's ID) and ""project_id"" (a reference to the project's ID), with a primary key constraint on both columns. These columns also establish foreign key relationships with the ""admins"" and ""projects"" tables.
The ""admins"" table is used to store information about administrators. It includes columns such as ""id"" (a unique identifier and primary key for each admin), ""created_at"" (a timestamp indicating when the admin account was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the admin account is enabled), and various other columns like ""email,"" ""firstname,"" ""lastname,"" ""password,"" ""phone,"" ""super_admin,"" ""username,"" and ""verify_time."" Additionally, it contains references to other tables, including ""company"" and ""roles,"" via the ""company_id"" and ""role_id"" columns.",Retrieve the email address of a specific admin by their username.,SELECT email FROM public.admins WHERE username = 'admin123';
"The ""admins_groups"" table is designed to manage the relationship between administrators (admins) and groups. It includes columns for ""admin_id"" (a reference to the admin's ID), ""group_id"" (a reference to the group's ID), and a primary key constraint on the combination of both columns. These columns establish foreign key relationships with the ""admins"" and ""groups"" tables.
The ""admins_projects"" table serves a similar purpose but manages the relationship between administrators and projects. It includes columns for ""admin_id"" (a reference to the admin's ID) and ""project_id"" (a reference to the project's ID), with a primary key constraint on both columns. These columns also establish foreign key relationships with the ""admins"" and ""projects"" tables.
The ""admins"" table is used to store information about administrators. It includes columns such as ""id"" (a unique identifier and primary key for each admin), ""created_at"" (a timestamp indicating when the admin account was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the admin account is enabled), and various other columns like ""email,"" ""firstname,"" ""lastname,"" ""password,"" ""phone,"" ""super_admin,"" ""username,"" and ""verify_time."" Additionally, it contains references to other tables, including ""company"" and ""roles,"" via the ""company_id"" and ""role_id"" columns.",Show administrators who belong to a specific company.,SELECT * FROM public.admins WHERE company_id = 1234;
"The ""admins_groups"" table is designed to manage the relationship between administrators (admins) and groups. It includes columns for ""admin_id"" (a reference to the admin's ID), ""group_id"" (a reference to the group's ID), and a primary key constraint on the combination of both columns. These columns establish foreign key relationships with the ""admins"" and ""groups"" tables.
The ""admins_projects"" table serves a similar purpose but manages the relationship between administrators and projects. It includes columns for ""admin_id"" (a reference to the admin's ID) and ""project_id"" (a reference to the project's ID), with a primary key constraint on both columns. These columns also establish foreign key relationships with the ""admins"" and ""projects"" tables.
The ""admins"" table is used to store information about administrators. It includes columns such as ""id"" (a unique identifier and primary key for each admin), ""created_at"" (a timestamp indicating when the admin account was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the admin account is enabled), and various other columns like ""email,"" ""firstname,"" ""lastname,"" ""password,"" ""phone,"" ""super_admin,"" ""username,"" and ""verify_time."" Additionally, it contains references to other tables, including ""company"" and ""roles,"" via the ""company_id"" and ""role_id"" columns.",Get the full name and job role of an admin by their ID.,"SELECT firstname, lastname, job_role FROM public.admins WHERE id = 5678;"
"The ""admins_groups"" table is designed to manage the relationship between administrators (admins) and groups. It includes columns for ""admin_id"" (a reference to the admin's ID), ""group_id"" (a reference to the group's ID), and a primary key constraint on the combination of both columns. These columns establish foreign key relationships with the ""admins"" and ""groups"" tables.
The ""admins_projects"" table serves a similar purpose but manages the relationship between administrators and projects. It includes columns for ""admin_id"" (a reference to the admin's ID) and ""project_id"" (a reference to the project's ID), with a primary key constraint on both columns. These columns also establish foreign key relationships with the ""admins"" and ""projects"" tables.
The ""admins"" table is used to store information about administrators. It includes columns such as ""id"" (a unique identifier and primary key for each admin), ""created_at"" (a timestamp indicating when the admin account was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the admin account is enabled), and various other columns like ""email,"" ""firstname,"" ""lastname,"" ""password,"" ""phone,"" ""super_admin,"" ""username,"" and ""verify_time."" Additionally, it contains references to other tables, including ""company"" and ""roles,"" via the ""company_id"" and ""role_id"" columns.",Find all administrators who have not been activated.,SELECT * FROM public.admins WHERE activated = false;
"The ""admins_groups"" table is designed to manage the relationship between administrators (admins) and groups. It includes columns for ""admin_id"" (a reference to the admin's ID), ""group_id"" (a reference to the group's ID), and a primary key constraint on the combination of both columns. These columns establish foreign key relationships with the ""admins"" and ""groups"" tables.
The ""admins_projects"" table serves a similar purpose but manages the relationship between administrators and projects. It includes columns for ""admin_id"" (a reference to the admin's ID) and ""project_id"" (a reference to the project's ID), with a primary key constraint on both columns. These columns also establish foreign key relationships with the ""admins"" and ""projects"" tables.
The ""admins"" table is used to store information about administrators. It includes columns such as ""id"" (a unique identifier and primary key for each admin), ""created_at"" (a timestamp indicating when the admin account was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the admin account is enabled), and various other columns like ""email,"" ""firstname,"" ""lastname,"" ""password,"" ""phone,"" ""super_admin,"" ""username,"" and ""verify_time."" Additionally, it contains references to other tables, including ""company"" and ""roles,"" via the ""company_id"" and ""role_id"" columns.",List administrators and their associated projects.,"SELECT a.firstname, a.lastname, p.name FROM public.admins a INNER JOIN public.admins_projects ap ON a.id = ap.admin_id INNER JOIN public.projects p ON ap.project_id = p.id;"
"The ""admins_groups"" table is designed to manage the relationship between administrators (admins) and groups. It includes columns for ""admin_id"" (a reference to the admin's ID), ""group_id"" (a reference to the group's ID), and a primary key constraint on the combination of both columns. These columns establish foreign key relationships with the ""admins"" and ""groups"" tables.
The ""admins_projects"" table serves a similar purpose but manages the relationship between administrators and projects. It includes columns for ""admin_id"" (a reference to the admin's ID) and ""project_id"" (a reference to the project's ID), with a primary key constraint on both columns. These columns also establish foreign key relationships with the ""admins"" and ""projects"" tables.
The ""admins"" table is used to store information about administrators. It includes columns such as ""id"" (a unique identifier and primary key for each admin), ""created_at"" (a timestamp indicating when the admin account was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the admin account is enabled), and various other columns like ""email,"" ""firstname,"" ""lastname,"" ""password,"" ""phone,"" ""super_admin,"" ""username,"" and ""verify_time."" Additionally, it contains references to other tables, including ""company"" and ""roles,"" via the ""company_id"" and ""role_id"" columns.",Get the username and phone number of a specific admin by their email.,"SELECT username, phone FROM public.admins WHERE email = 'admin@example.com';"
"The ""admins_groups"" table is designed to manage the relationship between administrators (admins) and groups. It includes columns for ""admin_id"" (a reference to the admin's ID), ""group_id"" (a reference to the group's ID), and a primary key constraint on the combination of both columns. These columns establish foreign key relationships with the ""admins"" and ""groups"" tables.
The ""admins_projects"" table serves a similar purpose but manages the relationship between administrators and projects. It includes columns for ""admin_id"" (a reference to the admin's ID) and ""project_id"" (a reference to the project's ID), with a primary key constraint on both columns. These columns also establish foreign key relationships with the ""admins"" and ""projects"" tables.
The ""admins"" table is used to store information about administrators. It includes columns such as ""id"" (a unique identifier and primary key for each admin), ""created_at"" (a timestamp indicating when the admin account was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the admin account is enabled), and various other columns like ""email,"" ""firstname,"" ""lastname,"" ""password,"" ""phone,"" ""super_admin,"" ""username,"" and ""verify_time."" Additionally, it contains references to other tables, including ""company"" and ""roles,"" via the ""company_id"" and ""role_id"" columns.",Retrieve all administrators' first and last names.,"SELECT firstname, lastname FROM public.admins;"
"The ""admins_groups"" table is designed to manage the relationship between administrators (admins) and groups. It includes columns for ""admin_id"" (a reference to the admin's ID), ""group_id"" (a reference to the group's ID), and a primary key constraint on the combination of both columns. These columns establish foreign key relationships with the ""admins"" and ""groups"" tables.
The ""admins_projects"" table serves a similar purpose but manages the relationship between administrators and projects. It includes columns for ""admin_id"" (a reference to the admin's ID) and ""project_id"" (a reference to the project's ID), with a primary key constraint on both columns. These columns also establish foreign key relationships with the ""admins"" and ""projects"" tables.
The ""admins"" table is used to store information about administrators. It includes columns such as ""id"" (a unique identifier and primary key for each admin), ""created_at"" (a timestamp indicating when the admin account was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the admin account is enabled), and various other columns like ""email,"" ""firstname,"" ""lastname,"" ""password,"" ""phone,"" ""super_admin,"" ""username,"" and ""verify_time."" Additionally, it contains references to other tables, including ""company"" and ""roles,"" via the ""company_id"" and ""role_id"" columns.",Show administrators who are associated with a specific role.,SELECT * FROM public.admins WHERE role_id = 123;
"The ""admins_groups"" table is designed to manage the relationship between administrators (admins) and groups. It includes columns for ""admin_id"" (a reference to the admin's ID), ""group_id"" (a reference to the group's ID), and a primary key constraint on the combination of both columns. These columns establish foreign key relationships with the ""admins"" and ""groups"" tables.
The ""admins_projects"" table serves a similar purpose but manages the relationship between administrators and projects. It includes columns for ""admin_id"" (a reference to the admin's ID) and ""project_id"" (a reference to the project's ID), with a primary key constraint on both columns. These columns also establish foreign key relationships with the ""admins"" and ""projects"" tables.
The ""admins"" table is used to store information about administrators. It includes columns such as ""id"" (a unique identifier and primary key for each admin), ""created_at"" (a timestamp indicating when the admin account was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the admin account is enabled), and various other columns like ""email,"" ""firstname,"" ""lastname,"" ""password,"" ""phone,"" ""super_admin,"" ""username,"" and ""verify_time."" Additionally, it contains references to other tables, including ""company"" and ""roles,"" via the ""company_id"" and ""role_id"" columns.",Find administrators who have a specific job role.,SELECT * FROM public.admins WHERE job_role = 'Manager';
"The ""admins_groups"" table is designed to manage the relationship between administrators (admins) and groups. It includes columns for ""admin_id"" (a reference to the admin's ID), ""group_id"" (a reference to the group's ID), and a primary key constraint on the combination of both columns. These columns establish foreign key relationships with the ""admins"" and ""groups"" tables.
The ""admins_projects"" table serves a similar purpose but manages the relationship between administrators and projects. It includes columns for ""admin_id"" (a reference to the admin's ID) and ""project_id"" (a reference to the project's ID), with a primary key constraint on both columns. These columns also establish foreign key relationships with the ""admins"" and ""projects"" tables.
The ""admins"" table is used to store information about administrators. It includes columns such as ""id"" (a unique identifier and primary key for each admin), ""created_at"" (a timestamp indicating when the admin account was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the admin account is enabled), and various other columns like ""email,"" ""firstname,"" ""lastname,"" ""password,"" ""phone,"" ""super_admin,"" ""username,"" and ""verify_time."" Additionally, it contains references to other tables, including ""company"" and ""roles,"" via the ""company_id"" and ""role_id"" columns.",List administrators who are enabled and belong to a particular company.,SELECT * FROM public.admins WHERE is_enabled = true AND company_id = 4567;
"The ""admins_groups"" table is designed to manage the relationship between administrators (admins) and groups. It includes columns for ""admin_id"" (a reference to the admin's ID), ""group_id"" (a reference to the group's ID), and a primary key constraint on the combination of both columns. These columns establish foreign key relationships with the ""admins"" and ""groups"" tables.
The ""admins_projects"" table serves a similar purpose but manages the relationship between administrators and projects. It includes columns for ""admin_id"" (a reference to the admin's ID) and ""project_id"" (a reference to the project's ID), with a primary key constraint on both columns. These columns also establish foreign key relationships with the ""admins"" and ""projects"" tables.
The ""admins"" table is used to store information about administrators. It includes columns such as ""id"" (a unique identifier and primary key for each admin), ""created_at"" (a timestamp indicating when the admin account was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the admin account is enabled), and various other columns like ""email,"" ""firstname,"" ""lastname,"" ""password,"" ""phone,"" ""super_admin,"" ""username,"" and ""verify_time."" Additionally, it contains references to other tables, including ""company"" and ""roles,"" via the ""company_id"" and ""role_id"" columns.",Get the email address and activation status of a specific admin by their ID.,"SELECT email, activated FROM public.admins WHERE id = 8901;"
"The ""admins_groups"" table is designed to manage the relationship between administrators (admins) and groups. It includes columns for ""admin_id"" (a reference to the admin's ID), ""group_id"" (a reference to the group's ID), and a primary key constraint on the combination of both columns. These columns establish foreign key relationships with the ""admins"" and ""groups"" tables.
The ""admins_projects"" table serves a similar purpose but manages the relationship between administrators and projects. It includes columns for ""admin_id"" (a reference to the admin's ID) and ""project_id"" (a reference to the project's ID), with a primary key constraint on both columns. These columns also establish foreign key relationships with the ""admins"" and ""projects"" tables.
The ""admins"" table is used to store information about administrators. It includes columns such as ""id"" (a unique identifier and primary key for each admin), ""created_at"" (a timestamp indicating when the admin account was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the admin account is enabled), and various other columns like ""email,"" ""firstname,"" ""lastname,"" ""password,"" ""phone,"" ""super_admin,"" ""username,"" and ""verify_time."" Additionally, it contains references to other tables, including ""company"" and ""roles,"" via the ""company_id"" and ""role_id"" columns.",Retrieve administrators who have been verified within a specific time frame.,SELECT * FROM public.admins WHERE verify_time BETWEEN '2023-01-01' AND '2023-12-31';
"The ""admins_groups"" table is designed to manage the relationship between administrators (admins) and groups. It includes columns for ""admin_id"" (a reference to the admin's ID), ""group_id"" (a reference to the group's ID), and a primary key constraint on the combination of both columns. These columns establish foreign key relationships with the ""admins"" and ""groups"" tables.
The ""admins_projects"" table serves a similar purpose but manages the relationship between administrators and projects. It includes columns for ""admin_id"" (a reference to the admin's ID) and ""project_id"" (a reference to the project's ID), with a primary key constraint on both columns. These columns also establish foreign key relationships with the ""admins"" and ""projects"" tables.
The ""admins"" table is used to store information about administrators. It includes columns such as ""id"" (a unique identifier and primary key for each admin), ""created_at"" (a timestamp indicating when the admin account was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the admin account is enabled), and various other columns like ""email,"" ""firstname,"" ""lastname,"" ""password,"" ""phone,"" ""super_admin,"" ""username,"" and ""verify_time."" Additionally, it contains references to other tables, including ""company"" and ""roles,"" via the ""company_id"" and ""role_id"" columns.",Show administrators who have not been verified yet.,SELECT * FROM public.admins WHERE verify_time IS NULL;
"The ""admins_groups"" table is designed to manage the relationship between administrators (admins) and groups. It includes columns for ""admin_id"" (a reference to the admin's ID), ""group_id"" (a reference to the group's ID), and a primary key constraint on the combination of both columns. These columns establish foreign key relationships with the ""admins"" and ""groups"" tables.
The ""admins_projects"" table serves a similar purpose but manages the relationship between administrators and projects. It includes columns for ""admin_id"" (a reference to the admin's ID) and ""project_id"" (a reference to the project's ID), with a primary key constraint on both columns. These columns also establish foreign key relationships with the ""admins"" and ""projects"" tables.
The ""admins"" table is used to store information about administrators. It includes columns such as ""id"" (a unique identifier and primary key for each admin), ""created_at"" (a timestamp indicating when the admin account was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the admin account is enabled), and various other columns like ""email,"" ""firstname,"" ""lastname,"" ""password,"" ""phone,"" ""super_admin,"" ""username,"" and ""verify_time."" Additionally, it contains references to other tables, including ""company"" and ""roles,"" via the ""company_id"" and ""role_id"" columns.",Find administrators who have a unique email address.,SELECT email FROM public.admins GROUP BY email HAVING COUNT(*) = 1;
"The ""admins_groups"" table is designed to manage the relationship between administrators (admins) and groups. It includes columns for ""admin_id"" (a reference to the admin's ID), ""group_id"" (a reference to the group's ID), and a primary key constraint on the combination of both columns. These columns establish foreign key relationships with the ""admins"" and ""groups"" tables.
The ""admins_projects"" table serves a similar purpose but manages the relationship between administrators and projects. It includes columns for ""admin_id"" (a reference to the admin's ID) and ""project_id"" (a reference to the project's ID), with a primary key constraint on both columns. These columns also establish foreign key relationships with the ""admins"" and ""projects"" tables.
The ""admins"" table is used to store information about administrators. It includes columns such as ""id"" (a unique identifier and primary key for each admin), ""created_at"" (a timestamp indicating when the admin account was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the admin account is enabled), and various other columns like ""email,"" ""firstname,"" ""lastname,"" ""password,"" ""phone,"" ""super_admin,"" ""username,"" and ""verify_time."" Additionally, it contains references to other tables, including ""company"" and ""roles,"" via the ""company_id"" and ""role_id"" columns.",List administrators who are not super admins and belong to a company.,SELECT * FROM public.admins WHERE super_admin = false AND company_id IS NOT NULL;
"The ""admins_groups"" table is designed to manage the relationship between administrators (admins) and groups. It includes columns for ""admin_id"" (a reference to the admin's ID), ""group_id"" (a reference to the group's ID), and a primary key constraint on the combination of both columns. These columns establish foreign key relationships with the ""admins"" and ""groups"" tables.
The ""admins_projects"" table serves a similar purpose but manages the relationship between administrators and projects. It includes columns for ""admin_id"" (a reference to the admin's ID) and ""project_id"" (a reference to the project's ID), with a primary key constraint on both columns. These columns also establish foreign key relationships with the ""admins"" and ""projects"" tables.
The ""admins"" table is used to store information about administrators. It includes columns such as ""id"" (a unique identifier and primary key for each admin), ""created_at"" (a timestamp indicating when the admin account was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the admin account is enabled), and various other columns like ""email,"" ""firstname,"" ""lastname,"" ""password,"" ""phone,"" ""super_admin,"" ""username,"" and ""verify_time."" Additionally, it contains references to other tables, including ""company"" and ""roles,"" via the ""company_id"" and ""role_id"" columns.",Get the last update timestamp for a specific admin by their username.,SELECT updated_at FROM public.admins WHERE username = 'admin456';
"The ""admins_groups"" table is designed to manage the relationship between administrators (admins) and groups. It includes columns for ""admin_id"" (a reference to the admin's ID), ""group_id"" (a reference to the group's ID), and a primary key constraint on the combination of both columns. These columns establish foreign key relationships with the ""admins"" and ""groups"" tables.
The ""admins_projects"" table serves a similar purpose but manages the relationship between administrators and projects. It includes columns for ""admin_id"" (a reference to the admin's ID) and ""project_id"" (a reference to the project's ID), with a primary key constraint on both columns. These columns also establish foreign key relationships with the ""admins"" and ""projects"" tables.
The ""admins"" table is used to store information about administrators. It includes columns such as ""id"" (a unique identifier and primary key for each admin), ""created_at"" (a timestamp indicating when the admin account was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the admin account is enabled), and various other columns like ""email,"" ""firstname,"" ""lastname,"" ""password,"" ""phone,"" ""super_admin,"" ""username,"" and ""verify_time."" Additionally, it contains references to other tables, including ""company"" and ""roles,"" via the ""company_id"" and ""role_id"" columns.",Retrieve administrators who have the same first name.,SELECT * FROM public.admins WHERE firstname IN (SELECT firstname FROM public.admins GROUP BY firstname HAVING COUNT(*) > 1);
"The ""admins_groups"" table is designed to manage the relationship between administrators (admins) and groups. It includes columns for ""admin_id"" (a reference to the admin's ID), ""group_id"" (a reference to the group's ID), and a primary key constraint on the combination of both columns. These columns establish foreign key relationships with the ""admins"" and ""groups"" tables.
The ""admins_projects"" table serves a similar purpose but manages the relationship between administrators and projects. It includes columns for ""admin_id"" (a reference to the admin's ID) and ""project_id"" (a reference to the project's ID), with a primary key constraint on both columns. These columns also establish foreign key relationships with the ""admins"" and ""projects"" tables.
The ""admins"" table is used to store information about administrators. It includes columns such as ""id"" (a unique identifier and primary key for each admin), ""created_at"" (a timestamp indicating when the admin account was created), ""is_enabled"" (a boolean value with a default of true, indicating whether the admin account is enabled), and various other columns like ""email,"" ""firstname,"" ""lastname,"" ""password,"" ""phone,"" ""super_admin,"" ""username,"" and ""verify_time."" Additionally, it contains references to other tables, including ""company"" and ""roles,"" via the ""company_id"" and ""role_id"" columns.",Show administrators who have not set a phone number.,SELECT * FROM public.admins WHERE phone IS NULL;
"The ""qrtz_blob_triggers"" table is designed to store blob trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and ""blob_data"" (binary data associated with the trigger). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Find all blob triggers associated with a specific scheduler.,SELECT * FROM public.qrtz_blob_triggers WHERE sched_name = 'my_scheduler';
"The ""qrtz_blob_triggers"" table is designed to store blob trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and ""blob_data"" (binary data associated with the trigger). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Retrieve the trigger state for a specific trigger by its name and group.,SELECT trigger_state FROM public.qrtz_triggers WHERE trigger_name = 'my_trigger' AND trigger_group = 'group1';
"The ""qrtz_blob_triggers"" table is designed to store blob trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and ""blob_data"" (binary data associated with the trigger). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",List all triggers that have a misfire instruction defined.,SELECT * FROM public.qrtz_triggers WHERE misfire_instr IS NOT NULL;
"The ""qrtz_blob_triggers"" table is designed to store blob trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and ""blob_data"" (binary data associated with the trigger). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Show trigger details for a specific scheduler and trigger name.,SELECT * FROM public.qrtz_triggers WHERE sched_name = 'my_scheduler' AND trigger_name = 'my_trigger';
"The ""qrtz_blob_triggers"" table is designed to store blob trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and ""blob_data"" (binary data associated with the trigger). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Get the description of a specific trigger by its name and group.,SELECT description FROM public.qrtz_triggers WHERE trigger_name = 'my_trigger' AND trigger_group = 'group1';
"The ""qrtz_blob_triggers"" table is designed to store blob trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and ""blob_data"" (binary data associated with the trigger). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Retrieve all triggers associated with a specific job.,SELECT * FROM public.qrtz_triggers WHERE job_name = 'my_job' AND job_group = 'job_group1';
"The ""qrtz_blob_triggers"" table is designed to store blob trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and ""blob_data"" (binary data associated with the trigger). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Find triggers with a specific trigger type.,SELECT * FROM public.qrtz_triggers WHERE trigger_type = 'simple';
"The ""qrtz_blob_triggers"" table is designed to store blob trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and ""blob_data"" (binary data associated with the trigger). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",List triggers with a specific trigger state.,SELECT * FROM public.qrtz_triggers WHERE trigger_state = 'WAITING';
"The ""qrtz_blob_triggers"" table is designed to store blob trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and ""blob_data"" (binary data associated with the trigger). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Show triggers with a specific priority.,SELECT * FROM public.qrtz_triggers WHERE priority = 5;
"The ""qrtz_blob_triggers"" table is designed to store blob trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and ""blob_data"" (binary data associated with the trigger). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Get the next fire time for a specific trigger.,SELECT next_fire_time FROM public.qrtz_triggers WHERE trigger_name = 'my_trigger' AND trigger_group = 'group1';
"The ""qrtz_blob_triggers"" table is designed to store blob trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and ""blob_data"" (binary data associated with the trigger). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Retrieve triggers that have an associated calendar.,SELECT * FROM public.qrtz_triggers WHERE calendar_name IS NOT NULL;
"The ""qrtz_blob_triggers"" table is designed to store blob trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and ""blob_data"" (binary data associated with the trigger). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Find triggers that have a specific job data.,SELECT * FROM public.qrtz_triggers WHERE job_data IS NOT NULL;
"The ""qrtz_blob_triggers"" table is designed to store blob trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and ""blob_data"" (binary data associated with the trigger). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",List all triggers that are currently in a specific trigger state.,SELECT * FROM public.qrtz_triggers WHERE trigger_state = 'ACQUIRED';
"The ""qrtz_blob_triggers"" table is designed to store blob trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and ""blob_data"" (binary data associated with the trigger). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Show triggers with a specific misfire instruction.,SELECT * FROM public.qrtz_triggers WHERE misfire_instr = 2;
"The ""qrtz_blob_triggers"" table is designed to store blob trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and ""blob_data"" (binary data associated with the trigger). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Get the previous fire time for a specific trigger.,SELECT prev_fire_time FROM public.qrtz_triggers WHERE trigger_name = 'my_trigger' AND trigger_group = 'group1';
"The ""qrtz_blob_triggers"" table is designed to store blob trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and ""blob_data"" (binary data associated with the trigger). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Retrieve triggers that are scheduled to end before a certain time.,SELECT * FROM public.qrtz_triggers WHERE end_time < 1633900800000;
"The ""qrtz_blob_triggers"" table is designed to store blob trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and ""blob_data"" (binary data associated with the trigger). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Find triggers that have a specific next fire time and trigger state.,SELECT * FROM public.qrtz_triggers WHERE next_fire_time = 1633900800000 AND trigger_state = 'WAITING';
"The ""qrtz_blob_triggers"" table is designed to store blob trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and ""blob_data"" (binary data associated with the trigger). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",List triggers with a specific trigger group.,SELECT * FROM public.qrtz_triggers WHERE trigger_group = 'group1';
"The ""qrtz_blob_triggers"" table is designed to store blob trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and ""blob_data"" (binary data associated with the trigger). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Show triggers with a specific scheduler name.,SELECT * FROM public.qrtz_triggers WHERE sched_name = 'my_scheduler';
"The ""qrtz_blob_triggers"" table is designed to store blob trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and ""blob_data"" (binary data associated with the trigger). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Retrieve triggers that are associated with a specific job and job group.,SELECT * FROM public.qrtz_triggers WHERE job_name = 'my_job' AND job_group = 'job_group1';
"The ""qrtz_cron_triggers"" table is designed to store cron trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""cron_expression"" (the cron expression defining the trigger's schedule), and ""time_zone_id"" (the time zone associated with the trigger, if applicable). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Find all cron triggers associated with a specific scheduler.,SELECT * FROM public.qrtz_cron_triggers WHERE sched_name = 'my_scheduler';
"The ""qrtz_cron_triggers"" table is designed to store cron trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""cron_expression"" (the cron expression defining the trigger's schedule), and ""time_zone_id"" (the time zone associated with the trigger, if applicable). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Retrieve the trigger state for a specific trigger by its name and group.,SELECT trigger_state FROM public.qrtz_triggers WHERE trigger_name = 'my_trigger' AND trigger_group = 'group1';
"The ""qrtz_cron_triggers"" table is designed to store cron trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""cron_expression"" (the cron expression defining the trigger's schedule), and ""time_zone_id"" (the time zone associated with the trigger, if applicable). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",List all triggers that have a misfire instruction defined.,SELECT * FROM public.qrtz_triggers WHERE misfire_instr IS NOT NULL;
"The ""qrtz_cron_triggers"" table is designed to store cron trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""cron_expression"" (the cron expression defining the trigger's schedule), and ""time_zone_id"" (the time zone associated with the trigger, if applicable). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Show trigger details for a specific scheduler and trigger name.,SELECT * FROM public.qrtz_triggers WHERE sched_name = 'my_scheduler' AND trigger_name = 'my_trigger';
"The ""qrtz_cron_triggers"" table is designed to store cron trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""cron_expression"" (the cron expression defining the trigger's schedule), and ""time_zone_id"" (the time zone associated with the trigger, if applicable). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Get the description of a specific trigger by its name and group.,SELECT description FROM public.qrtz_triggers WHERE trigger_name = 'my_trigger' AND trigger_group = 'group1';
"The ""qrtz_cron_triggers"" table is designed to store cron trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""cron_expression"" (the cron expression defining the trigger's schedule), and ""time_zone_id"" (the time zone associated with the trigger, if applicable). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Retrieve all triggers associated with a specific job.,SELECT * FROM public.qrtz_triggers WHERE job_name = 'my_job' AND job_group = 'job_group1';
"The ""qrtz_cron_triggers"" table is designed to store cron trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""cron_expression"" (the cron expression defining the trigger's schedule), and ""time_zone_id"" (the time zone associated with the trigger, if applicable). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Find triggers with a specific trigger type.,SELECT * FROM public.qrtz_triggers WHERE trigger_type = 'simple';
"The ""qrtz_cron_triggers"" table is designed to store cron trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""cron_expression"" (the cron expression defining the trigger's schedule), and ""time_zone_id"" (the time zone associated with the trigger, if applicable). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",List triggers with a specific trigger state.,SELECT * FROM public.qrtz_triggers WHERE trigger_state = 'WAITING';
"The ""qrtz_cron_triggers"" table is designed to store cron trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""cron_expression"" (the cron expression defining the trigger's schedule), and ""time_zone_id"" (the time zone associated with the trigger, if applicable). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Show triggers with a specific priority.,SELECT * FROM public.qrtz_triggers WHERE priority = 5;
"The ""qrtz_cron_triggers"" table is designed to store cron trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""cron_expression"" (the cron expression defining the trigger's schedule), and ""time_zone_id"" (the time zone associated with the trigger, if applicable). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Get the next fire time for a specific trigger.,SELECT next_fire_time FROM public.qrtz_triggers WHERE trigger_name = 'my_trigger' AND trigger_group = 'group1';
"The ""qrtz_cron_triggers"" table is designed to store cron trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""cron_expression"" (the cron expression defining the trigger's schedule), and ""time_zone_id"" (the time zone associated with the trigger, if applicable). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Retrieve triggers that have an associated calendar.,SELECT * FROM public.qrtz_triggers WHERE calendar_name IS NOT NULL;
"The ""qrtz_cron_triggers"" table is designed to store cron trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""cron_expression"" (the cron expression defining the trigger's schedule), and ""time_zone_id"" (the time zone associated with the trigger, if applicable). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Find triggers that have a specific job data.,SELECT * FROM public.qrtz_triggers WHERE job_data IS NOT NULL;
"The ""qrtz_cron_triggers"" table is designed to store cron trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""cron_expression"" (the cron expression defining the trigger's schedule), and ""time_zone_id"" (the time zone associated with the trigger, if applicable). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",List all triggers that are currently in a specific trigger state.,SELECT * FROM public.qrtz_triggers WHERE trigger_state = 'ACQUIRED';
"The ""qrtz_cron_triggers"" table is designed to store cron trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""cron_expression"" (the cron expression defining the trigger's schedule), and ""time_zone_id"" (the time zone associated with the trigger, if applicable). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Show triggers with a specific misfire instruction.,SELECT * FROM public.qrtz_triggers WHERE misfire_instr = 2;
"The ""qrtz_cron_triggers"" table is designed to store cron trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""cron_expression"" (the cron expression defining the trigger's schedule), and ""time_zone_id"" (the time zone associated with the trigger, if applicable). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Get the previous fire time for a specific trigger.,SELECT prev_fire_time FROM public.qrtz_triggers WHERE trigger_name = 'my_trigger' AND trigger_group = 'group1';
"The ""qrtz_cron_triggers"" table is designed to store cron trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""cron_expression"" (the cron expression defining the trigger's schedule), and ""time_zone_id"" (the time zone associated with the trigger, if applicable). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Retrieve triggers that are scheduled to end before a certain time.,SELECT * FROM public.qrtz_triggers WHERE end_time < 1633900800000;
"The ""qrtz_cron_triggers"" table is designed to store cron trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""cron_expression"" (the cron expression defining the trigger's schedule), and ""time_zone_id"" (the time zone associated with the trigger, if applicable). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Find triggers that have a specific next fire time and trigger state.,SELECT * FROM public.qrtz_triggers WHERE next_fire_time = 1633900800000 AND trigger_state = 'WAITING';
"The ""qrtz_cron_triggers"" table is designed to store cron trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""cron_expression"" (the cron expression defining the trigger's schedule), and ""time_zone_id"" (the time zone associated with the trigger, if applicable). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",List triggers with a specific trigger group.,SELECT * FROM public.qrtz_triggers WHERE trigger_group = 'group1';
"The ""qrtz_cron_triggers"" table is designed to store cron trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""cron_expression"" (the cron expression defining the trigger's schedule), and ""time_zone_id"" (the time zone associated with the trigger, if applicable). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Show triggers with a specific scheduler name.,SELECT * FROM public.qrtz_triggers WHERE sched_name = 'my_scheduler';
"The ""qrtz_cron_triggers"" table is designed to store cron trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""cron_expression"" (the cron expression defining the trigger's schedule), and ""time_zone_id"" (the time zone associated with the trigger, if applicable). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Retrieve triggers that are associated with a specific job and job group.,SELECT * FROM public.qrtz_triggers WHERE job_name = 'my_job' AND job_group = 'job_group1';
"The ""qrtz_simple_triggers"" table is designed to store simple trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""repeat_count"" (the number of times the trigger should repeat), ""repeat_interval"" (the interval between trigger repeats), and ""times_triggered"" (the number of times the trigger has been triggered). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Find all simple triggers associated with a specific scheduler.,SELECT * FROM public.qrtz_simple_triggers WHERE sched_name = 'my_scheduler';
"The ""qrtz_simple_triggers"" table is designed to store simple trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""repeat_count"" (the number of times the trigger should repeat), ""repeat_interval"" (the interval between trigger repeats), and ""times_triggered"" (the number of times the trigger has been triggered). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Retrieve the trigger state for a specific trigger by its name and group.,SELECT trigger_state FROM public.qrtz_triggers WHERE trigger_name = 'my_trigger' AND trigger_group = 'group1';
"The ""qrtz_simple_triggers"" table is designed to store simple trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""repeat_count"" (the number of times the trigger should repeat), ""repeat_interval"" (the interval between trigger repeats), and ""times_triggered"" (the number of times the trigger has been triggered). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",List all triggers with a specific repeat count.,SELECT * FROM public.qrtz_simple_triggers WHERE repeat_count = 3;
"The ""qrtz_simple_triggers"" table is designed to store simple trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""repeat_count"" (the number of times the trigger should repeat), ""repeat_interval"" (the interval between trigger repeats), and ""times_triggered"" (the number of times the trigger has been triggered). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Show trigger details for a specific scheduler and trigger name.,SELECT * FROM public.qrtz_triggers WHERE sched_name = 'my_scheduler' AND trigger_name = 'my_trigger';
"The ""qrtz_simple_triggers"" table is designed to store simple trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""repeat_count"" (the number of times the trigger should repeat), ""repeat_interval"" (the interval between trigger repeats), and ""times_triggered"" (the number of times the trigger has been triggered). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Get the description of a specific trigger by its name and group.,SELECT description FROM public.qrtz_triggers WHERE trigger_name = 'my_trigger' AND trigger_group = 'group1';
"The ""qrtz_simple_triggers"" table is designed to store simple trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""repeat_count"" (the number of times the trigger should repeat), ""repeat_interval"" (the interval between trigger repeats), and ""times_triggered"" (the number of times the trigger has been triggered). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Retrieve all triggers associated with a specific job.,SELECT * FROM public.qrtz_triggers WHERE job_name = 'my_job' AND job_group = 'job_group1';
"The ""qrtz_simple_triggers"" table is designed to store simple trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""repeat_count"" (the number of times the trigger should repeat), ""repeat_interval"" (the interval between trigger repeats), and ""times_triggered"" (the number of times the trigger has been triggered). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Find triggers with a specific trigger type.,SELECT * FROM public.qrtz_triggers WHERE trigger_type = 'simple';
"The ""qrtz_simple_triggers"" table is designed to store simple trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""repeat_count"" (the number of times the trigger should repeat), ""repeat_interval"" (the interval between trigger repeats), and ""times_triggered"" (the number of times the trigger has been triggered). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",List triggers with a specific trigger state.,SELECT * FROM public.qrtz_triggers WHERE trigger_state = 'WAITING';
"The ""qrtz_simple_triggers"" table is designed to store simple trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""repeat_count"" (the number of times the trigger should repeat), ""repeat_interval"" (the interval between trigger repeats), and ""times_triggered"" (the number of times the trigger has been triggered). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Show triggers with a specific priority.,SELECT * FROM public.qrtz_triggers WHERE priority = 5;
"The ""qrtz_simple_triggers"" table is designed to store simple trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""repeat_count"" (the number of times the trigger should repeat), ""repeat_interval"" (the interval between trigger repeats), and ""times_triggered"" (the number of times the trigger has been triggered). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Get the next fire time for a specific trigger.,SELECT next_fire_time FROM public.qrtz_triggers WHERE trigger_name = 'my_trigger' AND trigger_group = 'group1';
"The ""qrtz_simple_triggers"" table is designed to store simple trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""repeat_count"" (the number of times the trigger should repeat), ""repeat_interval"" (the interval between trigger repeats), and ""times_triggered"" (the number of times the trigger has been triggered). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Retrieve triggers that have an associated calendar.,SELECT * FROM public.qrtz_triggers WHERE calendar_name IS NOT NULL;
"The ""qrtz_simple_triggers"" table is designed to store simple trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""repeat_count"" (the number of times the trigger should repeat), ""repeat_interval"" (the interval between trigger repeats), and ""times_triggered"" (the number of times the trigger has been triggered). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Find triggers that have a specific job data.,SELECT * FROM public.qrtz_triggers WHERE job_data IS NOT NULL;
"The ""qrtz_simple_triggers"" table is designed to store simple trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""repeat_count"" (the number of times the trigger should repeat), ""repeat_interval"" (the interval between trigger repeats), and ""times_triggered"" (the number of times the trigger has been triggered). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",List all triggers that are currently in a specific trigger state.,SELECT * FROM public.qrtz_triggers WHERE trigger_state = 'ACQUIRED';
"The ""qrtz_simple_triggers"" table is designed to store simple trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""repeat_count"" (the number of times the trigger should repeat), ""repeat_interval"" (the interval between trigger repeats), and ""times_triggered"" (the number of times the trigger has been triggered). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Show triggers with a specific misfire instruction.,SELECT * FROM public.qrtz_triggers WHERE misfire_instr = 2;
"The ""qrtz_simple_triggers"" table is designed to store simple trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""repeat_count"" (the number of times the trigger should repeat), ""repeat_interval"" (the interval between trigger repeats), and ""times_triggered"" (the number of times the trigger has been triggered). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Get the previous fire time for a specific trigger.,SELECT prev_fire_time FROM public.qrtz_triggers WHERE trigger_name = 'my_trigger' AND trigger_group = 'group1';
"The ""qrtz_simple_triggers"" table is designed to store simple trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""repeat_count"" (the number of times the trigger should repeat), ""repeat_interval"" (the interval between trigger repeats), and ""times_triggered"" (the number of times the trigger has been triggered). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Retrieve triggers that are scheduled to end before a certain time.,SELECT * FROM public.qrtz_triggers WHERE end_time < 1633900800000;
"The ""qrtz_simple_triggers"" table is designed to store simple trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""repeat_count"" (the number of times the trigger should repeat), ""repeat_interval"" (the interval between trigger repeats), and ""times_triggered"" (the number of times the trigger has been triggered). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Find triggers that have a specific next fire time and trigger state.,SELECT * FROM public.qrtz_triggers WHERE next_fire_time = 1633900800000 AND trigger_state = 'WAITING';
"The ""qrtz_simple_triggers"" table is designed to store simple trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""repeat_count"" (the number of times the trigger should repeat), ""repeat_interval"" (the interval between trigger repeats), and ""times_triggered"" (the number of times the trigger has been triggered). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",List triggers with a specific trigger group.,SELECT * FROM public.qrtz_triggers WHERE trigger_group = 'group1';
"The ""qrtz_simple_triggers"" table is designed to store simple trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""repeat_count"" (the number of times the trigger should repeat), ""repeat_interval"" (the interval between trigger repeats), and ""times_triggered"" (the number of times the trigger has been triggered). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Show triggers with a specific scheduler name.,SELECT * FROM public.qrtz_triggers WHERE sched_name = 'my_scheduler';
"The ""qrtz_simple_triggers"" table is designed to store simple trigger data related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""repeat_count"" (the number of times the trigger should repeat), ""repeat_interval"" (the interval between trigger repeats), and ""times_triggered"" (the number of times the trigger has been triggered). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Retrieve triggers that are associated with a specific job and job group.,SELECT * FROM public.qrtz_triggers WHERE job_name = 'my_job' AND job_group = 'job_group1';
"The ""qrtz_simprop_triggers"" table is designed to store trigger properties with various data types related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and various properties such as ""str_prop_1,"" ""str_prop_2,"" ""str_prop_3"" (string properties), ""int_prop_1,"" ""int_prop_2"" (integer properties), ""long_prop_1,"" ""long_prop_2"" (bigint properties), ""dec_prop_1,"" ""dec_prop_2"" (numeric properties), ""bool_prop_1,"" ""bool_prop_2"" (boolean properties), and ""time_zone_id"" (time zone identifier). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Find all triggers with a specific string property value.,SELECT * FROM public.qrtz_simprop_triggers WHERE str_prop_1 = 'property_value';
"The ""qrtz_simprop_triggers"" table is designed to store trigger properties with various data types related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and various properties such as ""str_prop_1,"" ""str_prop_2,"" ""str_prop_3"" (string properties), ""int_prop_1,"" ""int_prop_2"" (integer properties), ""long_prop_1,"" ""long_prop_2"" (bigint properties), ""dec_prop_1,"" ""dec_prop_2"" (numeric properties), ""bool_prop_1,"" ""bool_prop_2"" (boolean properties), and ""time_zone_id"" (time zone identifier). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Retrieve trigger properties with a specific integer value.,"SELECT int_prop_1, int_prop_2 FROM public.qrtz_simprop_triggers WHERE int_prop_1 = 42;"
"The ""qrtz_simprop_triggers"" table is designed to store trigger properties with various data types related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and various properties such as ""str_prop_1,"" ""str_prop_2,"" ""str_prop_3"" (string properties), ""int_prop_1,"" ""int_prop_2"" (integer properties), ""long_prop_1,"" ""long_prop_2"" (bigint properties), ""dec_prop_1,"" ""dec_prop_2"" (numeric properties), ""bool_prop_1,"" ""bool_prop_2"" (boolean properties), and ""time_zone_id"" (time zone identifier). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",List triggers with a specific long property value.,SELECT * FROM public.qrtz_simprop_triggers WHERE long_prop_1 = 1234567890;
"The ""qrtz_simprop_triggers"" table is designed to store trigger properties with various data types related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and various properties such as ""str_prop_1,"" ""str_prop_2,"" ""str_prop_3"" (string properties), ""int_prop_1,"" ""int_prop_2"" (integer properties), ""long_prop_1,"" ""long_prop_2"" (bigint properties), ""dec_prop_1,"" ""dec_prop_2"" (numeric properties), ""bool_prop_1,"" ""bool_prop_2"" (boolean properties), and ""time_zone_id"" (time zone identifier). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Show trigger details for a specific scheduler and trigger name.,SELECT * FROM public.qrtz_triggers WHERE sched_name = 'my_scheduler' AND trigger_name = 'my_trigger';
"The ""qrtz_simprop_triggers"" table is designed to store trigger properties with various data types related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and various properties such as ""str_prop_1,"" ""str_prop_2,"" ""str_prop_3"" (string properties), ""int_prop_1,"" ""int_prop_2"" (integer properties), ""long_prop_1,"" ""long_prop_2"" (bigint properties), ""dec_prop_1,"" ""dec_prop_2"" (numeric properties), ""bool_prop_1,"" ""bool_prop_2"" (boolean properties), and ""time_zone_id"" (time zone identifier). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Get the next fire time for a trigger with a specific boolean property.,SELECT next_fire_time FROM public.qrtz_triggers WHERE trigger_name = 'my_trigger' AND trigger_group = 'group1';
"The ""qrtz_simprop_triggers"" table is designed to store trigger properties with various data types related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and various properties such as ""str_prop_1,"" ""str_prop_2,"" ""str_prop_3"" (string properties), ""int_prop_1,"" ""int_prop_2"" (integer properties), ""long_prop_1,"" ""long_prop_2"" (bigint properties), ""dec_prop_1,"" ""dec_prop_2"" (numeric properties), ""bool_prop_1,"" ""bool_prop_2"" (boolean properties), and ""time_zone_id"" (time zone identifier). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Retrieve triggers with a specific time zone ID.,SELECT * FROM public.qrtz_simprop_triggers WHERE time_zone_id = 'America/New_York';
"The ""qrtz_simprop_triggers"" table is designed to store trigger properties with various data types related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and various properties such as ""str_prop_1,"" ""str_prop_2,"" ""str_prop_3"" (string properties), ""int_prop_1,"" ""int_prop_2"" (integer properties), ""long_prop_1,"" ""long_prop_2"" (bigint properties), ""dec_prop_1,"" ""dec_prop_2"" (numeric properties), ""bool_prop_1,"" ""bool_prop_2"" (boolean properties), and ""time_zone_id"" (time zone identifier). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Find triggers with a specific numeric property value.,SELECT * FROM public.qrtz_simprop_triggers WHERE dec_prop_1 = 123.45;
"The ""qrtz_simprop_triggers"" table is designed to store trigger properties with various data types related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and various properties such as ""str_prop_1,"" ""str_prop_2,"" ""str_prop_3"" (string properties), ""int_prop_1,"" ""int_prop_2"" (integer properties), ""long_prop_1,"" ""long_prop_2"" (bigint properties), ""dec_prop_1,"" ""dec_prop_2"" (numeric properties), ""bool_prop_1,"" ""bool_prop_2"" (boolean properties), and ""time_zone_id"" (time zone identifier). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",List triggers that are currently in a specific trigger state.,SELECT * FROM public.qrtz_triggers WHERE trigger_state = 'ACQUIRED';
"The ""qrtz_simprop_triggers"" table is designed to store trigger properties with various data types related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and various properties such as ""str_prop_1,"" ""str_prop_2,"" ""str_prop_3"" (string properties), ""int_prop_1,"" ""int_prop_2"" (integer properties), ""long_prop_1,"" ""long_prop_2"" (bigint properties), ""dec_prop_1,"" ""dec_prop_2"" (numeric properties), ""bool_prop_1,"" ""bool_prop_2"" (boolean properties), and ""time_zone_id"" (time zone identifier). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Show triggers with a specific priority.,SELECT * FROM public.qrtz_triggers WHERE priority = 5;
"The ""qrtz_simprop_triggers"" table is designed to store trigger properties with various data types related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and various properties such as ""str_prop_1,"" ""str_prop_2,"" ""str_prop_3"" (string properties), ""int_prop_1,"" ""int_prop_2"" (integer properties), ""long_prop_1,"" ""long_prop_2"" (bigint properties), ""dec_prop_1,"" ""dec_prop_2"" (numeric properties), ""bool_prop_1,"" ""bool_prop_2"" (boolean properties), and ""time_zone_id"" (time zone identifier). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Get the previous fire time for a specific trigger.,SELECT prev_fire_time FROM public.qrtz_triggers WHERE trigger_name = 'my_trigger' AND trigger_group = 'group1';
"The ""qrtz_simprop_triggers"" table is designed to store trigger properties with various data types related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and various properties such as ""str_prop_1,"" ""str_prop_2,"" ""str_prop_3"" (string properties), ""int_prop_1,"" ""int_prop_2"" (integer properties), ""long_prop_1,"" ""long_prop_2"" (bigint properties), ""dec_prop_1,"" ""dec_prop_2"" (numeric properties), ""bool_prop_1,"" ""bool_prop_2"" (boolean properties), and ""time_zone_id"" (time zone identifier). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Retrieve triggers with a specific boolean property value.,SELECT * FROM public.qrtz_simprop_triggers WHERE bool_prop_2 = TRUE;
"The ""qrtz_simprop_triggers"" table is designed to store trigger properties with various data types related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and various properties such as ""str_prop_1,"" ""str_prop_2,"" ""str_prop_3"" (string properties), ""int_prop_1,"" ""int_prop_2"" (integer properties), ""long_prop_1,"" ""long_prop_2"" (bigint properties), ""dec_prop_1,"" ""dec_prop_2"" (numeric properties), ""bool_prop_1,"" ""bool_prop_2"" (boolean properties), and ""time_zone_id"" (time zone identifier). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Find triggers with a specific misfire instruction.,SELECT * FROM public.qrtz_triggers WHERE misfire_instr = 2;
"The ""qrtz_simprop_triggers"" table is designed to store trigger properties with various data types related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and various properties such as ""str_prop_1,"" ""str_prop_2,"" ""str_prop_3"" (string properties), ""int_prop_1,"" ""int_prop_2"" (integer properties), ""long_prop_1,"" ""long_prop_2"" (bigint properties), ""dec_prop_1,"" ""dec_prop_2"" (numeric properties), ""bool_prop_1,"" ""bool_prop_2"" (boolean properties), and ""time_zone_id"" (time zone identifier). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",List triggers with a specific calendar name.,SELECT * FROM public.qrtz_triggers WHERE calendar_name = 'my_calendar';
"The ""qrtz_simprop_triggers"" table is designed to store trigger properties with various data types related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and various properties such as ""str_prop_1,"" ""str_prop_2,"" ""str_prop_3"" (string properties), ""int_prop_1,"" ""int_prop_2"" (integer properties), ""long_prop_1,"" ""long_prop_2"" (bigint properties), ""dec_prop_1,"" ""dec_prop_2"" (numeric properties), ""bool_prop_1,"" ""bool_prop_2"" (boolean properties), and ""time_zone_id"" (time zone identifier). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Show triggers associated with a specific job and job group.,SELECT * FROM public.qrtz_triggers WHERE job_name = 'my_job' AND job_group = 'job_group1';
"The ""qrtz_simprop_triggers"" table is designed to store trigger properties with various data types related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and various properties such as ""str_prop_1,"" ""str_prop_2,"" ""str_prop_3"" (string properties), ""int_prop_1,"" ""int_prop_2"" (integer properties), ""long_prop_1,"" ""long_prop_2"" (bigint properties), ""dec_prop_1,"" ""dec_prop_2"" (numeric properties), ""bool_prop_1,"" ""bool_prop_2"" (boolean properties), and ""time_zone_id"" (time zone identifier). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Retrieve triggers that have a specific start time.,SELECT * FROM public.qrtz_triggers WHERE start_time = 1633900800000;
"The ""qrtz_simprop_triggers"" table is designed to store trigger properties with various data types related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and various properties such as ""str_prop_1,"" ""str_prop_2,"" ""str_prop_3"" (string properties), ""int_prop_1,"" ""int_prop_2"" (integer properties), ""long_prop_1,"" ""long_prop_2"" (bigint properties), ""dec_prop_1,"" ""dec_prop_2"" (numeric properties), ""bool_prop_1,"" ""bool_prop_2"" (boolean properties), and ""time_zone_id"" (time zone identifier). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Find triggers with specific string properties.,SELECT * FROM public.qrtz_simprop_triggers WHERE str_prop_2 = 'property_value' AND str_prop_3 = 'another_value';
"The ""qrtz_simprop_triggers"" table is designed to store trigger properties with various data types related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and various properties such as ""str_prop_1,"" ""str_prop_2,"" ""str_prop_3"" (string properties), ""int_prop_1,"" ""int_prop_2"" (integer properties), ""long_prop_1,"" ""long_prop_2"" (bigint properties), ""dec_prop_1,"" ""dec_prop_2"" (numeric properties), ""bool_prop_1,"" ""bool_prop_2"" (boolean properties), and ""time_zone_id"" (time zone identifier). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",List triggers with specific long properties.,SELECT * FROM public.qrtz_simprop_triggers WHERE long_prop_1 = 9876543210 AND long_prop_2 = 8765432109;
"The ""qrtz_simprop_triggers"" table is designed to store trigger properties with various data types related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and various properties such as ""str_prop_1,"" ""str_prop_2,"" ""str_prop_3"" (string properties), ""int_prop_1,"" ""int_prop_2"" (integer properties), ""long_prop_1,"" ""long_prop_2"" (bigint properties), ""dec_prop_1,"" ""dec_prop_2"" (numeric properties), ""bool_prop_1,"" ""bool_prop_2"" (boolean properties), and ""time_zone_id"" (time zone identifier). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Show triggers with a specific trigger type.,SELECT * FROM public.qrtz_triggers WHERE trigger_type = 'SIMPLE';
"The ""qrtz_simprop_triggers"" table is designed to store trigger properties with various data types related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and various properties such as ""str_prop_1,"" ""str_prop_2,"" ""str_prop_3"" (string properties), ""int_prop_1,"" ""int_prop_2"" (integer properties), ""long_prop_1,"" ""long_prop_2"" (bigint properties), ""dec_prop_1,"" ""dec_prop_2"" (numeric properties), ""bool_prop_1,"" ""bool_prop_2"" (boolean properties), and ""time_zone_id"" (time zone identifier). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Get trigger properties associated with a specific scheduler and trigger.,SELECT * FROM public.qrtz_simprop_triggers WHERE sched_name = 'my_scheduler' AND trigger_name = 'my_trigger';
"The ""qrtz_simprop_triggers"" table is designed to store trigger properties with various data types related to Quartz scheduling. It includes columns for ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), and various properties such as ""str_prop_1,"" ""str_prop_2,"" ""str_prop_3"" (string properties), ""int_prop_1,"" ""int_prop_2"" (integer properties), ""long_prop_1,"" ""long_prop_2"" (bigint properties), ""dec_prop_1,"" ""dec_prop_2"" (numeric properties), ""bool_prop_1,"" ""bool_prop_2"" (boolean properties), and ""time_zone_id"" (time zone identifier). This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_triggers"" table via a foreign key constraint.
The ""qrtz_triggers"" table is used to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name,"" ""trigger_name,"" ""trigger_group,"" ""job_name,"" ""job_group,"" ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.",Retrieve triggers with specific boolean properties.,SELECT * FROM public.qrtz_simprop_triggers WHERE bool_prop_1 = FALSE AND bool_prop_2 = TRUE;
"The ""qrtz_triggers"" table is designed to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""job_name"" (the name of the associated job), ""job_group"" (the group to which the job belongs), ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.
The ""qrtz_job_details"" table stores details about Quartz jobs. It includes columns for ""sched_name"" (the name of the scheduler), ""job_name"" (the name of the job), ""job_group"" (the group to which the job belongs), ""description,"" ""job_class_name"" (the fully qualified class name of the job class), ""is_durable"" (indicating whether the job is durable), ""is_nonconcurrent"" (indicating whether the job is non-concurrent), ""is_update_data"" (indicating whether the job data should be updated), ""requests_recovery"" (indicating whether job recovery is requested), and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""job_name,"" and ""job_group"" and an index on the ""requests_recovery"" column.",List all trigger details for a specific scheduler.,SELECT * FROM public.qrtz_triggers WHERE sched_name = 'my_scheduler';
"The ""qrtz_triggers"" table is designed to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""job_name"" (the name of the associated job), ""job_group"" (the group to which the job belongs), ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.
The ""qrtz_job_details"" table stores details about Quartz jobs. It includes columns for ""sched_name"" (the name of the scheduler), ""job_name"" (the name of the job), ""job_group"" (the group to which the job belongs), ""description,"" ""job_class_name"" (the fully qualified class name of the job class), ""is_durable"" (indicating whether the job is durable), ""is_nonconcurrent"" (indicating whether the job is non-concurrent), ""is_update_data"" (indicating whether the job data should be updated), ""requests_recovery"" (indicating whether job recovery is requested), and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""job_name,"" and ""job_group"" and an index on the ""requests_recovery"" column.",Show triggers with a specific trigger type.,SELECT * FROM public.qrtz_triggers WHERE trigger_type = 'SIMPLE';
"The ""qrtz_triggers"" table is designed to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""job_name"" (the name of the associated job), ""job_group"" (the group to which the job belongs), ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.
The ""qrtz_job_details"" table stores details about Quartz jobs. It includes columns for ""sched_name"" (the name of the scheduler), ""job_name"" (the name of the job), ""job_group"" (the group to which the job belongs), ""description,"" ""job_class_name"" (the fully qualified class name of the job class), ""is_durable"" (indicating whether the job is durable), ""is_nonconcurrent"" (indicating whether the job is non-concurrent), ""is_update_data"" (indicating whether the job data should be updated), ""requests_recovery"" (indicating whether job recovery is requested), and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""job_name,"" and ""job_group"" and an index on the ""requests_recovery"" column.",Retrieve trigger properties for a specific job.,SELECT * FROM public.qrtz_triggers WHERE job_name = 'my_job' AND job_group = 'job_group1';
"The ""qrtz_triggers"" table is designed to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""job_name"" (the name of the associated job), ""job_group"" (the group to which the job belongs), ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.
The ""qrtz_job_details"" table stores details about Quartz jobs. It includes columns for ""sched_name"" (the name of the scheduler), ""job_name"" (the name of the job), ""job_group"" (the group to which the job belongs), ""description,"" ""job_class_name"" (the fully qualified class name of the job class), ""is_durable"" (indicating whether the job is durable), ""is_nonconcurrent"" (indicating whether the job is non-concurrent), ""is_update_data"" (indicating whether the job data should be updated), ""requests_recovery"" (indicating whether job recovery is requested), and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""job_name,"" and ""job_group"" and an index on the ""requests_recovery"" column.",Get triggers that are currently in a specific trigger state.,SELECT * FROM public.qrtz_triggers WHERE trigger_state = 'ACQUIRED';
"The ""qrtz_triggers"" table is designed to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""job_name"" (the name of the associated job), ""job_group"" (the group to which the job belongs), ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.
The ""qrtz_job_details"" table stores details about Quartz jobs. It includes columns for ""sched_name"" (the name of the scheduler), ""job_name"" (the name of the job), ""job_group"" (the group to which the job belongs), ""description,"" ""job_class_name"" (the fully qualified class name of the job class), ""is_durable"" (indicating whether the job is durable), ""is_nonconcurrent"" (indicating whether the job is non-concurrent), ""is_update_data"" (indicating whether the job data should be updated), ""requests_recovery"" (indicating whether job recovery is requested), and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""job_name,"" and ""job_group"" and an index on the ""requests_recovery"" column.",Find triggers with a specific misfire instruction.,SELECT * FROM public.qrtz_triggers WHERE misfire_instr = 2;
"The ""qrtz_triggers"" table is designed to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""job_name"" (the name of the associated job), ""job_group"" (the group to which the job belongs), ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.
The ""qrtz_job_details"" table stores details about Quartz jobs. It includes columns for ""sched_name"" (the name of the scheduler), ""job_name"" (the name of the job), ""job_group"" (the group to which the job belongs), ""description,"" ""job_class_name"" (the fully qualified class name of the job class), ""is_durable"" (indicating whether the job is durable), ""is_nonconcurrent"" (indicating whether the job is non-concurrent), ""is_update_data"" (indicating whether the job data should be updated), ""requests_recovery"" (indicating whether job recovery is requested), and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""job_name,"" and ""job_group"" and an index on the ""requests_recovery"" column.",List triggers with specific priority.,SELECT * FROM public.qrtz_triggers WHERE priority = 5;
"The ""qrtz_triggers"" table is designed to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""job_name"" (the name of the associated job), ""job_group"" (the group to which the job belongs), ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.
The ""qrtz_job_details"" table stores details about Quartz jobs. It includes columns for ""sched_name"" (the name of the scheduler), ""job_name"" (the name of the job), ""job_group"" (the group to which the job belongs), ""description,"" ""job_class_name"" (the fully qualified class name of the job class), ""is_durable"" (indicating whether the job is durable), ""is_nonconcurrent"" (indicating whether the job is non-concurrent), ""is_update_data"" (indicating whether the job data should be updated), ""requests_recovery"" (indicating whether job recovery is requested), and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""job_name,"" and ""job_group"" and an index on the ""requests_recovery"" column.",Show triggers with specific next fire times.,SELECT * FROM public.qrtz_triggers WHERE next_fire_time BETWEEN 1633900800000 AND 1633904400000;
"The ""qrtz_triggers"" table is designed to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""job_name"" (the name of the associated job), ""job_group"" (the group to which the job belongs), ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.
The ""qrtz_job_details"" table stores details about Quartz jobs. It includes columns for ""sched_name"" (the name of the scheduler), ""job_name"" (the name of the job), ""job_group"" (the group to which the job belongs), ""description,"" ""job_class_name"" (the fully qualified class name of the job class), ""is_durable"" (indicating whether the job is durable), ""is_nonconcurrent"" (indicating whether the job is non-concurrent), ""is_update_data"" (indicating whether the job data should be updated), ""requests_recovery"" (indicating whether job recovery is requested), and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""job_name,"" and ""job_group"" and an index on the ""requests_recovery"" column.",Retrieve triggers with specific previous fire times.,SELECT * FROM public.qrtz_triggers WHERE prev_fire_time BETWEEN 1633900800000 AND 1633904400000;
"The ""qrtz_triggers"" table is designed to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""job_name"" (the name of the associated job), ""job_group"" (the group to which the job belongs), ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.
The ""qrtz_job_details"" table stores details about Quartz jobs. It includes columns for ""sched_name"" (the name of the scheduler), ""job_name"" (the name of the job), ""job_group"" (the group to which the job belongs), ""description,"" ""job_class_name"" (the fully qualified class name of the job class), ""is_durable"" (indicating whether the job is durable), ""is_nonconcurrent"" (indicating whether the job is non-concurrent), ""is_update_data"" (indicating whether the job data should be updated), ""requests_recovery"" (indicating whether job recovery is requested), and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""job_name,"" and ""job_group"" and an index on the ""requests_recovery"" column.",List triggers with specific calendar names.,"SELECT * FROM public.qrtz_triggers WHERE calendar_name IN ('calendar1', 'calendar2');"
"The ""qrtz_triggers"" table is designed to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""job_name"" (the name of the associated job), ""job_group"" (the group to which the job belongs), ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.
The ""qrtz_job_details"" table stores details about Quartz jobs. It includes columns for ""sched_name"" (the name of the scheduler), ""job_name"" (the name of the job), ""job_group"" (the group to which the job belongs), ""description,"" ""job_class_name"" (the fully qualified class name of the job class), ""is_durable"" (indicating whether the job is durable), ""is_nonconcurrent"" (indicating whether the job is non-concurrent), ""is_update_data"" (indicating whether the job data should be updated), ""requests_recovery"" (indicating whether job recovery is requested), and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""job_name,"" and ""job_group"" and an index on the ""requests_recovery"" column.",Show triggers for a specific job group.,SELECT * FROM public.qrtz_triggers WHERE job_group = 'job_group1';
"The ""qrtz_triggers"" table is designed to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""job_name"" (the name of the associated job), ""job_group"" (the group to which the job belongs), ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.
The ""qrtz_job_details"" table stores details about Quartz jobs. It includes columns for ""sched_name"" (the name of the scheduler), ""job_name"" (the name of the job), ""job_group"" (the group to which the job belongs), ""description,"" ""job_class_name"" (the fully qualified class name of the job class), ""is_durable"" (indicating whether the job is durable), ""is_nonconcurrent"" (indicating whether the job is non-concurrent), ""is_update_data"" (indicating whether the job data should be updated), ""requests_recovery"" (indicating whether job recovery is requested), and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""job_name,"" and ""job_group"" and an index on the ""requests_recovery"" column.",Get triggers with a specific start time.,SELECT * FROM public.qrtz_triggers WHERE start_time = 1633900800000;
"The ""qrtz_triggers"" table is designed to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""job_name"" (the name of the associated job), ""job_group"" (the group to which the job belongs), ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.
The ""qrtz_job_details"" table stores details about Quartz jobs. It includes columns for ""sched_name"" (the name of the scheduler), ""job_name"" (the name of the job), ""job_group"" (the group to which the job belongs), ""description,"" ""job_class_name"" (the fully qualified class name of the job class), ""is_durable"" (indicating whether the job is durable), ""is_nonconcurrent"" (indicating whether the job is non-concurrent), ""is_update_data"" (indicating whether the job data should be updated), ""requests_recovery"" (indicating whether job recovery is requested), and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""job_name,"" and ""job_group"" and an index on the ""requests_recovery"" column.",Retrieve triggers with specific end times.,SELECT * FROM public.qrtz_triggers WHERE end_time BETWEEN 1633900800000 AND 1633904400000;
"The ""qrtz_triggers"" table is designed to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""job_name"" (the name of the associated job), ""job_group"" (the group to which the job belongs), ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.
The ""qrtz_job_details"" table stores details about Quartz jobs. It includes columns for ""sched_name"" (the name of the scheduler), ""job_name"" (the name of the job), ""job_group"" (the group to which the job belongs), ""description,"" ""job_class_name"" (the fully qualified class name of the job class), ""is_durable"" (indicating whether the job is durable), ""is_nonconcurrent"" (indicating whether the job is non-concurrent), ""is_update_data"" (indicating whether the job data should be updated), ""requests_recovery"" (indicating whether job recovery is requested), and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""job_name,"" and ""job_group"" and an index on the ""requests_recovery"" column.",Find triggers with a specific description.,SELECT * FROM public.qrtz_triggers WHERE description = 'My Trigger Description';
"The ""qrtz_triggers"" table is designed to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""job_name"" (the name of the associated job), ""job_group"" (the group to which the job belongs), ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.
The ""qrtz_job_details"" table stores details about Quartz jobs. It includes columns for ""sched_name"" (the name of the scheduler), ""job_name"" (the name of the job), ""job_group"" (the group to which the job belongs), ""description,"" ""job_class_name"" (the fully qualified class name of the job class), ""is_durable"" (indicating whether the job is durable), ""is_nonconcurrent"" (indicating whether the job is non-concurrent), ""is_update_data"" (indicating whether the job data should be updated), ""requests_recovery"" (indicating whether job recovery is requested), and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""job_name,"" and ""job_group"" and an index on the ""requests_recovery"" column.",List triggers requesting recovery.,SELECT * FROM public.qrtz_triggers WHERE trigger_state = 'WAITING' AND job_name IN (SELECT job_name FROM public.qrtz_job_details WHERE requests_recovery = TRUE);
"The ""qrtz_triggers"" table is designed to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""job_name"" (the name of the associated job), ""job_group"" (the group to which the job belongs), ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.
The ""qrtz_job_details"" table stores details about Quartz jobs. It includes columns for ""sched_name"" (the name of the scheduler), ""job_name"" (the name of the job), ""job_group"" (the group to which the job belongs), ""description,"" ""job_class_name"" (the fully qualified class name of the job class), ""is_durable"" (indicating whether the job is durable), ""is_nonconcurrent"" (indicating whether the job is non-concurrent), ""is_update_data"" (indicating whether the job data should be updated), ""requests_recovery"" (indicating whether job recovery is requested), and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""job_name,"" and ""job_group"" and an index on the ""requests_recovery"" column.",Get trigger details for a specific trigger name and group.,SELECT * FROM public.qrtz_triggers WHERE trigger_name = 'my_trigger' AND trigger_group = 'group1';
"The ""qrtz_triggers"" table is designed to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""job_name"" (the name of the associated job), ""job_group"" (the group to which the job belongs), ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.
The ""qrtz_job_details"" table stores details about Quartz jobs. It includes columns for ""sched_name"" (the name of the scheduler), ""job_name"" (the name of the job), ""job_group"" (the group to which the job belongs), ""description,"" ""job_class_name"" (the fully qualified class name of the job class), ""is_durable"" (indicating whether the job is durable), ""is_nonconcurrent"" (indicating whether the job is non-concurrent), ""is_update_data"" (indicating whether the job data should be updated), ""requests_recovery"" (indicating whether job recovery is requested), and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""job_name,"" and ""job_group"" and an index on the ""requests_recovery"" column.",Retrieve triggers with specific trigger names and groups.,"SELECT * FROM public.qrtz_triggers WHERE (trigger_name, trigger_group) IN (('trigger1', 'group1'), ('trigger2', 'group2'));"
"The ""qrtz_triggers"" table is designed to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""job_name"" (the name of the associated job), ""job_group"" (the group to which the job belongs), ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.
The ""qrtz_job_details"" table stores details about Quartz jobs. It includes columns for ""sched_name"" (the name of the scheduler), ""job_name"" (the name of the job), ""job_group"" (the group to which the job belongs), ""description,"" ""job_class_name"" (the fully qualified class name of the job class), ""is_durable"" (indicating whether the job is durable), ""is_nonconcurrent"" (indicating whether the job is non-concurrent), ""is_update_data"" (indicating whether the job data should be updated), ""requests_recovery"" (indicating whether job recovery is requested), and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""job_name,"" and ""job_group"" and an index on the ""requests_recovery"" column.",Find triggers based on job data content.,SELECT * FROM public.qrtz_triggers WHERE job_data = 'my_job_data';
"The ""qrtz_triggers"" table is designed to manage trigger information in the Quartz scheduler. It includes columns such as ""sched_name"" (the name of the scheduler), ""trigger_name"" (the name of the trigger), ""trigger_group"" (the group to which the trigger belongs), ""job_name"" (the name of the associated job), ""job_group"" (the group to which the job belongs), ""description,"" ""next_fire_time,"" ""prev_fire_time,"" ""priority,"" ""trigger_state,"" ""trigger_type,"" ""start_time,"" ""end_time,"" ""calendar_name,"" ""misfire_instr,"" and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""trigger_name,"" and ""trigger_group"" and references the ""qrtz_job_details"" table via a foreign key constraint. Additionally, it has several indexes to optimize query performance.
The ""qrtz_job_details"" table stores details about Quartz jobs. It includes columns for ""sched_name"" (the name of the scheduler), ""job_name"" (the name of the job), ""job_group"" (the group to which the job belongs), ""description,"" ""job_class_name"" (the fully qualified class name of the job class), ""is_durable"" (indicating whether the job is durable), ""is_nonconcurrent"" (indicating whether the job is non-concurrent), ""is_update_data"" (indicating whether the job data should be updated), ""requests_recovery"" (indicating whether job recovery is requested), and ""job_data."" This table has a primary key constraint on the combination of ""sched_name,"" ""job_name,"" and ""job_group"" and an index on the ""requests_recovery"" column.",List all triggers in a specific scheduler ordered by priority.,SELECT * FROM public.qrtz_triggers WHERE sched_name = 'my_scheduler' ORDER BY priority DESC;
,Retrieve all active users in the system.,SELECT * FROM public.users WHERE is_enabled = TRUE;
,List the names of all projects.,SELECT name FROM public.projects;
,Get the email addresses of users who are both compromised and offended.,SELECT email FROM public.users WHERE compromised = TRUE AND offended = TRUE;
,Show the total count of users in each project.,"SELECT project_id, COUNT(*) FROM public.users GROUP BY project_id;"
,Find the names of projects with a specific project lead.,SELECT name FROM public.projects WHERE project_lead_id = 123;
,Retrieve the email profiles used for a particular project.,SELECT * FROM public.email_profile WHERE project_id = 456;
,List all campaigns that have been executed.,SELECT * FROM public.campaign WHERE executed = TRUE;
,Show the names of users who have not been compromised.,"SELECT firstname, lastname FROM public.users WHERE compromised = FALSE;"
,Get the campaign names that are scheduled.,SELECT name FROM public.campaign WHERE is_scheduled = TRUE;
,Find the projects with specific project types.,"SELECT name FROM public.projects WHERE type IN ('Type1', 'Type2');"
,Retrieve the usernames of super administrators.,SELECT username FROM public.admins WHERE super_admin = TRUE;
,List the job names and job groups for durable jobs.,"SELECT job_name, job_group FROM public.qrtz_job_details WHERE is_durable = TRUE;"
,Show the descriptions of triggers with a specific trigger type.,SELECT description FROM public.qrtz_triggers WHERE trigger_type = 'SIMPLE';
,Get the email templates associated with a particular technique.,SELECT * FROM public.email_template WHERE technique_id = 789;
,Find the trigger names with specific misfire instructions.,"SELECT trigger_name FROM public.qrtz_triggers WHERE misfire_instr IN (1, 2);"
,Retrieve the project names for companies in a specific industry.,SELECT p.name FROM public.projects p JOIN public.company c ON p.company_id = c.id WHERE c.industry = 'Tech';
,List the unique role names in the system.,SELECT DISTINCT name FROM public.roles;
,Show the subjects of campaigns launched in a specific timezone.,SELECT subject FROM public.campaign WHERE timezone = 'America/New_York';
,Get the cron expressions for triggers associated with a particular job.,SELECT c.cron_expression FROM public.qrtz_cron_triggers c JOIN public.qrtz_triggers t ON c.sched_name = t.sched_name AND c.trigger_name = t.trigger_name AND c.trigger_group = t.trigger_group WHERE t.job_name = 'my_job';
,Retrieve all campaigns owned by a specific user.,SELECT * FROM public.campaign WHERE owner = 'John Doe';
,List the names of groups associated with administrators.,SELECT g.name FROM public.groups g JOIN public.admins_groups ag ON g.id = ag.group_id;
,Get the project names with enabled reminders.,SELECT p.name FROM public.projects p JOIN public.campaign c ON p.id = c.project_id WHERE c.has_reminders = TRUE;
,Show the count of offended users in each project.,"SELECT u.project_id, COUNT(*) FROM public.users u WHERE u.offended = TRUE GROUP BY u.project_id;"
,Find the unique names of attack techniques.,SELECT DISTINCT name FROM public.attack_techniques;
,Retrieve the job class names for non-concurrent jobs.,SELECT job_class_name FROM public.qrtz_job_details WHERE is_nonconcurrent = TRUE;
,List the campaign names with custom templates.,SELECT name FROM public.campaign WHERE has_custom_template = TRUE;
,Show the description of triggers with a specific priority.,SELECT description FROM public.qrtz_triggers WHERE priority = 3;
,Get the usernames of administrators in a specific group.,SELECT a.username FROM public.admins a JOIN public.admins_groups ag ON a.id = ag.admin_id WHERE ag.group_id = 789;
,Find the email profiles using a specific email server.,SELECT * FROM public.email_profile WHERE server = 'smtp.example.com';
,Retrieve the projects with a specific country and industry.,SELECT p.name FROM public.projects p JOIN public.company c ON p.company_id = c.id WHERE c.country = 'USA' AND c.industry = 'Finance';
,List the job names and groups for jobs that require recovery.,"SELECT job_name, job_group FROM public.qrtz_job_details WHERE requests_recovery = TRUE;"
,Show the campaign names that are auto-training enabled.,SELECT name FROM public.campaign WHERE is_auto_training = TRUE;
,Get the usernames of super administrators in a specific company.,SELECT a.username FROM public.admins a JOIN public.company c ON a.company_id = c.id WHERE a.super_admin = TRUE AND c.name = 'ABC Inc.';
,Find the project names led by a specific project lead.,SELECT name FROM public.projects WHERE project_lead_id = 456;
,Retrieve the usernames of users associated with a specific role.,SELECT a.username FROM public.admins a JOIN public.roles r ON a.role_id = r.id WHERE r.name = 'Manager';
,List the campaign names with specific reminder frequencies.,"SELECT name FROM public.campaign WHERE reminders_frequency IN (1, 3, 5);"
,Show the company names in a specific state.,SELECT name FROM public.company WHERE state = 'California';
,Get the job names and descriptions for jobs that are updateable.,"SELECT job_name, description FROM public.qrtz_job_details WHERE is_update_data = TRUE;"
,Find the campaign names with specific execution statuses.,"SELECT name FROM public.campaign WHERE status IN (1, 2);"
,List the names of projects in a specific industry.,SELECT name FROM public.projects WHERE company_id IN (SELECT id FROM public.company WHERE industry = 'Healthcare');
,Get the usernames of administrators associated with a specific project.,SELECT a.username FROM public.admins a JOIN public.admins_projects ap ON a.id = ap.admin_id WHERE ap.project_id = 789;
,Find the campaign names owned by a user and with specific execution statuses.,"SELECT name FROM public.campaign WHERE owner = 'Jane Smith' AND status IN (3, 4);"
,Retrieve the names of projects where the project lead has a specific job role.,SELECT p.name FROM public.projects p JOIN public.admins a ON p.project_lead_id = a.id WHERE a.job_role = 'Manager';
,Show the names of users who have not been offended or compromised.,"SELECT firstname, lastname FROM public.users WHERE offended = FALSE AND compromised = FALSE;"
,Get the campaign names with custom templates owned by a user in a specific timezone.,SELECT name FROM public.campaign WHERE owner = 'John Doe' AND has_custom_template = TRUE AND timezone = 'UTC';
,Find the project names with enabled reminders and specific project types.,"SELECT p.name FROM public.projects p JOIN public.campaign c ON p.id = c.project_id WHERE c.has_reminders = TRUE AND p.type IN ('Internal', 'External');"
,Retrieve the usernames of super administrators in a specific state and country.,SELECT a.username FROM public.admins a JOIN public.company c ON a.company_id = c.id WHERE a.super_admin = TRUE AND c.state = 'New York' AND c.country = 'USA';
,List the job names and descriptions for jobs with specific trigger types.,"SELECT j.job_name, j.description FROM public.qrtz_job_details j JOIN public.qrtz_triggers t ON j.sched_name = t.sched_name AND j.job_name = t.job_name AND j.job_group = t.job_group WHERE t.trigger_type IN ('SIMPLE', 'CRON');"
,Show the campaign names that are auto-training enabled and executed.,SELECT name FROM public.campaign WHERE is_auto_training = TRUE AND executed = TRUE;
,Get the project names led by a specific project lead with a particular company size.,SELECT p.name FROM public.projects p JOIN public.company c ON p.company_id = c.id WHERE p.project_lead_id = 456 AND c.size > 1000;
,Find the usernames of users associated with a specific role in a project.,SELECT a.username FROM public.admins a JOIN public.users u ON a.id = u.id WHERE u.role_id = 789 AND u.project_id = 123;
,List the campaign names with specific reminder frequencies and execution statuses.,SELECT name FROM public.campaign WHERE reminders_frequency = 7 AND status = 2;
,Show the company names in a specific zip code.,SELECT name FROM public.company WHERE zipcode = 12345;
,Get the job names and descriptions for jobs that are non-concurrent and have specific trigger states.,"SELECT j.job_name, j.description FROM public.qrtz_job_details j JOIN public.qrtz_triggers t ON j.sched_name = t.sched_name AND j.job_name = t.job_name AND j.job_group = t.job_group WHERE t.trigger_state IN ('PAUSED', 'BLOCKED') AND j.is_nonconcurrent = TRUE;"
,Retrieve the project names where the project lead's last name starts with 'S'.,"SELECT p.name FROM public.projects p JOIN public.admins a ON p.project_lead_id = a.id WHERE LEFT(a.lastname, 1) = 'S';"
,List the email profiles that are enabled and have a specific protocol.,SELECT name FROM public.email_profile WHERE is_enabled = TRUE AND protocol = 'SMTP';
,Show the campaign names that have a specific subject and were executed before a certain date.,SELECT name FROM public.campaign WHERE subject = 'Important Announcement' AND executed_at < '2023-06-01';
,Get the usernames of administrators who are super admins and have been activated.,SELECT username FROM public.admins WHERE super_admin = TRUE AND activated = TRUE;
,Find the project names with specific project types and enabled status.,"SELECT name FROM public.projects WHERE type IN ('Internal', 'External') AND is_enabled = TRUE;"
,Retrieve the campaign names with a certain execution status and specific techniques.,"SELECT name FROM public.campaign WHERE status = 3 AND technique_id IN (1, 2, 3);"
,Show the project names that have a project lead with a specific job role.,SELECT p.name FROM public.projects p JOIN public.admins a ON p.project_lead_id = a.id WHERE a.job_role = 'Manager';
,Get the campaign names owned by a specific user and scheduled for execution.,SELECT name FROM public.campaign WHERE owner = 'Alice' AND is_scheduled = TRUE;
,Find the project names in a specific industry and state.,SELECT p.name FROM public.projects p JOIN public.company c ON p.company_id = c.id WHERE c.industry = 'Finance' AND c.state = 'California';
,Retrieve the campaign names with custom templates and a specific launch status.,SELECT name FROM public.campaign WHERE has_custom_template = TRUE AND launched = TRUE;
,List the job names and descriptions for jobs with specific misfire instructions.,"SELECT j.job_name, j.description FROM public.qrtz_job_details j JOIN public.qrtz_triggers t ON j.sched_name = t.sched_name AND j.job_name = t.job_name AND j.job_group = t.job_group WHERE t.misfire_instr IN (1, 2);"
,Show the usernames of administrators associated with a specific company and role.,SELECT a.username FROM public.admins a WHERE a.company_id = 123 AND a.role_id = 456;
,Find the campaign names with specific reminder numbers and scheduled times.,SELECT name FROM public.campaign WHERE reminders_number = 3 AND schedule_time BETWEEN '2023-07-01' AND '2023-08-01';
,Retrieve the project names with enabled reminders and a specific company size.,SELECT p.name FROM public.projects p JOIN public.campaign c ON p.id = c.project_id WHERE c.has_reminders = TRUE AND p.company_id IN (SELECT id FROM public.company WHERE size > 500);
,List the company names in a specific country and industry.,SELECT name FROM public.company WHERE country = 'United Kingdom' AND industry = 'Technology';
,Show the campaign names that are executed and have auto-training enabled.,SELECT name FROM public.campaign WHERE executed = TRUE AND is_auto_training = TRUE;
,Find the names of active email profiles using the SMTP protocol.,SELECT name FROM public.email_profile WHERE is_enabled = TRUE AND protocol = 'SMTP';
,"Retrieve the campaign names that were executed before January 1, 2023, and had the subject ""Product Launch.""",SELECT name FROM public.campaign WHERE executed_at < '2023-01-01' AND subject = 'Product Launch';
,Show the usernames of administrators who are super admins and have been activated.,SELECT username FROM public.admins WHERE super_admin = TRUE AND activated = TRUE;
,Get the project names for projects in the 'Finance' industry and located in 'New York.',SELECT p.name FROM public.projects p JOIN public.company c ON p.company_id = c.id WHERE c.industry = 'Finance' AND c.state = 'New York';
,List the campaign names that are scheduled for execution and owned by user 'Alice.',SELECT name FROM public.campaign WHERE is_scheduled = TRUE AND owner = 'Alice';
,Retrieve the project names that have project leads with the job role 'Manager.',SELECT p.name FROM public.projects p JOIN public.admins a ON p.project_lead_id = a.id WHERE a.job_role = 'Manager';
,Get the campaign names with custom templates and that have been launched.,SELECT name FROM public.campaign WHERE has_custom_template = TRUE AND launched = TRUE;
,List the job names and descriptions for jobs with misfire instructions 1 or 2.,"SELECT j.job_name, j.description FROM public.qrtz_job_details j JOIN public.qrtz_triggers t ON j.sched_name = t.sched_name AND j.job_name = t.job_name AND j.job_group = t.job_group WHERE t.misfire_instr IN (1, 2);"
,Retrieve the project names in the 'Technology' industry and 'California' state.,SELECT p.name FROM public.projects p JOIN public.company c ON p.company_id = c.id WHERE c.industry = 'Technology' AND c.state = 'California';
,Find the campaign names with reminders set to 3 and scheduled between July and August 2023.,SELECT name FROM public.campaign WHERE reminders_number = 3 AND schedule_time BETWEEN '2023-07-01' AND '2023-08-01';
,Show the usernames of administrators associated with company ID 123 and role ID 456.,SELECT a.username FROM public.admins a WHERE a.company_id = 123 AND a.role_id = 456;
,Get the company names in the 'United Kingdom' and 'Technology' industry.,SELECT name FROM public.company WHERE country = 'United Kingdom' AND industry = 'Technology';
,Find the campaign names that are executed and have auto-training enabled.,SELECT name FROM public.campaign WHERE executed = TRUE AND is_auto_training = TRUE;
,List the project names with enabled reminders and associated with companies with more than 500 employees.,SELECT p.name FROM public.projects p JOIN public.campaign c ON p.id = c.project_id WHERE c.has_reminders = TRUE AND p.company_id IN (SELECT id FROM public.company WHERE size > 500);
,Show the campaign names that have a custom template and belong to projects in the 'Healthcare' industry.,SELECT name FROM public.campaign WHERE has_custom_template = TRUE AND project_id IN (SELECT id FROM public.projects WHERE type = 'Healthcare');
,Find the names of administrators who have not been activated yet.,SELECT username FROM public.admins WHERE activated = FALSE;
,Retrieve the campaign names that have an email profile associated with a 'Gmail' server.,SELECT c.name FROM public.campaign c JOIN public.email_profile ep ON c.email_profile_id = ep.id WHERE ep.server = 'Gmail';
,"Show the project names that have not been updated since January 1, 2023.",SELECT name FROM public.projects WHERE updated_at < '2023-01-01';
,Get the email profiles that use a 'Secure' protocol and have a port number greater than 5000.,SELECT ep.name FROM public.email_profile ep WHERE ep.protocol = 'Secure' AND ep.port > 5000;
,"List the campaign names that were launched in 'EST' timezone and have the subject ""Promotion.""",SELECT c.name FROM public.campaign c WHERE c.launched = TRUE AND c.timezone = 'EST' AND c.subject = 'Promotion';
,Get the campaign names with reminders set to 5 or more.,SELECT name FROM public.campaign WHERE reminders_number >= 5;
,List the project names with enabled reminders and associated with companies in the 'Technology' industry.,SELECT p.name FROM public.projects p JOIN public.campaign c ON p.id = c.project_id WHERE c.has_reminders = TRUE AND p.company_id IN (SELECT id FROM public.company WHERE industry = 'Technology');
,Get the project names that have project leads with a job role containing the word 'Director.',SELECT p.name FROM public.projects p JOIN public.admins a ON p.project_lead_id = a.id WHERE POSITION('Director' IN a.job_role) > 0;
,Find the campaign names that have reminders enabled and were scheduled for execution between June and July 2023.,SELECT name FROM public.campaign WHERE has_reminders = TRUE AND schedule_time BETWEEN '2023-06-01' AND '2023-07-31';
,Retrieve the company names in the 'United Kingdom' with more than 100 employees.,SELECT name FROM public.company WHERE country = 'United Kingdom' AND size > 100;
,Get the usernames of administrators who are not super admins and have a phone number specified.,SELECT username FROM public.admins WHERE super_admin = FALSE AND phone IS NOT NULL;